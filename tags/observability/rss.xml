<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>observability on Andy Dote</title><link>https://andydote.co.uk/tags/observability/</link><description>Recent content in observability on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 26 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/observability/rss.xml" rel="self" type="application/rss+xml"/><item><title>Telemetry and Cancelled Contexts</title><link>https://andydote.co.uk/2024/12/26/opentelemetry-cancelled-contexts/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2024/12/26/opentelemetry-cancelled-contexts/</guid><description>I use opentelemetry extensively to trace my applications, and one thing I keep running into is when writing a long running process, I want to handle OS signals and still send the telemetry on shutdown.
Typically, my application startup looks something like this:
func main() { ctx, cancel := context.WithCancel(context.Background()) handleSignals(cancel) tracerProvider := configureTelemetry(ctx) defer tracerProvider.Shutdown(ctx) tr = traceProvider.Tracer(&amp;#34;cli&amp;#34;) if err := runMain(ctx, os.Args[:]); err != nil { fmt.Fprintf(os.Stderr, err.Error()) tracerProvider.</description><content:encoded><![CDATA[<p>I use opentelemetry extensively to trace my applications, and one thing I keep running into is when writing a long running process, I want to handle OS signals and still send the telemetry on shutdown.</p>
<p>Typically, my application startup looks something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">cancel</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithCancel</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>())
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">handleSignals</span>(<span style="color:#a6e22e">cancel</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tracerProvider</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">configureTelemetry</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">tracerProvider</span>.<span style="color:#a6e22e">Shutdown</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tr</span> = <span style="color:#a6e22e">traceProvider</span>.<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;cli&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">runMain</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[:]); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprintf</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">tracerProvider</span>.<span style="color:#a6e22e">Shutdown</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">runMain</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">args</span> []<span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;main&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// some kind of loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">message</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">someProcess</span>(<span style="color:#a6e22e">ctx</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">select</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Done</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Err</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">doMessageThings</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">message</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>handleSignals</code> method listens to things like <code>sigint</code>, and calls the <code>cancel()</code> function, and the app stops processing messages and exits gracefully.</p>
<p>When the application exited due to errors, I would see the whole trace from the application, but if the application stopped due to <code>sigint</code> or similar, the <code>main</code> span would never come through.</p>
<p>After a bit of reading, I realised the bug is here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span>ctx, cancel := context.WithCancel(context.Background())
</span></span><span style="display:flex;"><span>handleSignals(cancel)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tracerProvider := configureTelemetry(ctx)
</span></span><span style="display:flex;"><span><span style="color:#f92672">- defer tracerProvider.Shutdown(ctx)
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+ defer tracerProvider.Shutdown(context.Background())
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span>
</span></span><span style="display:flex;"><span>  tr = traceProvider.Tracer(&#34;cli&#34;)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  if err := runMain(ctx, os.Args[:]); err != nil {
</span></span><span style="display:flex;"><span>    fmt.Fprintf(os.Stderr, err.Error())
</span></span><span style="display:flex;"><span><span style="color:#f92672">-    tracerProvider.Shutdown(ctx)
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+    tracerProvider.Shutdown(context.Background())
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span>    os.Exit(1)
</span></span></code></pre></div><p>The problem is that when the context has been cancelled, the tracerProvider skips doing any work, so never sends through the last spans!</p>
<p>This issue would have been more noticable if:</p>
<ul>
<li>I checked the <code>err</code> value from <code>Shutdown()</code>, which is easily missed in a <code>defer</code> call</li>
<li>Setting <code>OTEL_LOG_LEVEL</code> to <code>debug</code> printed something useful!</li>
</ul>
<p>Hopefully by writing this down I will remember or at least find the answer next time I manage to do this again!</p>
]]></content:encoded></item><item><title>Print debugging: a tool among other tools</title><link>https://andydote.co.uk/2024/11/24/print-debugging-tracing/</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2024/11/24/print-debugging-tracing/</guid><description>This is my thoughts after reading Don&amp;rsquo;t Look Down on Print Debugging.
TLDR Print debugging is a tool, and it has its uses - however, if there are better tools available, maybe use those instead. For me, a better tool is OpenTelemetry tracing; it gives me high granularity, parent-child relationships between operations, timings, and is filterable and searchable. I can also use it to debug remote issues, as long as the user can send me a file.</description><content:encoded><![CDATA[<p>This is my thoughts after reading <a href="https://blog.startifact.com/posts/print-debugging/">Don&rsquo;t Look Down on Print Debugging</a>.</p>
<h2 id="tldr">TLDR</h2>
<p>Print debugging is a tool, and it has its uses - however, if there are better tools available, maybe use those instead.  For me, a better tool is OpenTelemetry <a href="https://opentelemetry.io/docs/concepts/signals/traces/">tracing</a>; it gives me high granularity, parent-child relationships between operations, timings, and is filterable and searchable.  I can also use it to debug <a href="#tracing-for-remote-debugging">remote issues</a>, as long as the user can send me a file.</p>
<h2 id="print-debugging">Print Debugging</h2>
<p>The good thing about print debugging is that it is always available; it is very rare a process doesn&rsquo;t have a stdout (or stderr) available, or some kind of logging system.  The downside with print debugging is that it is very basic; anything more you want to do with it, such as timing data, has to be implemented.</p>
<p>One of the comments I read was, in essence:</p>
<blockquote>
<p>one place print debugging is best is dealing with threading/timing bugs, it lets you see what is happening when</p>
</blockquote>
<p>I can understand this, but often print statements are buffered before hitting the terminal, so you might lose some order; you can solve that with a timestamp (assuming it&rsquo;s accurate enough), but as I mentioned earlier, you need to do that yourself.</p>
<h2 id="use-a-debugger">Use a Debugger?</h2>
<p>The first debugger I used was in Visual Studio, and it was amazing.  I learned how to use a lot of features in it, such as automatic break-on-exception, conditional breakpoints, automatic counters (&ldquo;break after hitting this line x times&rdquo;), watches, and computed values.  This was at the beginning of my career, and neither I, nor the codebase, knew anything of automated testing.</p>
<p>Once I learned about automated testing, and then started writing tests, the amount of time I used the debugger reduced.  It was still a great tool, but tests were sometimes the quicker way to verify some behaviour.  Often times, once I had investigated a problem with the debugger, I would write a test to cover that situation - now the repeated debugger usage to know if the fix worked wasn&rsquo;t needed.</p>
<p>I don&rsquo;t often use a debugger these days.  It still has it&rsquo;s place in my toolkit, but in general, I lean more on OpenTelemetry and tracing in general.</p>
<h2 id="tracing">Tracing</h2>
<p>My current go-to tool for debugging and application development is OpenTelemetry tracing.  I&rsquo;ve written about why I <a href="/2023/09/19/tracing-is-better/">prefer tracing to Structured Logging</a> before, but this is a bit different.</p>
<p>By default, tracing lets me see the relationships between function calls, the timing durations of each span (a span is a unit of execution; it could be a function call or a call into a library), and many structured attributes (both automatic and manually added.)</p>
<p>The downside is that you need some way to view that tracing data; using the stdout trace exporter is generally not useful - its far too noisy.  For local development I use <a href="https://hub.docker.com/r/grafana/otel-lgtm">Grafana Tempo all-in-one</a>, or <a href="https://github.com/ymtdzzz/otel-tui">Otel-TUI</a>.  For deployed environments, I still think <a href="https://honeycomb.io">honeycomb</a> is the best placec for traces.</p>
<p>Most projects I interact with have a docker-compose file for all their local dependencies; adding a tracing viewer to that compose file is pretty trival, so the barrier to entry is really not that high:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">grafana</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">grafana/otel-lgtm</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;3000:3000&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#e6db74">&#34;4317:4317&#34;</span>
</span></span></code></pre></div><h2 id="tracing-for-remote-debugging">Tracing for Remote Debugging</h2>
<p>I maintain some internal CLI applications, which make extensive use of tracing.  When a user has a problem, they can add a <code>--store-traces</code> flag to the CLI, and it will write all the tracing data for their run to a file on disk.  They can then send me that file, I can load it into a trace viewer, and use all the high-cardinality attributes and timing data to figure out where their problem is exactly.</p>
<h2 id="do-you-ever-use-print-debugging">Do you ever use print debugging?</h2>
<p>Not often, but it does happen sometimes.  As I said at the outset; its just a tool, and I can and do use it.  I just happen to prefer a different tool.</p>
]]></content:encoded></item><item><title>Tracing: structured logging, but better in every way</title><link>https://andydote.co.uk/2023/09/19/tracing-is-better/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2023/09/19/tracing-is-better/</guid><description>It is no secret that I am not a fan of logs; I&amp;rsquo;ve baited (rapala in work lingo. Rapala is a Finnish brand of fishing lure, and used to mean baiting in this context) discussion in our work chat with things like:
If you&amp;rsquo;re writing log statements, you&amp;rsquo;re doing it wrong.
This is a pretty incendiary statement, and while there has been some good discussion after, I figured it was time to write down why I think logs are bad, why tracing should be used instead, and how we get from one to the other.</description><content:encoded><![CDATA[<p>It is no secret that I am not a fan of logs; I&rsquo;ve baited (<code>rapala</code> in work lingo.  Rapala is a Finnish brand of fishing lure, and used to mean baiting in this context) discussion in our work chat with things like:</p>
<blockquote>
<p>If you&rsquo;re writing log statements, you&rsquo;re doing it wrong.</p>
</blockquote>
<p>This is a pretty incendiary statement, and while there has been some good discussion after, I figured it was time to write down why I think logs are bad, why tracing should be used instead, and how we get from one to the other.</p>
<p>Hopefully, with less clickbait.  Step 3 will shock you, though.</p>
<h2 id="logs-vs-traces">Logs vs Traces</h2>
<p>First, lets breakdown what I see as the key differences between logging and tracing code.  If you want the practical example and want to skip this wall of text, <a href="#evolving-logs">click here</a>.  There is also a short <a href="#questions--answers">Question and Answer</a> at the end.</p>
<h3 id="log-levels">Log Levels</h3>
<p>Log Levels are meaningless.  Is a log line <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code>, <code>fatal</code>, or some other shade in between?</p>
<p>The only time I have seen this well managed was when we had 3 descriptions:</p>
<ul>
<li>Info (everything)</li>
<li>Create A Task for Later (e.g. this can wait for working hours)</li>
<li>Wake Someone Up (this is on fire).</li>
</ul>
<p>However, this has issues; a timeout once is &ldquo;for later&rdquo; or just <code>info</code>, but many timeouts might be &ldquo;wake up&rdquo;, how do you encode that logic somewhere?</p>
<p>There is no equivalent of this in a trace, so there&rsquo;s one less thing to worry about.</p>
<h3 id="messages">Messages</h3>
<p>Something like <code>found ${count} users in the cache</code> looks like a good log message.  It is clear and has the information you care about.  However, when you come to querying your log aggregation system, you need to do a free-text search on a substring of the message or use a wildcard search.  Both of these operations are slow, and worse still cannot help you with the negative version of the question &ldquo;find me operations where the cache wasn&rsquo;t checked&rdquo;.</p>
<p>Assuming structured logs are being used, we can at least add the <code>count</code> as a property to the log message so it can now be filtered on by the log aggregator.  At which point, why do you need the log message at all?  Why not just have <code>log({ users_in_cache: count })</code>?</p>
<p>The logging libraries also put more importance on the message than the properties by having it be the first (and only required) argument to the logging function.  From a querying and analysis perspective, this is wrong:  messages force you into free text searching and reduce the likelihood of fast queries on attributes.</p>
<p>Given this logline:</p>
<pre tabindex="0"><code>logger.info(&#34;found the user in the cache&#34;, userId);
</code></pre><p>You could reconstruct this as a statement that can be filtered on:</p>
<pre tabindex="0"><code>span.addAttributes({
  user_in_cache: true,
  user_id: userId,
})
</code></pre><h3 id="mixed-outputs--semantics">Mixed Outputs / Semantics</h3>
<p>Nowadays, people configure their HTTP server to write logs to <code>stdout</code> rather than to a log file.  This makes a great deal of sense, as now a separate piece of software can tail the logs and send them off to the aggregator.  Your application&rsquo;s output, however, will likely end up with mixed plaintext and structured logs, mostly down to libraries and frameworks doing their own thing with logging, which is probably not the same as what you are doing (or other libraries are doing.)</p>
<p>The second problem with writing logs to <code>stdout</code> is that it mixes the semantics of log lines with console output.  While both log messages and console output are (probably) just text, they do have different purposes.  A piece of feedback might be &ldquo;Server listening on port 3000.  Click here to open the browser&rdquo;.  This is useful to a local user running the app but isn&rsquo;t valuable in your logs.  Not to mention, its plaintext output on the console, rather than structured, so now your log tailer needs to figure out what to do with it.</p>
<p>With OpenTelemetry, you instead configure an <code>exporter</code> to handle all your traces (and logs and metrics, if you desire.)  This is typically sent as OTLP format either directly to a vendor or to an OTEL Collector instance, which can add/remove/modify data and send it to one or multiple places.</p>
<p>Now you are free to write whatever feedback you want to <code>stdout</code>.</p>
<h3 id="relationships">Relationships</h3>
<p>Loglines don&rsquo;t have a causal relationships.  At best, structured logs might have some kind of request identifier (such as <code>requestID</code> or <code>correlationID</code>) for all lines written during a request.  This allows you to find all the log lines for a given ID, but the log lines themselves don&rsquo;t have a fixed order.  Ordering in structured logging relies on the timestamp field, but this is limited to the accuracy and resolution of the time source.  It means that it is possible to get lines appearing at the same time when they happened at different times.</p>
<p>Traces come with automatic parent-child relationships, allowing us to see not only all spans in a single request, but what caused each span, and (as we&rsquo;ll get to in the next point) when they happened.</p>
<p>Tracing also takes these relationships another step further but having a standard set of formats to pass trace and span IDs along to other services, embedded in HTTP headers, message queue metadata, or other locations.  Assuming all your other services send their traces to the same system, you can start to visualise who calls your service and what the effects are of you calling other services.</p>
<p>Imagine opening a trace from your service and discovering another team in a downstream service has started tracing their stuff, and you suddenly can see even more information about the request.  You didn&rsquo;t even do anything!  You notice that the way your service is structured causes a lot of load on the downstream, and start a conversation to see if there is a way to make it faster/better.</p>
<h3 id="timings">Timings</h3>
<p>The only timing data you get on log lines automatically is the <code>timestamp</code> of when the log line was written.  When you want to see how long an operation took, you must start a timer, and then stop the timer, and log the elapsed duration yourself.  As this is a manual process, it is often not done, and when it is done, it tends to have inconsistencies across the application, namely timing source (and thus resolution), property name, and format.  Is it <code>elapsed</code>, <code>elapsed_ms</code>, <code>duration</code>, or <code>length</code>?  does it contain a number of seconds, milliseconds, nanoseconds, or a timestamp format?</p>
<p>By comparison, traces come with <code>startTime</code>, <code>finishTime</code>, and <code>duration</code> attributes, which are not only guaranteed to be there but are set from the same timing source and are always written in the same format.</p>
<p>Combine this with the <a href="#relationships">relationship</a> attributes, and you can now render timing graphs, allowing for easy visualisation of how long each part of a process takes, what can be parallelised, and what parts depend on other parts.</p>
<p>For example, this is a graph showing <a href="/2023/07/06/observability-driven-ci/">how long a CI job took to run</a>, showing all the different steps, their durations, and child steps:</p>
<p><img loading="lazy" src="trace-build.png" alt="a graph of a single build showing each task as a horizontal box denoting start and durations"  />
</p>
<h3 id="querying">Querying</h3>
<p>Querying can have wildly different performance characteristics depending on which log aggregation service you are using.  What unifies all these systems is their slowness, which is mostly down to vast amounts of data which needs indexing so that it can be free text searched.  Filtering logs by their structured properties is however pretty quick (usually.)</p>
<p>Where querying falls down is trying to find trends in data, and trying to find answers to negative queries.  For example, how would you search for &ldquo;all requests to x endpoint, where users were not found in the cache&rdquo;?  This requires you to group the logs by request ID, then find an entry with a particular url path, then see if it is missing a log line.  The same query in a tracing system would be <code>where path = &quot;/some/api&quot; &amp;&amp; !user_in_cache</code>, as the tracing system is already aware of all the spans in a trace, and does the grouping automagically.</p>
<p>Finally, visualising missing data is hard.  Take this small example; it is 4 parallel requests to a system, and one of them is missing a log line.  Which line is missing?</p>
<table>
<thead>
<tr>
<th>Timestamp</th>
<th>UserID</th>
<th>Message</th>
</tr>
</thead>
<tbody>
<tr>
<td>12:51:27</td>
<td>3fcce385be9e</td>
<td>fetched 3rd party preferences</td>
</tr>
<tr>
<td>12:51:27</td>
<td>3fcce385be9e</td>
<td>found user in cache</td>
</tr>
<tr>
<td>12:51:27</td>
<td>915d273db25c</td>
<td>fetched 3rd party preferences</td>
</tr>
<tr>
<td>12:51:27</td>
<td>3fcce385be9e</td>
<td>saved successfully</td>
</tr>
<tr>
<td>12:51:27</td>
<td>8507d369d11c</td>
<td>fetched 3rd party preferences</td>
</tr>
<tr>
<td>12:51:27</td>
<td>c4e71b4a29f2</td>
<td>fetched 3rd party preferences</td>
</tr>
<tr>
<td>12:51:27</td>
<td>915d273db25c</td>
<td>saved successfully</td>
</tr>
<tr>
<td>12:51:27</td>
<td>c4e71b4a29f2</td>
<td>found user in cache</td>
</tr>
<tr>
<td>12:51:27</td>
<td>c4e71b4a29f2</td>
<td>saved successfully</td>
</tr>
<tr>
<td>12:51:27</td>
<td>8507d369d11c</td>
<td>found user in cache</td>
</tr>
<tr>
<td>12:51:27</td>
<td>8507d369d11c</td>
<td>saved successfully</td>
</tr>
</tbody>
</table>
<p>Is it easier to see the one that is different now?</p>
<table>
<thead>
<tr>
<th>Timestamp</th>
<th>UserID</th>
<th>Fetched</th>
<th>In Cache</th>
<th>Saved</th>
</tr>
</thead>
<tbody>
<tr>
<td>12:51:27</td>
<td>3fcce385be9e</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>12:51:27</td>
<td>915d273db25c</td>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>12:51:27</td>
<td>8507d369d11c</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>12:51:27</td>
<td>c4e71b4a29f2</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
</tbody>
</table>
<p>Not only is it easy to see at a glance that <code>915d273db25c</code> didn&rsquo;t find the user in the cache, but also how much less space this takes up (both visually and in terms of storage.)</p>
<p>We can also then use this to query further: show me all traces where <code>in_cache != true</code>, and see what&rsquo;s different about them.</p>
<h2 id="evolving-logs">Evolving logs</h2>
<p>So, with all that being said, let&rsquo;s look at a practical example of how to go about tracing an existing system and what that looks like.</p>
<p>Ripping all the log statements in an application in one go is not a feasible strategy, especially on a large codebase.  However, we can use logs as a decent starting place and evolve our system to something better.  Namely, to OpenTelemetry Tracing.</p>
<p>We&rsquo;ll start off with a real pair of functions from one of the codebases I work on.  Lots of information changed to protect the <del>guilty</del> innocent.  This is run as part of an api call to publish a container, but this part has no web specific code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">PrepareContainer</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">container</span> <span style="color:#a6e22e">ContainerContext</span>, <span style="color:#a6e22e">locales</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">dryRun</span> <span style="color:#66d9ef">bool</span>, <span style="color:#a6e22e">allLocalesRequired</span> <span style="color:#66d9ef">bool</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">StatusResult</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Filling home page template`</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">homePage</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">RenderPage</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">home</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">locales</span>, <span style="color:#a6e22e">allLocalesRequired</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">templateIds</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">string</span>{<span style="color:#a6e22e">homePage</span>.<span style="color:#a6e22e">ID</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">container</span>.<span style="color:#a6e22e">PageSlugs</span>.<span style="color:#a6e22e">FAQ</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">faqPage</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">RenderPage</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">faq</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">locales</span>, <span style="color:#a6e22e">allLocalesRequired</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">templateIds</span> = append(<span style="color:#a6e22e">templateIds</span>, <span style="color:#a6e22e">faqPage</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">dryRun</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">StatusResult</span>{<span style="color:#a6e22e">Status</span>: <span style="color:#a6e22e">StatusDryRun</span>}, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">`Marking page template(s) for usage`</span>, <span style="color:#e6db74">&#34;template_ids&#34;</span>, <span style="color:#a6e22e">templateIds</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">MarkReadyForUsage</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">templateIds</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">StatusResult</span>{<span style="color:#a6e22e">Status</span>: <span style="color:#a6e22e">StatusComplete</span>}, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">RenderPage</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">source</span> <span style="color:#a6e22e">Source</span>, <span style="color:#a6e22e">container</span> <span style="color:#a6e22e">ContainerContext</span>, <span style="color:#a6e22e">locales</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">allLocalesRequired</span> <span style="color:#66d9ef">bool</span>) (<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">`Filling %s page template`</span>, <span style="color:#a6e22e">source</span>.<span style="color:#a6e22e">Name</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">template</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">FetchAndFillTemplate</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">source</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">locales</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">page</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ConfigureFromTemplate</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">template</span>, <span style="color:#a6e22e">locales</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">page</span>.<span style="color:#a6e22e">Locales</span>) <span style="color:#f92672">!=</span> len(<span style="color:#a6e22e">locales</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">message</span> = <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">`Failed to render %s page template for some locales`</span>, <span style="color:#a6e22e">source</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">allLocalesRequired</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#a6e22e">message</span>)
</span></span><span style="display:flex;"><span>		} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Warn</span>(<span style="color:#a6e22e">message</span>, <span style="color:#e6db74">&#34;locales&#34;</span>, <span style="color:#a6e22e">locales</span>, <span style="color:#e6db74">&#34;pages&#34;</span>, <span style="color:#a6e22e">page</span>.<span style="color:#a6e22e">Locales</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">page</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>
<h3 id="step-1-add-a-tracer">Step 1: Add a Tracer</h3>
<p>The first step is to import a tracer and start a span for each method.  As is somewhat common in Go, the methods already have a <code>ctx</code> parameter, so we just need to wrap it with the <code>tr.Start</code> call.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tr</span> = <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;container_api&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">PrepareContainer</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">container</span> <span style="color:#a6e22e">ContainerContext</span>, <span style="color:#a6e22e">locales</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">dryRun</span> <span style="color:#66d9ef">bool</span>, <span style="color:#a6e22e">allLocalesRequired</span> <span style="color:#66d9ef">bool</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">StatusResult</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;prepare_container&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()</span></span></code></pre></div>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">RenderPage</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">source</span> <span style="color:#a6e22e">Source</span>, <span style="color:#a6e22e">container</span> <span style="color:#a6e22e">ContainerContext</span>, <span style="color:#a6e22e">locales</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">allLocalesRequired</span> <span style="color:#66d9ef">bool</span>) (<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;render_page&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()</span></span></code></pre></div>
<p>Just this step alone already gives us value over logging:  As mentioned above, the spans automatically come with <a href="#timings">timing data</a> and <a href="#relationships">parent-child relationships</a>.</p>
<p><img loading="lazy" src="trace-add-spans.png" alt="small trace burndown graph, showing the methods from the previous code example"  />
</p>
<h3 id="step-2-wrap-the-errors">Step 2: Wrap the Errors</h3>
<p>OTEL Spans support a <code>status</code> attribute, along with a status message which is used when there is a non-success status.  By creating a small wrapper function like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">s</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">Span</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">RecordError</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">SetStatus</span>(<span style="color:#a6e22e">codes</span>.<span style="color:#a6e22e">Error</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can wrap all error returns so that we capture the error itself (<code>SetStatus</code>) and there is an error event recorded on the trace too (<code>RecordError</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span>if err := MarkReadyForUsage(ctx, container, templateIds); err != nil {
</span></span><span style="display:flex;"><span><span style="color:#f92672">- return nil, err
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+ return nil, tracing.Error(span, err)
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span>}
</span></span></code></pre></div><h3 id="step-3-add-attributes-and-replace-messages">Step 3: Add Attributes and Replace Messages</h3>
<p>The next steps is to replace any <code>logger</code> messages with attributes by turning them into statements that can be filtered on.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span><span style="color:#f92672">- logger.Info(fmt.Sprintf(`Filling %s page template`, source.Name))
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+ tracing.String(span, &#34;source_name&#34;, source.Name)
</span></span></span></code></pre></div><p>We also want to add attributes for any parameters we might want to filter on later.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;prepare_container&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">StringSlice</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;locales&#34;</span>, <span style="color:#a6e22e">locales</span>)
</span></span><span style="display:flex; background-color:#3c3d38"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Bool</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;dry_run&#34;</span>, <span style="color:#a6e22e">dryRun</span>)
</span></span><span style="display:flex; background-color:#3c3d38"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Bool</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;locales_mandatory&#34;</span>, <span style="color:#a6e22e">allLocalesRequired</span>)
</span></span></code></pre></div>
<p>Finally , we can simplify a code block: there is no point in the <code>logger.Warning</code> call here, as we can have all the required information as filterable properties:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span><span style="color:#a6e22e">+ allLocalesRendered := len(page.Locales) == len(locales)
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">+ tracing.Bool(span, &#34;all_locales_rendered&#34;, allLocalesRendered)
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">+ tracing.StringSlice(span, &#34;locales_rendered&#34;, page.Locales)
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">- if len(page.Locales) != len(locales) {
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+ if !allLocalesRendered &amp;&amp; allLocalesRequired {
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">+   return nil, tracing.Errorf(`Failed to render %s page template for some locales`, source.Name)
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span><span style="color:#f92672">- const message = fmt.Sprintf(`Failed to render %s page template for some locales`, source.Name)
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">- if allLocalesRequired {
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-   return nil, tracing.Errorf(message)
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">- } else {
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">-   logger.Warn(message, &#34;locales&#34;, locales, &#34;pages&#34;, page.Locales)
</span></span></span><span style="display:flex;"><span><span style="color:#f92672">- }
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span>}
</span></span></code></pre></div><h3 id="the-result">The Result</h3>
<p>The diff between the two functions shows that the tracing version is longer - by 9 lines.  However, the traced version contains so much more information than the logged version.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tr</span> = <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;container_api&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">PrepareContainer</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">container</span> <span style="color:#a6e22e">ContainerContext</span>, <span style="color:#a6e22e">locales</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">dryRun</span> <span style="color:#66d9ef">bool</span>, <span style="color:#a6e22e">allLocalesRequired</span> <span style="color:#66d9ef">bool</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">StatusResult</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;prepare_container&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">StringSlice</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;locales&#34;</span>, <span style="color:#a6e22e">locales</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Bool</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;dry_run&#34;</span>, <span style="color:#a6e22e">dryRun</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Bool</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;locales_mandatory&#34;</span>, <span style="color:#a6e22e">allLocalesRequired</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">homePage</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">RenderPage</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">home</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">locales</span>, <span style="color:#a6e22e">allLocalesRequired</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">span</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">templateIds</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">string</span>{<span style="color:#a6e22e">homePage</span>.<span style="color:#a6e22e">ID</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">hasFaq</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">container</span>.<span style="color:#a6e22e">PageSlugs</span>.<span style="color:#a6e22e">FAQ</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Bool</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;has_faq&#34;</span>, <span style="color:#a6e22e">hasFaq</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">hasFaq</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">faqPage</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">RenderPage</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">faq</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">locales</span>, <span style="color:#a6e22e">allLocalesRequired</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">span</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">templateIds</span> = append(<span style="color:#a6e22e">templateIds</span>, <span style="color:#a6e22e">faqPage</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">StringSlice</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;template_ids&#34;</span>, <span style="color:#a6e22e">templateIds</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">dryRun</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">StatusResult</span>{<span style="color:#a6e22e">Status</span>: <span style="color:#a6e22e">StatusDryRun</span>}, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">MarkReadyForUsage</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">templateIds</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">span</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">StatusResult</span>{<span style="color:#a6e22e">Status</span>: <span style="color:#a6e22e">StatusComplete</span>}, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">RenderPage</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">source</span> <span style="color:#a6e22e">Source</span>, <span style="color:#a6e22e">container</span> <span style="color:#a6e22e">ContainerContext</span>, <span style="color:#a6e22e">locales</span> []<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">allLocalesRequired</span> <span style="color:#66d9ef">bool</span>) (<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;render_page&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">String</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;source_name&#34;</span>, <span style="color:#a6e22e">source</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">template</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">FetchAndFillTemplate</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">source</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">locales</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">span</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">page</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ConfigureFromTemplate</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">container</span>, <span style="color:#a6e22e">template</span>, <span style="color:#a6e22e">locales</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">span</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">allLocalesRendered</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">page</span>.<span style="color:#a6e22e">Locales</span>) <span style="color:#f92672">==</span> len(<span style="color:#a6e22e">locales</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Bool</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;all_locales_rendered&#34;</span>, <span style="color:#a6e22e">allLocalesRendered</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">StringSlice</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;locales_rendered&#34;</span>, <span style="color:#a6e22e">page</span>.<span style="color:#a6e22e">Locales</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">allLocalesRendered</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">required</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">`Failed to render %s page template for some locales`</span>, <span style="color:#a6e22e">source</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">page</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>
<p>If you wish to view the files as individual steps: <a href="example-api-0.go">initial</a>, <a href="example-api-1.go">step 1</a>, <a href="example-api-2.go">step 2</a>, <a href="example-api-3.go">step 3</a>, <a href="example-api-4.go">final</a></p>
<h2 id="questions--answers">Questions &amp; Answers</h2>
<p>Some questions I have seen come up when talking about doing this.</p>
<h3 id="how-do-i-use-this">How do I use this?</h3>
<p>If you&rsquo;re debugging some error, taking the span name from your UI, and searching the codebase is a good start.  Use the attributes named in code to search your UI for things that match/don&rsquo;t match.</p>
<p>Also, try <a href="/presentations/index.html?odd">Observability Driven Development</a>.  It involves using your trace data before, during, and after a change so you know if its actually behaving as you expect.</p>
<h3 id="what-do-you-recommend-to-view-traces">What do you recommend to view traces?</h3>
<p><a href="https://honeycomb.io">Honeycomb</a> is the best, no question.  <a href="https://lightstep.com">Lightstep</a> is a close second.</p>
<h3 id="i-think-this-is-ugly">I think this is ugly!</h3>
<p>That is not a question.  It is also a matter of opinion - I happen to think traced code looks better than logged code.  It also could be that it takes some getting used to when you first start seeing it!  Remember how unit testing felt weird to start with?</p>
<h3 id="i-need-a-log-message">I need a log message&hellip;</h3>
<p>I try to turn log messages into statements.  Like in the example above:</p>
<ul>
<li><code>found user in cache</code> =&gt; <code>user_in_cache: true</code></li>
<li><code>loading template ${name}</code> =&gt; <code>template_loading: true, template_name: name</code></li>
</ul>
<p>When I need to mark that code execution has gotten to a particular point in a method:</p>
<ul>
<li>add an attribute, like <code>initial_processing_complete: true</code></li>
<li>contemplate if the method should be split, and thus have its own span</li>
</ul>
<h3 id="i-have-a-loop-i-am-overwriting-attributes-on-each-iteration">I have a loop, I am overwriting attributes on each iteration</h3>
<p>Similar to above: either move the loop body into its own method, use a closure to create a new span in the loop, or don&rsquo;t have a span per iteration.</p>
<p>You can always add summary information after a loop:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">foos</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bars</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">thing</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">things</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">thing</span>.<span style="color:#a6e22e">prop</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;foo&#34;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">foos</span><span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bars</span><span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">SetAttribute</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;foos&#34;</span>, <span style="color:#a6e22e">foos</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tracing</span>.<span style="color:#a6e22e">SetAttribute</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;bars&#34;</span>, <span style="color:#a6e22e">bars</span>)
</span></span></code></pre></div><h2 id="thanks">Thanks</h2>
<p>Thanks to <a href="https://fi.linkedin.com/in/aki-foudila-339222200">Aki</a> for some of the questions and some discussions which expanded a few of the sections here.</p>
<p>Thanks to <a href="https://www.tuomistolari.net/">Lari</a> for prompting this blog post initially!</p>
<p>Thanks to you, for making it to the end.</p>
]]></content:encoded></item><item><title>Adding Observability to Vault</title><link>https://andydote.co.uk/2021/05/27/vault-observe/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/05/27/vault-observe/</guid><description>One of the things I like to do when setting up a Vault cluster is to visualise all the operations Vault is performing, which helps see usage patterns changing, whether there are lots of failed requests coming in, and what endpoints are receiving the most traffic.
While Vault has a lot of data available in Prometheus telemetry, the kind of information I am after is best taken from the Audit backend.</description><content:encoded><![CDATA[<p>One of the things I like to do when setting up a Vault cluster is to visualise all the operations Vault is performing, which helps see usage patterns changing, whether there are lots of failed requests coming in, and what endpoints are receiving the most traffic.</p>
<p>While Vault has a lot of data available in Prometheus telemetry, the kind of information I am after is best taken from the Audit backend.  Setting up an audit backend for Vault is reasonably easy - it supports three methods of communication: file, socket and syslog.  For this application, I use a Unix socket and a small daemon running on the same machine as the Vault instance to send the data to a tracing system.</p>
<h2 id="the-goal">The Goal</h2>
<p>Write a small application that receives audit events and writes traces (spans) to an observability tool.   In this case, I am implementing both Honeycomb and Zipkin via OpenTelemetry.</p>
<p>The <a href="https://github.com/Pondidum/vault-observe">code is available on Github</a>, and the most interesting parts are covered in the rest of this blog post.</p>
<h2 id="receiving-and-processing-messages">Receiving and Processing Messages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ln</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">Listen</span>(<span style="color:#e6db74">&#34;unix&#34;</span>, <span style="color:#e6db74">&#34;/tmp/observe.sock&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ln</span>.<span style="color:#a6e22e">Accept</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">conn</span>).<span style="color:#a6e22e">ReadBytes</span>(<span style="color:#e6db74">&#39;\n&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// do something with the message
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>We only need to do minimal processing of the data for this application before sending it on to Honeycomb or Zipkin.  As the messages contain nested objects, we need to flatten the object hierarchy for easier viewing in spans.  So instead of this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;operation&#34;</span>: <span style="color:#e6db74">&#34;update&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;namespace&#34;</span>: { <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;root&#34;</span> },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;path&#34;</span>: <span style="color:#e6db74">&#34;sys/audit/socket&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;data&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;local&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We want to send this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.operation&#34;</span>: <span style="color:#e6db74">&#34;update&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.namespace.id&#34;</span>: <span style="color:#e6db74">&#34;root&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.path&#34;</span>: <span style="color:#e6db74">&#34;sys/audit/socket&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.data.local&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also want to get a few strongly typed pieces of data out of the message, too, such as the <code>type</code> (<code>request</code> or <code>response</code>) and the request&rsquo;s <code>id</code>, which is in both messages and can be used to group the spans.</p>
<p>To save us from deserialising the json twice, we can do the following:</p>
<ol>
<li>deserialize into a <code>map[string]interface{}</code></li>
<li>create a flattened version of the event using the <a href="https://pkg.go.dev/github.com/jeremywohl/flatten">flatten</a> library</li>
<li>turn the map into a typed struct using the <a href="https://pkg.go.dev/github.com/mitchellh/mapstructure">mapstructure</a> library</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// 1 deserialize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">event</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{}{}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">message</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">event</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 2 flatten
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">flat</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">flatten</span>.<span style="color:#a6e22e">Flatten</span>(<span style="color:#a6e22e">event</span>, <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#a6e22e">flatten</span>.<span style="color:#a6e22e">DotStyle</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 3 type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">typed</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Event</span>{}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mapstructure</span>.<span style="color:#a6e22e">Decode</span>(<span style="color:#a6e22e">event</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">typed</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now that we have our flattened version and our typed version of the message, we can forward it to our span processors.  There are two implementations (3 if you count <code>stdout</code>), so let&rsquo;s look at them one at a time.</p>
<h2 id="honeycomb">Honeycomb</h2>
<p>To send the spans to Honeycomb, I am using their lower-level library <a href="https://pkg.go.dev/github.com/honeycombio/libhoney-go">libhoney-go</a>, rather than the more usual <a href="https://pkg.go.dev/github.com/honeycombio/beeline-go">beeline</a> as I don&rsquo;t need all the <code>context</code> propagation or automatic ID generation.</p>
<p>For the first version of this application, just sending the two events to Honeycomb linked together is enough; however, both spans will show  0ms durations.  We&rsquo;ll fix this problem for both Honeycomb and OpenTelemetry later.</p>
<p>To link our spans together properly, I use the <code>.Request.ID</code> property from the event as the <code>trace.trace_id</code>; it&rsquo;s already a guid and is the same for both the request and response events.  Then, for a <code>request</code> event, I make it the parent span by using the <code>.Request.ID</code> again, but this time as the <code>trace.span_id</code>.  Finally, for the <code>response</code> event, I set the <code>trace.parent_id</code> to the <code>.Request.ID</code>, and generate a random value for the <code>trace.span_id</code> field.</p>
<p>Lastly, I loop through the flattened version of the event, adding each key-value pair to the event&rsquo;s attributes and finally send the event.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">NewEvent</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.trace_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;request&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.span_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.parent_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.span_id&#34;</span>, <span style="color:#a6e22e">generateSpanID</span>())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;service_name&#34;</span>, <span style="color:#e6db74">&#34;vault&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">event</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">val</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Send</span>()
</span></span></code></pre></div><h2 id="zipkin--opentelemetry">Zipkin / OpenTelemetry</h2>
<p>The process for sending via OpenTelemetry is reasonably similar; we start a new span, copy the flattened structure into the span&rsquo;s attributed and call <code>End()</code>, making the TracerProvider send the span to our configured backends (Zipkin in this case.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">id</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithValue</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#e6db74">&#34;request_id&#34;</span>, <span style="color:#a6e22e">id</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">GetTracerProvider</span>().<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;main&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithSpanKind</span>(<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanKindServer</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">value</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">event</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">SetAttributes</span>(<span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">KeyValue</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Key</span>:   <span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">Key</span>(<span style="color:#a6e22e">key</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Value</span>: <span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">StringValue</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%v&#34;</span>, <span style="color:#a6e22e">value</span>)),
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Error</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">SetStatus</span>(<span style="color:#a6e22e">codes</span>.<span style="color:#a6e22e">Error</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Error</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()
</span></span></code></pre></div><p>The hard part was figuring out how to feed the <code>.Request.ID</code> into the Tracer as the TraceID, which was achieved by configuring OpenTelemetry with a custom ID generator that would use the <code>request_id</code> property of the current <code>context</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Generator</span> <span style="color:#66d9ef">struct</span>{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">g</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Generator</span>) <span style="color:#a6e22e">NewIDs</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>) (<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">TraceID</span>, <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanID</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Value</span>(<span style="color:#e6db74">&#34;request_id&#34;</span>).(<span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">UUID</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tid</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">TraceID</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">val</span>.<span style="color:#a6e22e">MarshalText</span>()
</span></span><span style="display:flex;"><span>  copy(<span style="color:#a6e22e">tid</span>[:], <span style="color:#a6e22e">req</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sid</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanID</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Read</span>(<span style="color:#a6e22e">sid</span>[:])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tid</span>, <span style="color:#a6e22e">sid</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I am sure more copying and allocation is happening in this method than necessary, but it is good enough for now.  Configuring it for use by OpenTelemetry is straightforward; it just needs adding to the <code>NewTracerProvider</code> call by wrapping it with <code>trace.WithIDGenerator()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">exporter</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">zipkin</span>.<span style="color:#a6e22e">NewRawExporter</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;http://localhost:9411/api/v2/spans&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">zipkin</span>.<span style="color:#a6e22e">WithSDKOptions</span>(<span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithSampler</span>(<span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">AlwaysSample</span>())),
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">processor</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">NewSimpleSpanProcessor</span>(<span style="color:#a6e22e">exporter</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tp</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">NewTracerProvider</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithSpanProcessor</span>(<span style="color:#a6e22e">processor</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithResource</span>(<span style="color:#a6e22e">resource</span>.<span style="color:#a6e22e">NewWithAttributes</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">semconv</span>.<span style="color:#a6e22e">ServiceNameKey</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;vault-observe&#34;</span>),
</span></span><span style="display:flex;"><span>  )),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithIDGenerator</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Generator</span>{}),
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">SetTracerProvider</span>(<span style="color:#a6e22e">tp</span>)
</span></span></code></pre></div><h2 id="testing">Testing</h2>
<p>To verify that it works, I have a single <code>docker-compose.yml</code> file which sets up a Vault instance in dev mode, and a Zipkin instance.  It mounts the current working directory into the Vault container as <code>/sockets</code> to share the socket file between the host and the container.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3.9&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">vault</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">vault:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cap_add</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">IPC_LOCK</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;./:/sockets:rw&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;8200:8200&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VAULT_DEV_ROOT_TOKEN_ID</span>: <span style="color:#e6db74">&#34;vault&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">zipkin</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">openzipkin/zipkin-slim</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;9411:9411&#34;</span>
</span></span></code></pre></div><p>Running the application along with the docker container is now as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>go build
</span></span><span style="display:flex;"><span>docker-compose up -d
</span></span><span style="display:flex;"><span>./vault-observe --zipkin --socket-path observe.sock
</span></span></code></pre></div><p>In another terminal, you can now enable the new audit backend and send some requests so we can look at them in Zipkin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:8200&#34;</span>
</span></span><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vault&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault audit enable socket address<span style="color:#f92672">=</span>/sockets/observe.sock socket_type<span style="color:#f92672">=</span>unix
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault secrets enable -version<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> kv
</span></span><span style="display:flex;"><span>vault kv put /secrets/test name<span style="color:#f92672">=</span>andy
</span></span><span style="display:flex;"><span>vault kv get /secrets/test
</span></span></code></pre></div><h2 id="running-in-production">Running in Production</h2>
<p>There are a few things you should be aware of, running this in production:</p>
<ul>
<li>This <em>must not</em> be your only audit backend: Vault will fail requests if they are not successfully written to at least one audit backend if any are enabled.</li>
<li>There is the possibility of losing data if the <code>vault-observe</code> process stops</li>
</ul>
<h2 id="improvements">Improvements</h2>
<p>As I am using this for keeping an eye on request durations and patterns in behaviour, capturing the actual time it takes for Vault to handle a request would be pretty valuable.  So instead of processing both events, I will keep just the timestamp from the <code>request</code>, and then when the <code>response</code> event comes in, look up the timestamp and calculate the duration.</p>
<p>As I don&rsquo;t want an ever-expanding list of timestamps in memory, I use an <a href="https://pkg.go.dev/github.com/patrickmn/go-cache">automatically expiring cache</a> so keep them for around 10 seconds, as no request to Vault should be that slow!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">requests</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cache</span>.<span style="color:#a6e22e">New</span>(<span style="color:#ae81ff">10</span><span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>, <span style="color:#ae81ff">1</span><span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Minute</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">processMessage</span>(<span style="color:#a6e22e">requests</span>, <span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">sender</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">EOF</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>processMessage</code> function now handles the <code>request</code> and <code>response</code> messages separately.  The <code>request</code> just inserts the event&rsquo;s <code>time</code> property into the cache, and exists:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;request&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">requests</span>.<span style="color:#a6e22e">Set</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Time</span>, <span style="color:#a6e22e">cache</span>.<span style="color:#a6e22e">DefaultExpiration</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>response</code>  version pulls the time back out of the cache and stores it into the event itself - it&rsquo;s then up to the sender if it wants to use the value or not.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;response&#34;</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">requests</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>); <span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span> = <span style="color:#a6e22e">x</span>.(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">requests</span>.<span style="color:#a6e22e">Delete</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;No request found in the cache for %s&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the Honeycomb sender, we can remove all the parenting logic; we only need to set the <code>Timestamp</code> and <code>duration_ms</code> fields to get the duration showing correctly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">duration</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Time</span>.<span style="color:#a6e22e">Sub</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span>).<span style="color:#a6e22e">Milliseconds</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">NewEvent</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Timestamp</span> = <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;duration_ms&#34;</span>, <span style="color:#a6e22e">duration</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.trace_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.span_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span></code></pre></div><p>For the OpenTelemetry sender, we can add a <code>trace.WithTimestamp()</code> call to both the <code>Start()</code> and <code>End()</code> calls so use our events&rsquo; timestamps:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithValue</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#e6db74">&#34;request_id&#34;</span>, <span style="color:#a6e22e">id</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">GetTracerProvider</span>().<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;main&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithSpanKind</span>(<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanKindServer</span>), <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithTimestamp</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>(<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithTimestamp</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Time</span>))
</span></span></code></pre></div>]]></content:encoded></item><item><title>Getting NodeJS OpenTelemetry data into NewRelic</title><link>https://andydote.co.uk/2021/03/12/nodejs-opentelemetry-newrelic/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/03/12/nodejs-opentelemetry-newrelic/</guid><description>I had the need to get some OpenTelemetry data out of a NodeJS application, and into NewRelic&amp;rsquo;s distributed tracing service, but found that there is no way to do it directly, and in this use case, adding a separate collector is more hassle than it&amp;rsquo;s worth.
Luckily, there is an NodeJS OpenTelemetry library which can report to Zipkin, and NewRelic can also ingest Zipkin format data.
To use it was relatively straight forward:</description><content:encoded><![CDATA[<p>I had the need to get some OpenTelemetry data out of a NodeJS application, and into NewRelic&rsquo;s distributed tracing service, but found that there is no way to do it directly, and in this use case, adding a separate collector is more hassle than it&rsquo;s worth.</p>
<p>Luckily, there is an NodeJS <a href="https://www.npmjs.com/package/@opentelemetry/exporter-zipkin">OpenTelemetry library which can report to Zipkin</a>, and NewRelic can also <a href="https://docs.newrelic.com/docs/understand-dependencies/distributed-tracing/trace-api/report-zipkin-format-traces-trace-api/">ingest Zipkin format data</a>.</p>
<p>To use it was relatively straight forward:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">context</span>, <span style="color:#a6e22e">setSpan</span>, <span style="color:#a6e22e">Span</span>, <span style="color:#a6e22e">trace</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@opentelemetry/api&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">BasicTracerProvider</span>, <span style="color:#a6e22e">BatchSpanProcessor</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@opentelemetry/tracing&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">ZipkinExporter</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@opentelemetry/exporter-zipkin&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">exporter</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ZipkinExporter</span>({
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;https://trace-api.newrelic.com/trace/v1&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">serviceName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;interesting-service&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Api-Key&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">NEWRELIC_APIKEY</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Data-Format&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;zipkin&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Data-Format-Version&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;2&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">provider</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">BasicTracerProvider</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">provider</span>.<span style="color:#a6e22e">addSpanProcessor</span>(<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">BatchSpanProcessor</span>(<span style="color:#a6e22e">exporter</span>));
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">provider</span>.<span style="color:#a6e22e">register</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">tracer</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">getTracer</span>(<span style="color:#e6db74">&#34;default&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">rootSpan</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tracer</span>.<span style="color:#a6e22e">startSpan</span>(<span style="color:#e6db74">&#34;main&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// do something fantastically interesting
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">rootSpan</span>.<span style="color:#a6e22e">end</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">provider</span>.<span style="color:#a6e22e">shutdown</span>();
</span></span></code></pre></div><p>This has the added benefit of being able to test with Zipkin locally, using the <code>openzipkin/zipkin-slim</code> docker container, by just removing the URL property from the <code>ZipkinExporter</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run --rm -d -p 9411:9411 openzipkin/zipkin-slim
</span></span></code></pre></div><h2 id="child-spans">Child Spans</h2>
<p>Figuring out how to create child spans was actually harder in the end, in part because the OpenTelemetry docs don&rsquo;t quite match the actual function signatures.</p>
<p>In the end, I wrote this little helper function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">context</span>, <span style="color:#a6e22e">setSpan</span>, <span style="color:#a6e22e">Span</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@opentelemetry/api&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">startSpan</span>(<span style="color:#a6e22e">parent</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Span</span>, <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">string</span>)<span style="color:#f92672">:</span> <span style="color:#a6e22e">Span</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tracer</span>.<span style="color:#a6e22e">startSpan</span>(<span style="color:#a6e22e">name</span>, <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">setSpan</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">active</span>(), <span style="color:#a6e22e">parent</span>));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Which I can use like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">DoInterestingThings</span>(<span style="color:#a6e22e">span</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Span</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">startSpan</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;do-interesting-things&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// interesting things happen here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">end</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Doing both of these means I can now see what my misbehaving cron jobs are actually doing, rather than trying to guess what their problems are.</p>
]]></content:encoded></item><item><title>Observability with Infrastructure as Code</title><link>https://andydote.co.uk/2021/03/01/observability-with-infrastructure-as-code/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/03/01/observability-with-infrastructure-as-code/</guid><description>This article was originally published on the Pulumi blog.
When using the Pulumi Automation API to create applications which can provision infrastructure, it is very handy to be able to use observability techniques to ensure the application functions correctly and to help see where performance bottlenecks are.
One of the applications I work on creates a VPC and Bastion host and then stores the credentials into a Vault instance. The problem is that the “create infrastructure” part is an opaque blob, in that I can see it takes 129 seconds to create, but I can’t see what it’s doing, or why it takes this amount of time.</description><content:encoded><![CDATA[<blockquote>
<p>This article was originally published on the <a href="https://www.pulumi.com/blog/observability-with-infrastructure-as-code/">Pulumi blog</a>.</p>
</blockquote>
<p>When using the <a href="https://www.pulumi.com/blog/tag/automation-api/">Pulumi Automation API</a> to create applications which can provision infrastructure, it is very handy to be able to use observability techniques to ensure the application functions correctly and to help see where performance bottlenecks are.</p>
<p>One of the applications I work on creates a VPC and Bastion host and then stores the credentials into a Vault instance.  The problem is that the “create infrastructure” part is an opaque blob, in that I can see it takes 129 seconds to create, but I can’t see what it’s doing, or why it takes this amount of time.</p>
<p><img loading="lazy" src="pulumi-observability-before.png" alt="honeycomb traces of one pulumi stack resource"  />
</p>
<p>So can I do better?</p>
<h2 id="the-initial-application">The Initial Application</h2>
<p>In this example I use <a href="https://honeycomb.io/">Honeycomb&rsquo;s</a> <a href="https://github.com/honeycombio/beeline-go/">Go Beeline</a> to capture all the data I care about; durations, errors, any context which is “interesting”:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">Init</span>(<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">Config</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">WriteKey</span>: <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">&#34;HONEYCOMB_API_KEY&#34;</span>),
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Dataset</span>:  <span style="color:#e6db74">&#34;pulumi-demo&#34;</span>,
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">StartSpan</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#e6db74">&#34;basic-vpc&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">Send</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">name</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">auto</span>.<span style="color:#a6e22e">FullyQualifiedStackName</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">&#34;PULUMI_USERNAME&#34;</span>), <span style="color:#e6db74">&#34;basic-vpc&#34;</span>, <span style="color:#e6db74">&#34;dev&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">auto</span>.<span style="color:#a6e22e">UpsertStackInlineSource</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">name</span>, <span style="color:#e6db74">&#34;basic-vpc&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">pc</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumi</span>.<span style="color:#a6e22e">Context</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">azs</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">getAvailabilityZones</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">v</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">vpc</span>.<span style="color:#a6e22e">NewVpc</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">pc</span>, <span style="color:#e6db74">&#34;dev&#34;</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">vpc</span>.<span style="color:#a6e22e">VpcArgs</span>{
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">Description</span>:           <span style="color:#e6db74">&#34;dev&#34;</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">BaseCidr</span>:              <span style="color:#e6db74">&#34;192.168.0.0/16&#34;</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">AvailabilityZoneNames</span>: <span style="color:#a6e22e">azs</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">S3Endpoint</span>:            <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">DynamoEndpoint</span>:        <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>		})
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">SetConfig</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;aws:region&#34;</span>, <span style="color:#a6e22e">auto</span>.<span style="color:#a6e22e">ConfigValue</span>{<span style="color:#a6e22e">Value</span>: <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">&#34;PULUMI_REGION&#34;</span>)}); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ws</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Workspace</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ws</span>.<span style="color:#a6e22e">InstallPlugin</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;aws&#34;</span>, <span style="color:#e6db74">&#34;v3.23.0&#34;</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Refresh</span>(<span style="color:#a6e22e">ctx</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">stream</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">optup</span>.<span style="color:#a6e22e">ProgressStreams</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Up</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">stream</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//vault code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="adding-infrastructure-observability">Adding Infrastructure Observability</h2>
<p>To get a handle on what is happening when <code>stack.Up()</code> runs, I have mplemented a custom <code>io.Writer</code>, which will be passed into the <code>ProgressStream</code> constructor.</p>
<p>The custom progress stream&rsquo;s <code>Write</code> method is called once for each line emitted,  which allows us to start new spans when a resource starts being constructed, and send them when construction completes.  Currently, this is achieved by parsing the console output text, but I gather in the future, it will be possible to get streamed json blobs which can be unmarshaled into go structs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">pulumiBeeline</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>      <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contexts</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">func</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewPulumiBeeline</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumiBeeline</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pulumiBeeline</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ctx</span>:  	<span style="color:#a6e22e">ctx</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">contexts</span>: <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">func</span>(){},
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">cw</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumiBeeline</span>) <span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">p</span> []<span style="color:#66d9ef">byte</span>) (<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// todo: make more robust, support modifications, deletions etc.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">line</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">TrimSpace</span>(string(<span style="color:#a6e22e">p</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">parts</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">line</span>, <span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">parts</span>) &lt; <span style="color:#ae81ff">5</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">p</span>), <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//+  aws-vpc dev creating
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">//+  &lt;type&gt; &lt;name&gt; &lt;action&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">resourceType</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">parts</span>[<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">resourceName</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">parts</span>[<span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">resourceAction</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">parts</span>[<span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">resourceAction</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;creating&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">StartSpan</span>(<span style="color:#a6e22e">cw</span>.<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">resourceName</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">c</span>, <span style="color:#e6db74">&#34;type&#34;</span>, <span style="color:#a6e22e">resourceType</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// add other things here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">cw</span>.<span style="color:#a6e22e">contexts</span>[<span style="color:#a6e22e">resourceName</span>] = <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Send</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">resourceAction</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;created&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">cw</span>.<span style="color:#a6e22e">contexts</span>[<span style="color:#a6e22e">resourceName</span>]()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">p</span>), <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Modifying the <code>optup.ProgressStreams</code> is the only change needed to the original application:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">stream</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">optup</span>.<span style="color:#a6e22e">ProgressStreams</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>, <span style="color:#a6e22e">NewPulumiBeeline</span>(<span style="color:#a6e22e">ctx</span>))
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Up</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">stream</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now when I run this program again, I can see a lot more information in my Honeycomb traces, which not only shows me that Pulumi is <em>highly</em> parallelised, but also gives me a better idea of where the time is taken when creating infrastructure; in this example, it’s the NAT Gateways:</p>
<p><img loading="lazy" src="pulumi-observability-after.png" alt="honeycomb traces of all infrastructure resources in the pulumi stack"  />
</p>
<p>In the future, I want to expand this to cover far more details, such as including the reasons resources were created/modified/destroyed and including as much information as possible about what caused a resource to fail.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>In the end, this turned out to be much easier to achieve than I had hoped.  Being able to use Pulumi progmatically, rather than running <code>os.Exec</code> directly myself was a huge productivity boost.</p>
<p>I am looking forward to all the new kinds of tooling I can build to solve my user&rsquo;s problems continuing to utilise Honeycomb for my observability and Pulumi for my infrastructure.</p>
]]></content:encoded></item><item><title>Observability Without Honeycomb</title><link>https://andydote.co.uk/2020/03/15/observability-without-honeycomb/</link><pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2020/03/15/observability-without-honeycomb/</guid><description>Before I start on this, I want to make it clear that if you can buy Honeycomb, you should. Outlined below is how I started to add observability to an existing codebase which already had the ELK stack available, and was unable to use Honeycomb. My hope, in this case, is that I can demonstrate how much value observability gives, and also show how much more value you would get with an excellent tool, such as Honeycomb.</description><content:encoded><![CDATA[<p>Before I start on this, I want to make it clear that if you can buy <a href="https://honeycomb.io">Honeycomb</a>, you <strong>should</strong>.  Outlined below is how I started to add observability to an existing codebase which already had the <a href="https://www.elastic.co/what-is/elk-stack">ELK stack</a> available, and was unable to use Honeycomb.  My hope, in this case, is that I can demonstrate how much value observability gives, and also show how much <em>more</em> value you would get with an excellent tool, such as Honeycomb.</p>
<p>With that said, what is observability, how is it different to logging (and metrics), and why should you care?</p>
<p>If you already know, or would rather skip to the implementation, jump to <a href="#implementing-with-elastic-search">Implementing with Elastic Search</a>.</p>
<h2 id="what-is-it">What is it?</h2>
<p>The term Observability comes from systems engineering and is how you can determine the behaviour of the entire system from its outputs.  In our case, this means the <strong>events</strong> we emit while processing requests.  If we look at (my) hierarchy of monitoring, you can see that it starts with logging, with the next steps up being to output structured logs, then centralising those logs (no more SSHing into random hosts), and finally onto events:</p>
<blockquote>
<p>logs &lt; structured logs &lt; centralised structured logs &lt; events (observability)</p>
</blockquote>
<h2 id="the-problem-with-logs-and-metrics">The Problem with Logs and Metrics</h2>
<p>With logs, you are writing out many lines as your process runs, which has a few problems, the primary being that you are often looking for data which is absent.</p>
<p>How many times have you been looking through many lines of logs, before realising &ldquo;oh, the line about cache invalidation is missing, which means&hellip;&rdquo;.  It is much harder to notice data which is absent than data which is present, but with an unexpected value.</p>
<p>The second problem is the size of the logs saved.  Logs, especially structured ones, contain a lot of useful information, such as request ids, session ids, paths, versions, host data, and anything else interesting.  The majority of these fields are repeated for every log entry in the system, and that means they need to be stored and queryable at some point.  Often, this is solved by deleting historical data, or sampling at write time, both of which cause data loss, and you are back to trying to notice data which isn&rsquo;t there.</p>
<p>Metrics exhibit the data loss problem <em>by design</em>.  Metrics are deliberately aggregated client-side and then shipped to storage.  The numbers you get from metrics can be useful, but when you look at where they come from, it becomes evident that they are just a projection of logs themselves.  How many codebases have you read where every <code>loggger.Info(&quot;...&quot;, props);</code> line is followed (or preceded) by <code>stats.increment(&quot;some_counter)</code>?</p>
<h2 id="so-what-is-an-event">So What is an Event?</h2>
<p>An Event is a structured piece of data, with as much information about the current request in it as possible.  The difference is that you emit <strong>one</strong> event per request <strong>per service</strong>, if you are doing microservices.  You create an event at the beginning of handling a request and send it somewhere at the end of the request (whether successful or unsuccessful).</p>
<p>For things like background tasks, again, emitting one event per execution, and in well-structured monoliths, one event per request per component.</p>
<p>This doesn&rsquo;t sound like much of a difference, until you start writing your code to add interesting properties to the event, rather than log lines.  We want to store as much high cardinality data as possible (so anything unique, or nearly unique), the more of it, the better, as it lets us slice and dice our events by anything at a later time (e.g. by requestid, userid, endpoint paths, url parameters, http method, etc.)</p>
<p>Looking at the caching example mentioned above, before we had this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handleRequest</span>(<span style="color:#a6e22e">request</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">now</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>] <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>].<span style="color:#a6e22e">IsStale</span>(<span style="color:#a6e22e">now</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#e6db74">&#34;Cache miss for user&#34;</span>, <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">stats</span>.<span style="color:#a6e22e">Increment</span>(<span style="color:#e6db74">&#34;cache_misses&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fillCache</span>(<span style="color:#a6e22e">cache</span>, <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">stats</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#34;request_duration&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">now</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>When the user is in the cache, there is no logline written, which is fine when everything is working.  However, when something unexpected happens, like daylight savings time or sudden clock drift, and suddenly all cache entries are never stale.  You have a decrease in latency (which looks good), your <code>cache_misses</code> counter goes down (looks good), but your data is older than you realised, and bad things are happening down the line.</p>
<p>If you were to write this function with observability in mind, you might write something like this instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handleRequest</span>(<span style="color:#a6e22e">request</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">NewEvent</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Send</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">now</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Timestamp</span> = <span style="color:#a6e22e">now</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{}{
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;request_id&#34;</span>: <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">ID</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;request_path&#34;</span>: <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">Path</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;request_method&#34;</span>: <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">method</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;user_id&#34;</span>: <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;cache_size&#34;</span>: len(<span style="color:#a6e22e">cache</span>),
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">userData</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;cache_hit&#34;</span>, <span style="color:#a6e22e">found</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">userData</span>.<span style="color:#a6e22e">IsStale</span>(<span style="color:#a6e22e">now</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">userData</span> = <span style="color:#a6e22e">fillCache</span>(<span style="color:#a6e22e">ev</span>, <span style="color:#a6e22e">cache</span>, <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;cache_expires&#34;</span>, <span style="color:#a6e22e">userData</span>.<span style="color:#a6e22e">CacheUntil</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;cache_is_stale&#34;</span>, <span style="color:#a6e22e">userData</span>.<span style="color:#a6e22e">IsStale</span>(<span style="color:#a6e22e">now</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;request_duration_ms&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">now</span>) <span style="color:#f92672">/</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Millisecond</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The resulting event will contain enough information so that in the future when a bug is introduced, you will be able to look at your events and see that yes, while <code>request_duration_ms</code> has gone down and <code>cache_hit</code> has gone up, all the events have <code>cache_is_stale=false</code> with <code>cache_expires</code> times much older than they should be.</p>
<p>So this is the value add of Observability: Answering Unknown Unknowns; the questions you didn&rsquo;t know you needed to ask.</p>
<h2 id="implementing-with-elastic-search">Implementing with Elastic Search</h2>
<p>I won&rsquo;t cover how to set up and manage the ELK stack (as my opinion is that you should pay someone else to run it.  Don&rsquo;t waste your engineering effort.)  I will assume you have a way to get information from <code>stdout</code> of a process into ElasticSearch somehow (I usually use piping to <a href="https://www.elastic.co/beats/filebeat">Filebeat</a>, which forwards to <a href="https://www.elastic.co/logstash">LogStash</a>, which processes and pushes into <a href="https://www.elastic.co/elasticsearch/">ElasticSearch</a>).</p>
<p>Besides, the code is the important part.  This is all written in Go, but I gather you can do similar to NodeJS apps etc.  We will use Honeycomb&rsquo;s [Libhoney-go] package to do the heavy lifting, and supply a custom <code>Transmission</code>.  The following is the important part of a custom stdout write (loosely based on libhoney&rsquo;s <code>WriterSender</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">w</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">JsonSender</span>) <span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">ev</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">transmission</span>.<span style="color:#a6e22e">Event</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Data</span>[<span style="color:#e6db74">&#34;@timestamp&#34;</span>] = <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Timestamp</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">content</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Data</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">content</span> = append(<span style="color:#a6e22e">content</span>, <span style="color:#e6db74">&#39;\n&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Lock</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Unlock</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Writer</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">SendResponse</span>(<span style="color:#a6e22e">transmission</span>.<span style="color:#a6e22e">Response</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Metadata</span>: <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Metadata</span>,
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The key difference here is that I am only serialising the <code>.Data</code> property of the Event, and am inserting an extra <code>@timestamp</code> key to make my event structure conform to the standard LogStash pattern.</p>
<p>All that remains to do is configure libhoney to use the custom sender:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">Init</span>(<span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">Config</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Transmission</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">JsonSender</span>{<span style="color:#a6e22e">Writer</span>: <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>},
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Dataset</span>:      <span style="color:#e6db74">&#34;my-api&#34;</span>,
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>Running your service, you would start to see json objects on stdout which look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;@timestamp&#34;</span>: <span style="color:#e6db74">&#34;2020-03-15T14:51:43.041744363+02:00&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;request_id&#34;</span>: <span style="color:#e6db74">&#34;7f46b313-0a37-457c-9727-b6fdc8c87733&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;request_path&#34;</span>: <span style="color:#e6db74">&#34;/api/user/dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;request_method&#34;</span>: <span style="color:#e6db74">&#34;GET&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;user_id&#34;</span>: <span style="color:#e6db74">&#34;e6baf70f-9812-4cff-94e9-80a308077955&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cache_size&#34;</span>: <span style="color:#ae81ff">86</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cache_hit&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cache_expires&#34;</span>: <span style="color:#e6db74">&#34;2020-03-15T15:02:17.045625680+02:00&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cache_is_stale&#34;</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;request_duration_ms&#34;</span>: <span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There are no message fields for you to read, but you can see everything which happened in this method; whether the user was found in the cache, how big the cache was etc.</p>
<p>Now if we push that into ElasticSearch, we can filter by any of the values in the event; in this case, I filtered by <code>user_id</code> and added columns for all the cache properties.</p>
<p><img loading="lazy" src="observability-elk.png" alt="Kibana Screenshot"  />
</p>
<p>Now everything is in one place; you can slice and dice your data and figure out what exactly is going on.  You can even write some metrics off your event queries if you want!</p>
<h2 id="improvements--caveats">Improvements &amp; Caveats</h2>
<p>The main caveat is that pushing this into ElasticSearch is not as good as what you get from Honeycomb - It is just an improvement on logging messages and enables you to demonstrate the value of observability easily.</p>
<p>Once you&rsquo;ve demonstrated how useful observability is, the next step is to migrate to Honeycomb and get even more value.</p>
<p>I have written the word Honeycomb a lot in this post (9 times so far), but I want to stress that it is observability that we are after and that Honeycomb is an implementation detail.  It also happens to be the only real observability tooling (although <a href="https://lightstep.com/">Lightstep</a>, kind of.)</p>
<p>And let&rsquo;s not get started on the &ldquo;3 pillars of observability&rdquo; bullshit being peddled by other vendors.</p>
]]></content:encoded></item></channel></rss>