<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>golang on Andy Dote</title><link>https://andydote.co.uk/tags/golang/</link><description>Recent content in golang on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 26 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/golang/rss.xml" rel="self" type="application/rss+xml"/><item><title>Telemetry and Cancelled Contexts</title><link>https://andydote.co.uk/2024/12/26/opentelemetry-cancelled-contexts/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2024/12/26/opentelemetry-cancelled-contexts/</guid><description>I use opentelemetry extensively to trace my applications, and one thing I keep running into is when writing a long running process, I want to handle OS signals and still send the telemetry on shutdown.
Typically, my application startup looks something like this:
func main() { ctx, cancel := context.WithCancel(context.Background()) handleSignals(cancel) tracerProvider := configureTelemetry(ctx) defer tracerProvider.Shutdown(ctx) tr = traceProvider.Tracer(&amp;#34;cli&amp;#34;) if err := runMain(ctx, os.Args[:]); err != nil { fmt.Fprintf(os.Stderr, err.Error()) os.</description><content:encoded><![CDATA[<p>I use opentelemetry extensively to trace my applications, and one thing I keep running into is when writing a long running process, I want to handle OS signals and still send the telemetry on shutdown.</p>
<p>Typically, my application startup looks something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">cancel</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithCancel</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>())
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">handleSignals</span>(<span style="color:#a6e22e">cancel</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tracerProvider</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">configureTelemetry</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">tracerProvider</span>.<span style="color:#a6e22e">Shutdown</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tr</span> = <span style="color:#a6e22e">traceProvider</span>.<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;cli&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">runMain</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[:]); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprintf</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">runMain</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">args</span> []<span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;main&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// some kind of loop
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">message</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">someProcess</span>(<span style="color:#a6e22e">ctx</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">select</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Done</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Err</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">doMessageThings</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">message</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>handleSignals</code> method listens to things like <code>sigint</code>, and calls the <code>cancel()</code> function, and the app stops processing messages and exits gracefully.</p>
<p>When the application exited due to errors, I would see the whole trace from the application, but if the application stopped due to <code>sigint</code> or similar, the <code>main</code> span would never come through.</p>
<p>After a bit of reading, I realised the bug is here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span>ctx, cancel := context.WithCancel(context.Background())
</span></span><span style="display:flex;"><span>handleSignals(cancel)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tracerProvider := configureTelemetry(ctx)
</span></span><span style="display:flex;"><span><span style="color:#f92672">- defer tracerProvider.Shutdown(ctx)
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+ defer tracerProvider.Shutdown(context.Background())
</span></span></span></code></pre></div><p>The problem is that when the context has been cancelled, the tracerProvider skips doing any work, so never sends through the last spans!</p>
<p>This issue would have been more noticable if:</p>
<ul>
<li>I checked the <code>err</code> value from <code>Shutdown()</code>, which is easily missed in a <code>defer</code> call</li>
<li>Setting <code>OTEL_LOG_LEVEL</code> to <code>debug</code> printed something useful!</li>
</ul>
<p>Hopefully by writing this down I will remember or at least find the answer next time I manage to do this again!</p>
]]></content:encoded></item></channel></rss>