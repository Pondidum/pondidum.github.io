<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>warcraft on Andy Dote</title><link>https://andydote.co.uk/tags/warcraft/</link><description>Recent content in warcraft on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 05 Dec 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/warcraft/rss.xml" rel="self" type="application/rss+xml"/><item><title>Encapsulation in Warcraft Addons - Inheritance</title><link>https://andydote.co.uk/2014/12/05/encapsulation-in-warcraft-addons-inheritance/</link><pubDate>Fri, 05 Dec 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/12/05/encapsulation-in-warcraft-addons-inheritance/</guid><description>Using Inheritance (sort of) When we actually need inheritance, things get a little more complicated. We need to use two of lua&amp;rsquo;s slightly harder features to get it to work: metatables and colon notation. A little background on these will help:
MetaTables All &amp;ldquo;objects&amp;rdquo; in lua are tables, and tables can something called a metatable added to them. Metatables can have special methods on them which run under certain circumstances (called metamethods), such as keys being added.</description></item><item><title>Encapsulation in Warcraft Addons - Closures</title><link>https://andydote.co.uk/2014/11/28/encapsulation-in-warcraft-addons-closures/</link><pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/11/28/encapsulation-in-warcraft-addons-closures/</guid><description>In the last post I alluded to the fact that if you put in a little leg work, you could write well encapsulated objects in lua. There are two main ways to do this; with closures, and with metatables. In this post we will deal with using closures, and in the next post we will cover using metatables.
Using Closures The simplest way to write an object in lua is with a closure to hide all the variables from the outside world.</description></item><item><title>Good Design in Warcraft Addons/Lua</title><link>https://andydote.co.uk/2014/11/23/good-design-in-warcraft-addons/</link><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/11/23/good-design-in-warcraft-addons/</guid><description>Lack of Encapsulation in Addons I first noticed a lack of good design in addon code when I started trying to tweak existing addons to be slightly different.
One of the stand out examples was a Threat Meter (you know which one I mean). It works well, but I felt like writing my own, to make it really fit into my UI, with as little overhead as possible. Not knowing how to even begin writing a Threat Meter, I downloaded a copy, and opened its source directory&amp;hellip; to discover that the entire addon is one 3500+ line file, and 16 Ace.</description></item></channel></rss>