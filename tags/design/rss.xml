<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>design on Andy Dote</title><link>https://andydote.co.uk/tags/design/</link><description>Recent content in design on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 11 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/design/rss.xml" rel="self" type="application/rss+xml"/><item><title>The reports of UML's death are greatly exaggerated</title><link>https://andydote.co.uk/2022/09/11/uml-isnt-dead/</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2022/09/11/uml-isnt-dead/</guid><description>This is in response to the recent posts about the death of UML; while I think some parts of UML have fallen ill, the remaining parts are still alive, and useful to this day.
TLDR Out of 14 types of diagram there are 3 that I use on a regular basis: Activity Diagram, State Machine Diagram, and Sequence Diagram. I think the Timing Diagram is borderline, but I can only think of a couple of occasions when it has been useful.</description></item><item><title>Architecture Decision Records</title><link>https://andydote.co.uk/2019/06/29/architecture-decision-records/</link><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/06/29/architecture-decision-records/</guid><description>This is a text version of a short talk (affectionately known as a &amp;ldquo;Coffee Bag&amp;rdquo;) I gave at work this week, on Architecture Design Records. You can see the slides here, but there isn&amp;rsquo;t a recording available, unfortunately.
It should be noted; these are not to replace full architecture diagrams; you should definitely still write C4 Models to cover the overall architecture. ADRs are for the details, such as serializer formats, convention-over-configuration details, number precisions for timings, or which metrics library is used and why.</description></item><item><title>Microservices or Components</title><link>https://andydote.co.uk/2018/10/28/microservices-or-components/</link><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/10/28/microservices-or-components/</guid><description>One of the reasons people list for using MicroServices is that it helps enforce separation of concerns. This is usually achieved by adding a network boundary between the services. While this is useful, it&amp;rsquo;s not without costs; namely that you&amp;rsquo;ve added a set of new failure modes: the network. We can achieve the same separation of concerns within the same codebase if we put our minds to it. In fact, this is what Simon Brown calls a Modular Monolith, and DHH calls the Majestic Monolith.</description></item><item><title>Tweaking Processes to Remove Errors</title><link>https://andydote.co.uk/2017/12/09/tweaking-process-remove-errors/</link><pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/12/09/tweaking-process-remove-errors/</guid><description>When we are developing (internal) Nuget packages at work, the process used is the following:
Get latest of master New branch feature-SomethingDescriptive Implement feature Push to GitHub TeamCity builds Publish package to the nuget feed Pull request Merge to master Obviously 3 to 6 can repeat many times if something doesn&amp;rsquo;t work out quite right.
There are a number of problems with this process:
Pull-request after publishing Pull requests are a great tool which we use extensively, but in this case, they are being done too late.</description></item><item><title>Evolutionary Development</title><link>https://andydote.co.uk/2017/11/17/evolutionary-development/</link><pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/11/17/evolutionary-development/</guid><description>Having recently finished reading the Building Evolutionary Architectures: Support Constant Change book, I got to thinking about a system which was fairly representative of an architecture which was fine for it&amp;rsquo;s initial version, but it&amp;rsquo;s usage had outgrown the architecture.
Example System: Document Storage The system in question was a file store for a multi user, internal, desktop based CRM system. The number of users was very small, and the first implementation was just a network file share.</description></item><item><title>Strong Configuration Composition</title><link>https://andydote.co.uk/2017/11/09/configuration-composition/</link><pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/11/09/configuration-composition/</guid><description>It&amp;rsquo;s no secret I am a fan of strong typing - not only do I talk and blog about it a lot, but I also have a library called Stronk which provides strong typed configuration for non dotnet core projects.
The problem I come across often is large configurations. For example, given the following project structure (3 applications, all reference the Domain project):
DemoService `-- src |-- Domain | |-- Domain.</description></item><item><title>Implementing Custom Aspnet Core ModelBinders</title><link>https://andydote.co.uk/2017/09/22/implemeting-custom-aspnetcore-modelbinders/</link><pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/09/22/implemeting-custom-aspnetcore-modelbinders/</guid><description>This post is a summary of a stream I did last night where I implemented all of this. If you want to watch me grumble my way through it, it&amp;rsquo;s available on YouTube here.
In my Crispin project, I wanted the ability to support loading Toggles by both name and ID, for all operations. As I use mediator to send messages from my controllers to the handlers in the domain, this means that I had to either:</description></item><item><title>Testing Containers or Test Behaviour, Not Implementation</title><link>https://andydote.co.uk/2017/09/17/testing-containers/</link><pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/09/17/testing-containers/</guid><description>The trouble with testing containers is that usually the test ends up very tightly coupled to the implementation.
Let&amp;rsquo;s see an example. If we start off with an interface and implementation of a &amp;ldquo;cache&amp;rdquo;, which in this case is just going to store a single string value.
public interface ICache { string Value { get; set; } } public class Cache { public string Value { get; set; } } We then setup our container (StructureMap in this case) to return the same instance of the cache whenever an ICache is requested:</description></item><item><title>Repositories Revisited (and why CQRS is better)</title><link>https://andydote.co.uk/2017/09/09/repositories-revisited/</link><pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/09/09/repositories-revisited/</guid><description>TLDR: I still don&amp;rsquo;t like Repositories!
Recently I had a discussion with a commenter on my The problems with, and solutions to Repositories post, and felt it was worth expanding on how I don&amp;rsquo;t use repositories.
My applications tend to use the mediator pattern to keep things decoupled (using the Mediatr library), and this means that I end up with &amp;ldquo;handler&amp;rdquo; classes which process messages; they load something from storage, call domain methods, and then write it back to storage, possibly returning some or all the data.</description></item><item><title>Running pre-compiled microservices in Docker with Mono</title><link>https://andydote.co.uk/2015/09/15/pre-compiled-microservices/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/09/15/pre-compiled-microservices/</guid><description>Last time we went through creating a Dockerfile for a microservice, with the service being compiled on creation of the container image, using xbuild.
However we might not want to compile the application to create the container image, and use an existing version (e.g. one created by a build server.)
Our original Dockerfile was this:
FROM mono:3.10-onbuild RUN apt-get update &amp;amp;&amp;amp; apt-get install mono-4.0-service -y CMD [ &amp;#34;mono-service&amp;#34;, &amp;#34;./MicroServiceDemo.exe&amp;#34;, &amp;#34;--no-daemon&amp;#34; ] EXPOSE 12345 We only need to make a few modifications to use a pre-compiled application:</description></item><item><title>Running microservices in Docker with Mono</title><link>https://andydote.co.uk/2015/09/05/running-microservices-in-docker-with-mono/</link><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/09/05/running-microservices-in-docker-with-mono/</guid><description>Getting a service running under Docker is fairly straight forward once you have all the working parts together. I have an app written (following my guide on service and console in one), which uses Owin to serve a web page as a demo:
install-package Microsoft.Owin.SelfHost public partial class Service : ServiceBase { //see the service console post for the rest of this protected override void OnStart(string[] args) { _app = WebApp.</description></item><item><title>A single project Windows Service and Console</title><link>https://andydote.co.uk/2015/08/30/single-project-service-and-console/</link><pubDate>Sun, 30 Aug 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/08/30/single-project-service-and-console/</guid><description>I have found that when developing MicroServices, I often want to run them from within Visual Studio, or just as a console application, and not have to bother with the hassle of installing as windows services.
In the past I have seen this achieved by creating a Class Library project with all the actual implementation inside it, and then both a Console Application and Windows Service project referencing the library and doing nothing other than calling a .</description></item><item><title>Don't Let The Database Dictate Your Design</title><link>https://andydote.co.uk/2015/04/01/dont-let-the-database-dictate-your-design/</link><pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/04/01/dont-let-the-database-dictate-your-design/</guid><description>I have been thinking recently about how the database can influence our design decisions, and perhaps makes them harder than they need to be in some cases. An example of this is the design of a system which stores data about people, specifically for this, their email addresses. A cut down version of the structure is this:
table people id serial primary key firstname varchar(50) lastname varchar(50) table emails id serial primary key person_id int =&amp;gt; people.</description></item><item><title>The problems with and solutions to Repositories</title><link>https://andydote.co.uk/2015/03/28/problems-with-and-solutions-to-repositories/</link><pubDate>Sat, 28 Mar 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/03/28/problems-with-and-solutions-to-repositories/</guid><description>Repositories are a design pattern which I have never been a huge fan of. I can see the use of them as a good layer boundary, but too often I see them being used all over the place instead of at an infrastructure level in a code base.
A particularly prevalent version of this misuse I see is self populating collections. These generally inherit List&amp;lt;TEntity&amp;gt; or Dictionary&amp;lt;TID, TEntity&amp;gt;, and provide a set of methods such as .</description></item><item><title>Communicating Intent in APIs</title><link>https://andydote.co.uk/2015/03/25/communicating-intent-in-apis/</link><pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/03/25/communicating-intent-in-apis/</guid><description>Recently was trying to work out how to allow custom resources to be specified in Dashen. I already know what data is needed/defined for a resource: a name, a MIME type, and a Stream. We can make this required data known very easily:
public class Resource { public string Name { get; private set; } public string MimeType { get; private set; } public Stream Content { get; private set; } public Resource(string name, string mimeType, Stream content) { Name = name; MimeType = mimeType; Content = content; } } As all the parameters can only be set through the constructor, you are communicating that they are all required.</description></item><item><title>Encapsulation in Warcraft Addons - Inheritance</title><link>https://andydote.co.uk/2014/12/05/encapsulation-in-warcraft-addons-inheritance/</link><pubDate>Fri, 05 Dec 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/12/05/encapsulation-in-warcraft-addons-inheritance/</guid><description>Using Inheritance (sort of) When we actually need inheritance, things get a little more complicated. We need to use two of lua&amp;rsquo;s slightly harder features to get it to work: metatables and colon notation. A little background on these will help:
MetaTables All &amp;ldquo;objects&amp;rdquo; in lua are tables, and tables can something called a metatable added to them. Metatables can have special methods on them which run under certain circumstances (called metamethods), such as keys being added.</description></item><item><title>Encapsulation in Warcraft Addons - Closures</title><link>https://andydote.co.uk/2014/11/28/encapsulation-in-warcraft-addons-closures/</link><pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/11/28/encapsulation-in-warcraft-addons-closures/</guid><description>In the last post I alluded to the fact that if you put in a little leg work, you could write well encapsulated objects in lua. There are two main ways to do this; with closures, and with metatables. In this post we will deal with using closures, and in the next post we will cover using metatables.
Using Closures The simplest way to write an object in lua is with a closure to hide all the variables from the outside world.</description></item><item><title>Good Design in Warcraft Addons/Lua</title><link>https://andydote.co.uk/2014/11/23/good-design-in-warcraft-addons/</link><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/11/23/good-design-in-warcraft-addons/</guid><description>Lack of Encapsulation in Addons I first noticed a lack of good design in addon code when I started trying to tweak existing addons to be slightly different.
One of the stand out examples was a Threat Meter (you know which one I mean). It works well, but I felt like writing my own, to make it really fit into my UI, with as little overhead as possible. Not knowing how to even begin writing a Threat Meter, I downloaded a copy, and opened its source directory&amp;hellip; to discover that the entire addon is one 3500+ line file, and 16 Ace.</description></item><item><title>Edge.js for Embedded Webuis</title><link>https://andydote.co.uk/2014/08/04/edgejs-for-embedded-webuis/</link><pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/08/04/edgejs-for-embedded-webuis/</guid><description>We work we have a number of windows services which each have a lot of stats they could expose. Currently they are only interrogatable by the logfiles and from any notifications we receive.
I have been toying with the idea of hosting a website in-process which would give a simple dashboard ui and access to a live view of the log file. The idea first struck me when I was experimenting with FubuMvc, as they have an EmbeddedFubuMvcServer, which is very easy to use:</description></item><item><title>Configuring Dapper to work with custom types</title><link>https://andydote.co.uk/2014/07/22/configuring-dapper-to-work-with-custom-types/</link><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/07/22/configuring-dapper-to-work-with-custom-types/</guid><description>In the last post we looked at using custom ID types to help abstract the column type from the domain.
This works well until you start trying to load and save entities using an ORM, as the ORM has not way to know how to map a column to a custom type. ORMs provide extension points to allow you to create these mappings. As I tend to favour using Dapper, we will go through setting it up to work with our custom ID types.</description></item><item><title>Strong Type your entity IDs.</title><link>https://andydote.co.uk/2014/07/17/strong-type-your-entity-ids/</link><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/07/17/strong-type-your-entity-ids/</guid><description>The Database is just an Implementation Detail A quote from Martin Fowler given during his Architecture talk stated that the Database in your application should just be an implementation detail. I agree on this wholeheartedly and find that its really not that difficult to achieve if you think about your architecture carefully.
Having said that, I still see parts of the database implementation leaking out into the domain, mainly in the form of IDs.</description></item><item><title>Specific Interfaces</title><link>https://andydote.co.uk/2014/06/08/specific-interfaces-smaller-abstractions/</link><pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/06/08/specific-interfaces-smaller-abstractions/</guid><description>While writing my CruiseCli project, I needed to do some data storage, and so used my standard method of filesystem access, the IFileSystem. This is an interface and implementation which I tend to copy from project to project, and use as is. The interface looks like the following:
public interface IFileSystem { bool FileExists(string path); void WriteFile(string path, Stream contents); void AppendFile(string path, Stream contents); Stream ReadFile(string path); void DeleteFile(string path); bool DirectoryExists(string path); void CreateDirectory(string path); IEnumerable&amp;lt;string&amp;gt; ListDirectory(string path); void DeleteDirectory(string path); } And the standard implementation looks like the following:</description></item><item><title>Using StructureMap Registries for better separation</title><link>https://andydote.co.uk/2014/05/19/using-structuremap-registries/</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/05/19/using-structuremap-registries/</guid><description>When it comes to configuring StructureMap, it supports the use of Registries. Registries support everything that the standard configure method does(new Container(c =&amp;gt; { /* */});).
There are two main reasons that I use the registries rather then doing all my configuration in the Container&amp;rsquo;s lambda: separation of concerns (one registry per area of code) and easier testing (which we will go into shortly).
The only down side I can see to using registries is that it can scatter your configuration across your codebase - but if you have ReSharper, doing a &amp;lsquo;Find Implementations&amp;rsquo; on Registry will find them all for you, so it really isn&amp;rsquo;t much of a down side.</description></item><item><title>Writing Rich Domain Models</title><link>https://andydote.co.uk/2014/05/04/rich-domain-modeling/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/05/04/rich-domain-modeling/</guid><description>The term Rich Domain Model is used to describe a domain model which really shows you how you should be using and manipulating the model, rather than letting you do anything with it. It is the opposite of an Anaemic Domain Model, which provides a very low abstraction over the data storage (generally), but with little to no enforcing of rules.
The Anaemic Domain Model To take the standard model of a person who has addresses and phone numbers etc seems a little contrite, so lets run through an example using timesheets (bear in mind I don&amp;rsquo;t know what really goes into a timesheet system, this just seems reasonable).</description></item><item><title>Using a Micro ORM to decouple your DB Access</title><link>https://andydote.co.uk/2014/03/29/using-a-micro-orm-to-decouple-your-db-access/</link><pubDate>Sat, 29 Mar 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/03/29/using-a-micro-orm-to-decouple-your-db-access/</guid><description>One of the databases I use on a regular bases has a rather interesting column naming scheme; all columns have a prefix, based on the table name. For example, the table containing people would have the prefix PEO_, so you would have this:
Select * from People PEO_PersonID, PEO_FirstName, PEO_LastName, PEO_DoB ----------------------------------------------------- 1 John Jones 1984-07-15 I believe the idea was so that when querying, you would not have any column name clashes.</description></item><item><title>SOLID Principles - DIP</title><link>https://andydote.co.uk/2014/03/15/solid-principles-dip/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/03/15/solid-principles-dip/</guid><description>Single Responsibility | Open Closed | Liskov Substitution | Interface Segregation | Dependency Inversion
The Dependency Inversion Principle states that &amp;ldquo;Depend upon Abstractions. Do not depend upon concretions&amp;rdquo;. A good real world example of this is plug sockets around your house; any device you buy can be plugged into any socket in your house. You don&amp;rsquo;t have to buy new set of devices when you move house, and you don&amp;rsquo;t have to buy a new house for your devices!</description></item><item><title>SOLID Principles - ISP</title><link>https://andydote.co.uk/2014/03/01/solid-principles-isp/</link><pubDate>Sat, 01 Mar 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/03/01/solid-principles-isp/</guid><description>Interface Segregation Principle Single Responsibility | Open Closed | Liskov Substitution | Interface Segregation | Dependency Inversion
Interface Segregation I find is often ignored, or people tend not to see the point in. Segregating your Interfaces is a very useful way of reducing compexity in your systems, and comes with a number of benefits, such as making mocking inputs easier, and making your objects smaller and simpler.
So as usual, lets start off with an set of types which don&amp;rsquo;t adhere to the principle.</description></item><item><title>SOLID Principles - LSP</title><link>https://andydote.co.uk/2014/02/23/solid-principles-lsp/</link><pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/02/23/solid-principles-lsp/</guid><description>Liskov Substitution Principle Single Responsibility | Open Closed | Liskov Substitution | Interface Segregation | Dependency Inversion
The Liskov Substitution Principle is states:
If S is a sub-type of T, then objects of type T maybe replaced with objects of type S
At face value, it means that a small class hierarchy like this:
public class FileEntry { } public class DbFileEntry : FileEntry { } And a method which takes in a FileEntry, can be called like this:</description></item><item><title>SOLID Principles - OCP</title><link>https://andydote.co.uk/2014/02/19/solid-principles-ocp/</link><pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/02/19/solid-principles-ocp/</guid><description>Open Closed Principle Single Responsibility | Open Closed | Liskov Substitution | Interface Segregation | Dependency Inversion
The Open Closed Principle is one that I often find is miss-understood - how can something be open for extension, but closed for modification? A good example of this principle being implemented cropped up at work a while ago, we had a UI element which has a reusable grid, which gets populated with data based on a menu selection.</description></item><item><title>SOLID Principles - SRP</title><link>https://andydote.co.uk/2014/02/18/solid-principles-srp/</link><pubDate>Tue, 18 Feb 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/02/18/solid-principles-srp/</guid><description>Single Responsibility Principle Single Responsibility | Open Closed | Liskov Substitution | Interface Segregation | Dependency Inversion
SRP (Single Responsibility Principle) is something I hear a lot of developers agree is a good thing, but when I read their code, they violate it without realising, or don&amp;rsquo;t see the use in their particular case.
A particularly prominent example I find in our code bases is Permissioning and Caching. These two requirements can often slip into classes slowly - especially if requirements are not clear, or change as the task progresses.</description></item><item><title>Specialising a General Application</title><link>https://andydote.co.uk/2014/02/02/specialising-a-general-application/</link><pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/02/02/specialising-a-general-application/</guid><description>Currently our application at work is used by all employees - sales staff, legal team, marketing, accounts etc. This means we have one very large, and general fit application. It covers everyone&amp;rsquo;s needs just, and the largest group of users (sales in this case) have an application which closely matches what they need. This is at the expense of the other teams having an application that is not quite right - close, but could be better.</description></item><item><title>Winforms Design Time support: exposing sub designers</title><link>https://andydote.co.uk/2012/10/29/winforms-design-time-support-exposing-sub-designers/</link><pubDate>Mon, 29 Oct 2012 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2012/10/29/winforms-design-time-support-exposing-sub-designers/</guid><description>When writing a UserControl, it is often desired to expose one or more of the sub-controls design-time support to the user of your control. It is reasonably straight forward to do, and here is a rundown of how:
We start off with our UserControl, in this case the imaginatively named TestControl:
The code behind looks like this:
[Designer(typeof(TestControlDesigner))] public partial class TestControl : UserControl { public TestControl() { InitializeComponent(); } [DesignerSerializationVisibility(DesignerSerializationVisibility.</description></item><item><title>Designing the EventDistributor</title><link>https://andydote.co.uk/2012/04/23/designing-the-eventdistributor/</link><pubDate>Mon, 23 Apr 2012 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2012/04/23/designing-the-eventdistributor/</guid><description>When it comes to developing a new class, I don&amp;rsquo;t tend to use TDD (Test Driven Development), I favour something I have named TAD - Test Aided Development. In other words, while I am for Unit Testing in general, designing something via writing tests sometimes feels too clunky and slow. I always write classes and methods with testing very much in mind, but I do not generally write the tests until later on in the process.</description></item><item><title>Model View Presenters: Composite Views</title><link>https://andydote.co.uk/2012/03/29/model-view-presenters-composite-views/</link><pubDate>Thu, 29 Mar 2012 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2012/03/29/model-view-presenters-composite-views/</guid><description>Table of Contents: Introduction Presenter to View Communication View to Presenter Communication Composite Views Presenter / Application communication &amp;hellip; When working with MVP, it won&amp;rsquo;t be long before you come across the need for multiple views on one form. There are several ways to achive this, and which you choose is really down to how you intend to (re)use your views.
The first method for dealing with the sub views is to expose them as a property of your main view, and set them up in the main view&amp;rsquo;s presenter:</description></item><item><title>Model View Presenters: View to Presenter Communication</title><link>https://andydote.co.uk/2012/01/31/model-view-presenters-view-to-presenter-communication/</link><pubDate>Tue, 31 Jan 2012 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2012/01/31/model-view-presenters-view-to-presenter-communication/</guid><description>Table of Contents: Introduction Presenter to View Communication View to Presenter Communication Composite Views Presenter / Application communication &amp;hellip; Communicating from the View to the Presenter is a reasonably straight forward affair. To signal something happening, we use an Event, but one with no parameters. We pass no parameters, as we are not going to be using them anyway, so what is the point is raising an event every time with OkayClicked(this, EventArgs.</description></item><item><title>Model View Presenters: Introduction</title><link>https://andydote.co.uk/2012/01/26/model-view-presenter-introduction/</link><pubDate>Thu, 26 Jan 2012 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2012/01/26/model-view-presenter-introduction/</guid><description>Table of Contents Introduction Presenter to View Communication View to Presenter Communication Composite Views Presenter / Application communication &amp;hellip; What is MVP? I first came across MVP in Jeremy Miller&amp;rsquo;s Build Your Own Cab series, and have been using and improving how I work with this style ever since. Model View Presenters tend to come in one of two forms: Passive View, and Supervising Controller. I am a fan of the Passive View variety, primarily for the testing aspect, but also as I find it provides me with the best level of separation.</description></item><item><title>Model View Presenters: Presenter to View Communication</title><link>https://andydote.co.uk/2012/01/26/model-view-presenters-presenter-to-view-communication/</link><pubDate>Thu, 26 Jan 2012 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2012/01/26/model-view-presenters-presenter-to-view-communication/</guid><description>Table of Contents: Introduction Presenter to View Communication View to Presenter Communication Composite Views Presenter / Application communication &amp;hellip; Presenter to View Communication There are two styles utilised for populating the View with data from the Presenter and Model that I have used. The only difference between them is how tightly coupled you mind your View being to the Model. For the example of this, we will have the following as our Model:</description></item><item><title>Noticing Changes</title><link>https://andydote.co.uk/2011/10/22/noticing-changes/</link><pubDate>Sat, 22 Oct 2011 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2011/10/22/noticing-changes/</guid><description>I work on a piece of software that has been around for about 6 years now, which looks something like this:
The textboxes are validating that their contents, some as decimal, and some as integer. All the textboxes consider no-value to be invalid.
I made a slight change to the control, which was to add a new row. Since adding that row, many users have sent in requests to have the validation changed on the textboxes, so that no-value is considered to be zero.</description></item><item><title>(Miss)Use of Narrowing-Implicit Operators</title><link>https://andydote.co.uk/2011/03/17/missuse-of-narrowing-implicit-operators/</link><pubDate>Thu, 17 Mar 2011 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2011/03/17/missuse-of-narrowing-implicit-operators/</guid><description>I have covered a use of Narrowing/Implicit Operators before, but I was thinking the other day about use of Fluent Interfaces, and if it was possible to have one on a cache/repository type class, that would allow you to chain options together, but stop at any point and have the result.
I gave it a go, and came up with this:
public class Person { public string Name { get; set; } public int Age { get; set; } public Person(string name, int age) { this.</description></item><item><title>Expression Rules, Version 2</title><link>https://andydote.co.uk/2011/02/09/expression-rules-version-2/</link><pubDate>Wed, 09 Feb 2011 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2011/02/09/expression-rules-version-2/</guid><description>Recently I have written a rules engine for a very large menu system in an application I work on. Many of the rules apply many items, so I didn&amp;rsquo;t wish to have to express the same rule many times. To avoid this, the rule engine DSL was born:
Concerns.When(item =&amp;gt; /* rule of some sort */) .AppliesToAll() .Except(MenuItems.ToggleHidden, MenuItems.Refresh) And rules are rolled together, so a specific menu item must have all of its rules evaluating to true to be displayed.</description></item><item><title>Actually, I'll mutate if you don't mind</title><link>https://andydote.co.uk/2010/09/10/actually-i-ll-mutate-if-you-don-t-mind/</link><pubDate>Fri, 10 Sep 2010 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2010/09/10/actually-i-ll-mutate-if-you-don-t-mind/</guid><description>After I had changed all my extension methods to be functions and return a new object rather than mutating the self parameter, I changed them all back to be refs.
Why? Well mainly because the library I am writing is in VB, and these methods are internal. VB supports ByRef parameters as the first param in an extension method, so no problems there. The only reason I was changing them so that they were C# compatible was so that I could test them with MSpec in C#.</description></item><item><title>To mutate or not to mutate</title><link>https://andydote.co.uk/2010/09/08/to-mutate-or-not-to-mutate/</link><pubDate>Wed, 08 Sep 2010 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2010/09/08/to-mutate-or-not-to-mutate/</guid><description>I have been working on a project recently that involves a lot of work with Flags Enums. To aid with this I created a set of Extension Methods:
Add(Of T as Structure)(self as T, value as Int) as T Add(Of T as Structure)(self as T, values() as Int) as T Remove(Of T as Structure)(self as T, value as Int) as T Remove(Of T as Structure)(self as T, values() as Int) as T Has(Of T as Structure)(self as T, value as Int) as Boolean HasAll(Of T as Structure)(self as T, values() as Int) as Boolean HasAny(Of T as Structure)(self as T, values() as Int) as Boolean Now the last 3 methods I am happy with - they are self explanatory and do what&amp;rsquo;s expected.</description></item><item><title>Thanks Google for solving my problem!</title><link>https://andydote.co.uk/2009/12/16/thanks-google-for-solving-my-problem/</link><pubDate>Wed, 16 Dec 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/12/16/thanks-google-for-solving-my-problem/</guid><description>Following on from yesterday&amp;rsquo;s post about separation on concerns and where to put some undefined logic for a multi state checkbox, I did a fair amount of research.
I must say the Quince website is a good repository of UI Design Patterns, as is Welie. I couldn&amp;rsquo;t find anything like what I was after, which I guess means I shouldn&amp;rsquo;t be doing it this way?
After a while a brainwave struck me: &amp;ldquo;Gmail lets you select things, how does it do it?</description></item><item><title>Functionality and Seperation of Concerns</title><link>https://andydote.co.uk/2009/12/15/functionality-and-seperation-of-concerns/</link><pubDate>Tue, 15 Dec 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/12/15/functionality-and-seperation-of-concerns/</guid><description>When I am writing a winform in an MVP style, I often wonder how far to go with the separation. Say I have the following situation:
A small form which should display a list of messages, and allow the user to select which ones they want processed. It processes each message in turn. If a message has more than one attachment, a dialog is shown to ask the user to select which attachment should be used for that message.</description></item><item><title>Region Hate</title><link>https://andydote.co.uk/2009/10/06/region-hate/</link><pubDate>Tue, 06 Oct 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/10/06/region-hate/</guid><description>There seems to be a lot of negativity towards the #Region in .net at the moment, with many people hating them and calling all usages of them &amp;lsquo;retarded&amp;rsquo;.
I can see their point, especially when you see the odd class with regions like this:
Class Foo { #Private Members #Protected Members #Friend Members #Public Members #Private Constructors #Protected Constructors #Friend Constructors #Public Constructors #Private Methods #Protected Methods #Friend Methods #Public Methods } Clearly the person who wrote this was ill at the time (I hope&amp;hellip;), and besides, where would Protected Friends go?</description></item><item><title>Fluency at a cost?</title><link>https://andydote.co.uk/2009/07/29/fluency-at-a-cost/</link><pubDate>Wed, 29 Jul 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/07/29/fluency-at-a-cost/</guid><description>I like fluent interfaces. I find them easy to read, and nice to program with. However the more I write them the more I notice there is a cost associated with them. It&amp;rsquo;s not much of a cost, but it is there none the less. To demonstrate say we have a class called Animator. It has the following properties and methods on it:
+ Control + Distance + DistanceType + AnimationType + Direction + Time + Algorithm - Animate() Now while you could just set all the properties and then call Animate(), a Fluent Interface makes thing nicer:</description></item><item><title>Key Bindings</title><link>https://andydote.co.uk/2009/07/17/key-bindings/</link><pubDate>Fri, 17 Jul 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/07/17/key-bindings/</guid><description>When I was at college studying Electronics and Computer Engineering, we used a piece of software called Proteus. This software took a long time to get used to due to its interesting key bindings and mouse usage.
To select a track in Ares (PCB Layout package) you Right Click on it. Hmm not too standard, but okay, I can live with that. Now what happens if you were to right click on that track again?</description></item><item><title>Overuse of the Var keyword</title><link>https://andydote.co.uk/2009/06/29/overuse-of-the-var-keyword/</link><pubDate>Mon, 29 Jun 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/06/29/overuse-of-the-var-keyword/</guid><description>When I first got hold of VS2008, and had a play with the new version of C# I loved the Var keyword. To me the most amazing thing was no more declarations like this:
System.Text.RegularExpressions.Regex rx = new System.Text.RegularExpressions.Regex(); Instead I could write the following:
var rx = new System.Text.RegularExpressions.Regex(); Making it akin to VB developers being able to write:
Dim rx As New System.Text.RegularExpressions.Regex() (I have had however to cope with a coding standard that explicitly forbid this declaration in VB&amp;hellip;Backwards or what?</description></item><item><title>Coming From Something as opposed to Going To Something</title><link>https://andydote.co.uk/2009/06/19/coming-from-something-as-opposed-to-going-to-something/</link><pubDate>Fri, 19 Jun 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/06/19/coming-from-something-as-opposed-to-going-to-something/</guid><description>Over the last week I have noticed myself preferring methods being called IntegerFromString rather than StringToInteger. Is sometimes takes me a little longer to read (only a few milliseconds, mind) but I think I am getting more used to it, and I do think it enhances readability.
The main point for readability comes from the fact that I work a lot (in my spare time when coding) on graphics processing in GDI.</description></item><item><title>Fluent Validation</title><link>https://andydote.co.uk/2009/06/12/fluent-validation/</link><pubDate>Fri, 12 Jun 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/06/12/fluent-validation/</guid><description>A few days a go i was going through my bookmarks, and came accross this post on the GetPaint.Net blog about using a fluent interface for parameter validation.
After reading the article, I tried the code out at home, and was very impressed. Not only does it read well, but also does not create any objects untill a piece of validation fails. Very nice.
However i wanted to use this at work, and this presented me with a problem.</description></item><item><title>Microcontrollers for MenuItems</title><link>https://andydote.co.uk/2009/05/29/microcontrollers-for-menuitems/</link><pubDate>Fri, 29 May 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/05/29/microcontrollers-for-menuitems/</guid><description>I have been working my way through Jeremy Miller&amp;rsquo;s excellent Build Your Own CAB Series (which would be even better if he felt like finishing!) and was very interested by the article on controlling menus with Microcontrollers.
After reading it and writing a version of it myself, I came to the conclusion that some parts of it seem to be wrong. All of the permissioning is done based on the menu items which fire ICommands, and several menu items could use the same ICommand.</description></item><item><title>Generics to the rescue! Again!</title><link>https://andydote.co.uk/2009/05/22/generics-to-the-rescue-again/</link><pubDate>Fri, 22 May 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/05/22/generics-to-the-rescue-again/</guid><description>I was writing a component at work that has many events that all need to be thread safe, and was getting annoyed at the amount of duplicate code I was writing:
Public Event FilterStart(ByVal sender As Object, ByVal e As EventArgs) &amp;#39;... Private Delegate Sub OnFilterCompleteDelegate(ByVal sender As Object, ByVal e As FilterCompleteEventArgs) &amp;#39;... Private Sub OnFilterComplete(ByVal sender As Object, ByVal e As DataAccess.LoadEventArgs) If _parent.InvokeRequired Then _parent.Invoke(new OnFilterCompleteDelegate(AddressOf OnFilterComplete), new Object() {sender, e}) Else RaiseEvent FullResultsStart(sender, e) End If End Sub &amp;#39;.</description></item><item><title>Finally, I have used a Model View Controller!</title><link>https://andydote.co.uk/2009/05/18/finally-i-have-used-a-model-view-controller/</link><pubDate>Mon, 18 May 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/05/18/finally-i-have-used-a-model-view-controller/</guid><description>Today I actually managed to use a Model View Controller in an application. I have been looking for an opportunity to use one fore a while, and have been reading a lot about them (Jeremy Miller&amp;rsquo;s Build Your Own CAB Series has been a very good guide).
The type of MVC I like most (so far) is the Passive View type, where the View does almost nothing, and has no link to the Model:</description></item><item><title>Creating Non resizable controls</title><link>https://andydote.co.uk/2008/04/13/creating-non-resizable-controls/</link><pubDate>Sun, 13 Apr 2008 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2008/04/13/creating-non-resizable-controls/</guid><description>A control I was recently developing required being non-resizable when on the form. When the application is running, this would be easy enough, just set its AutoSize property to False, and don&amp;rsquo;t dock the control.
However, this leaves the problem of resizing in the designer. You could override the resize event of the control, but for reasons outlined earlier, such as flickering, I decided against this.
Somewhere on the internet (where else&amp;hellip;?</description></item><item><title>VB.NET &amp;amp; C# Fixed height User Controls</title><link>https://andydote.co.uk/2008/03/29/vbnet-c-fixed-height-user-controls/</link><pubDate>Sat, 29 Mar 2008 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2008/03/29/vbnet-c-fixed-height-user-controls/</guid><description>Another problem I came across recently was fixed height user controls. Someone at work had created a fixed height user control, by putting the following code in the paint event:
Me.Width = 20 Now while for the majority of cases this works, it doesn&amp;rsquo;t if you dock the control to the left or right of the form, as each time the Layout Engine tries to stick the top of the control to the top of the parent and the bottom of the control to the bottom of the parent, it fires the Paint() event.</description></item></channel></rss>