<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>aspnetcore on Andy Dote</title><link>https://andydote.co.uk/tags/aspnetcore/</link><description>Recent content in aspnetcore on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 22 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/aspnetcore/rss.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Custom Aspnet Core ModelBinders</title><link>https://andydote.co.uk/2017/09/22/implemeting-custom-aspnetcore-modelbinders/</link><pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/09/22/implemeting-custom-aspnetcore-modelbinders/</guid><description>This post is a summary of a stream I did last night where I implemented all of this. If you want to watch me grumble my way through it, it&amp;rsquo;s available on YouTube here.
In my Crispin project, I wanted the ability to support loading Toggles by both name and ID, for all operations. As I use mediator to send messages from my controllers to the handlers in the domain, this means that I had to either:</description><content:encoded><![CDATA[<p>This post is a summary of a <a href="https://twitch.tv/pondidum">stream</a> I did last night where I implemented all of this.  If you want to watch me grumble my way through it, it&rsquo;s <a href="https://www.youtube.com/watch?v=hR213Oxj_xI">available on YouTube here</a>.</p>
<p>In my <a href="https://github.com/pondidum/crispin">Crispin</a> project, I wanted the ability to support loading Toggles by both name and ID, for all operations.  As I use mediator to send messages from my controllers to the handlers in the domain, this means that I had to either:</p>
<ul>
<li>create separate request types for loading by name and loading by id</li>
<li>have both an <code>ID</code> and <code>Name</code> property on each method</li>
</ul>
<p>I didn&rsquo;t like the sound of either of these as both involve more typing than I want to do, and the second variant has the added downside of causing a lot of <code>if</code> statements in the handlers, as you have to work out which is set before loading.  Not to mention the duplication of the load toggle logic in every handler.</p>
<p>The solution I came up with was to use some inheritance, a static factory, some method hiding, and a custom <code>IModelBinder</code>.</p>
<h2 id="togglelocator">ToggleLocator</h2>
<p>I started off by having an <code>abstract</code> base class called <code>ToggleLocator</code>.  To start with, it just has two static methods for creating an instance of <code>ToggleLocator</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ToggleLocator</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ToggleLocator Create(Guid toggleID) =&gt; <span style="color:#66d9ef">new</span> ToggleLocatorByID(toggleID);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> ToggleLocator Create(<span style="color:#66d9ef">string</span> toggleName) =&gt; <span style="color:#66d9ef">new</span> ToggleLocatorByName(toggleName);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As this is going to be used in both Query handlers and Command handlers, I need to be able to load the Toggle (the EventSourced AggregateRoot), and the ToggleView (the projected current state of the AggregateRoot).  So we add two <code>abstract</code> methods to the <code>ToggleLocator</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">internal</span> <span style="color:#66d9ef">abstract</span> ToggleView LocateView(IStorageSession session);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">internal</span> <span style="color:#66d9ef">abstract</span> Toggle LocateAggregate(IStorageSession session);
</span></span></code></pre></div><p>Note that not only are these two methods <code>abstract</code>, they are also <code>internal</code> - we don&rsquo;t want anything outside the domain to know about how a toggle is loaded.  I was considering using an privately implemented interface to do this method hiding, but didn&rsquo;t see the point as I can acomplish the same using the internal methods.</p>
<p>We can now write two implementations of the <code>ToggleLocator</code>.  First up is the <code>ToggleLocatorByID</code>, which is very straight forward to implement; we use the ID to load the AggregateRoot directly, and the <code>AllToggles</code> view can be queried by ID to fetch the view version also.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ToggleLocatorByID</span> : ToggleLocator
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> ToggleID _toggleID;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> ToggleLocatorByID(ToggleID toggleID)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		_toggleID = toggleID;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">internal</span> <span style="color:#66d9ef">override</span> ToggleView LocateView(IStorageSession session) =&gt; session
</span></span><span style="display:flex;"><span>		.LoadProjection&lt;AllToggles&gt;()
</span></span><span style="display:flex;"><span>		.Toggles
</span></span><span style="display:flex;"><span>		.SingleOrDefault(view =&gt; view.ID == _toggleID);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">internal</span> <span style="color:#66d9ef">override</span> Toggle LocateAggregate(IStorageSession session) =&gt; session
</span></span><span style="display:flex;"><span>		.LoadAggregate&lt;Toggle&gt;(_toggleID);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The more interesting class to implement is <code>ToggleLocatorByName</code>, as this needs to be able to load an AggregateRoot by name; something which is not directly supported.  So to do this we fetch the <code>ToggleView</code> first, and then use the <code>ID</code> property so we can load the <code>Toggle</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ToggleLocatorByName</span> : ToggleLocator
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> <span style="color:#66d9ef">string</span> _toggleName;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> ToggleLocatorByName(<span style="color:#66d9ef">string</span> toggleName)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		_toggleName = toggleName;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">internal</span> <span style="color:#66d9ef">override</span> ToggleView LocateView(IStorageSession session) =&gt; session
</span></span><span style="display:flex;"><span>		.LoadProjection&lt;AllToggles&gt;()
</span></span><span style="display:flex;"><span>		.Toggles
</span></span><span style="display:flex;"><span>		.SingleOrDefault(t =&gt; t.Name.Equals(_toggleName, StringComparison.OrdinalIgnoreCase));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">internal</span> <span style="color:#66d9ef">override</span> Toggle LocateAggregate(IStorageSession session)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> view = LocateView(session);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> view != <span style="color:#66d9ef">null</span>
</span></span><span style="display:flex;"><span>			? session.LoadAggregate&lt;Toggle&gt;(view.ID)
</span></span><span style="display:flex;"><span>			: <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>All this means that the handlers have no conditionals for loading, they just call the relevant <code>.Locate</code> method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> Task&lt;UpdateToggleTagsResponse&gt; ModifyTags(ToggleLocator locator, Action&lt;Toggle&gt; modify)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> session = _storage.BeginSession())
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> toggle = locator.LocateAggregate(session);
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">//or</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> view  = locator.LocateView(session);
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">//...</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And in the controllers, we have separate action methods for each route:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[Route(&#34;name/{toggleName}/tags/{tagName}&#34;)]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">[HttpPut]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task&lt;IActionResult&gt; PutTag(<span style="color:#66d9ef">string</span> toggleName, <span style="color:#66d9ef">string</span> tagName)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> request = <span style="color:#66d9ef">new</span> AddToggleTagRequest(ToggleLocator.Create(toggleName), tagName);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> response = <span style="color:#66d9ef">await</span> _mediator.Send(request);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> JsonResult(response.Tags);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">[Route(&#34;id/{toggleID}/tags/{tagName}&#34;)]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">[HttpPut]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task&lt;IActionResult&gt; PutTag(Guid toggleID, <span style="color:#66d9ef">string</span> tagName)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> request = <span style="color:#66d9ef">new</span> AddToggleTagRequest(ToggleLocator.Create(ToggleID.Parse(toggleID)), tagName);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> response = <span style="color:#66d9ef">await</span> _mediator.Send(request);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> JsonResult(response.Tags);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>But that is still more duplication than I would like, so lets see if we can resolve this with a custom <code>IModelBinder</code>.</p>
<h2 id="custom-imodelbinder-for-togglelocator">Custom IModelBinder for ToggleLocator</h2>
<p>To make a custom model binder, we need to implement two interfaces: <code>IModelBinderProvider</code> and <code>IModelBinder</code>.  I am not sure why <code>IModelBinderProvider</code> exists to be perfectly honest, but you need it, and as it is doing nothing particularly interesting, I decided to implement both interfaces in the one class, and just return <code>this</code> from <code>IModelBinderProvider.GetBinder</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ToggleLocatorBinder</span> : IModelBinderProvider
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> IModelBinder GetBinder(ModelBinderProviderContext context)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (context.Metadata.ModelType == <span style="color:#66d9ef">typeof</span>(ToggleLocator))
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can then implement the second interface, <code>IModelBinder</code>.  Here we check (again) that the parameter is a <code>ToggleLocator</code>, fetch the value which came from the route (or querystring, thanks to the <code>.ValueProvider</code> property).</p>
<p>All I need to do here is try and parse the value as a <code>Guid</code>.  If it parses successfully, we create a <code>ToggleLocatorByID</code> instance, otherwise create a <code>ToggleLocatorByName</code> instance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ToggleLocatorBinder</span> : IModelBinderProvider, IModelBinder
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> Task BindModelAsync(ModelBindingContext bindingContext)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (bindingContext.ModelType != <span style="color:#66d9ef">typeof</span>(ToggleLocator))
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> Task.CompletedTask;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> <span style="color:#66d9ef">value</span> = bindingContext.ValueProvider.GetValue(bindingContext.FieldName);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> guid = Guid.Empty;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> locator = Guid.TryParse(<span style="color:#66d9ef">value</span>.FirstValue, <span style="color:#66d9ef">out</span> guid)
</span></span><span style="display:flex;"><span>			? ToggleLocator.Create(ToggleID.Parse(guid))
</span></span><span style="display:flex;"><span>			: ToggleLocator.Create(<span style="color:#66d9ef">value</span>.FirstValue);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		bindingContext.Result = ModelBindingResult.Success(locator);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> Task.CompletedTask;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We add this into our MVC registration code at the beginning of the <code>ModelBinderProviders</code> collection, as MVC will use the first binder which can support the target type, and there is a binder in the collection somewhere which will handle anything which inherits object&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>services.AddMvc(options =&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	options.ModelBinderProviders.Insert(<span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">new</span> ToggleLocatorBinder());
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Now we can reduce our action methods down to one which handles both routes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[Route(&#34;id/{id}/tags/{tagName}&#34;)]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">[Route(&#34;name/{id}/tags/{tagName}&#34;)]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">[HttpPut]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task&lt;IActionResult&gt; PutTag(ToggleLocator id, <span style="color:#66d9ef">string</span> tagName)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> request = <span style="color:#66d9ef">new</span> AddToggleTagRequest(id, tagName);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> response = <span style="color:#66d9ef">await</span> _mediator.Send(request);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> JsonResult(response.Tags);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Much better, no duplication, and no (obvious) if statements!</p>
]]></content:encoded></item></channel></rss>