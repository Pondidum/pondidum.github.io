<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>dotnet on Andy Dote</title><link>https://andydote.co.uk/tags/dotnet/</link><description>Recent content in dotnet on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 26 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/dotnet/rss.xml" rel="self" type="application/rss+xml"/><item><title>Database Column Prefixes</title><link>https://andydote.co.uk/2025/01/26/database-column-prefixes/</link><pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2025/01/26/database-column-prefixes/</guid><description>Back in a previous company (the same place as where Debugging GDI Handle Leaks happened), there was an interesting convention in the database: all tables had a unique 3-letter prefix assigned to them, and all columns in that table must start with the prefix, which I&amp;rsquo;ve written about before.
For example, a person table would have the prefix PEO, and the columns would be PEO_PersonID, PEO_FirstName, PEO_DateOfBirth, etc. When you wanted to create a new table, you opened the shared Excel sheet, added your table to the bottom, and made up a prefix that wasn&amp;rsquo;t already in the sheet.</description><content:encoded><![CDATA[<p>Back in a previous company (the same place as where <a href="/2025/01/11/debugging-gdi-handles/">Debugging GDI Handle Leaks</a> happened), there was an interesting convention in the database: all tables had a unique 3-letter prefix assigned to them, and all columns in that table <strong>must</strong> start with the prefix, which I&rsquo;ve written about <a href="/2014/03/29/using-a-micro-orm-to-decouple-your-db-access/">before</a>.</p>
<p>For example, a <code>person</code> table would have the prefix <code>PEO</code>, and the columns would be <code>PEO_PersonID</code>, <code>PEO_FirstName</code>, <code>PEO_DateOfBirth</code>, etc.  When you wanted to create a new table, you opened the shared Excel sheet, added your table to the bottom, and made up a prefix that wasn&rsquo;t already in the sheet.  Even link tables (for many-to-many relationships) were not immune to this rule.</p>
<p>With over 100 tables in the database, finding a prefix which was vaguely related to the table&rsquo;s purpose became harder and harder, especially for common letters, such as <code>C</code> which off the top of my head had tables like <code>Companies</code>, <code>Candidates</code>, <code>Contacts</code>, <code>Categories</code>,<code>Contracts</code>, <code>ContractAttachments</code>, <code>ContractExceptions</code>, and a bunch of link tables to go with them all.</p>
<p>When asked, the DBA said that the reason the convention existed was to prevent column name conflicts when joining tables; all columns would be globally unique!  This made some level of sense for simple queries:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">select</span>  CAN_CandidateID,
</span></span><span style="display:flex;"><span>        PEO_FirstName,
</span></span><span style="display:flex;"><span>        PEO_LastName
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">from</span>    candidates
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    people <span style="color:#66d9ef">on</span> CAN_PersonID <span style="color:#f92672">=</span> PEO_PersonID
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">where</span>   CAN_CandidateID <span style="color:#f92672">=</span> <span style="color:#f92672">@</span>candidateID
</span></span></code></pre></div><p>The problem was that this didn&rsquo;t really solve the issue of columns not being ambiguous; queries often needed to join to the person table mulitple times, often via another table:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">select</span>  CAN_CandidateID,
</span></span><span style="display:flex;"><span>        peo.PEO_FirstName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> peo.PEO_LastName <span style="color:#66d9ef">as</span> <span style="color:#e6db74">&#39;name&#39;</span>,
</span></span><span style="display:flex;"><span>        creatorperson.PEO_FirstName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> creatorperson.PEO_LastName <span style="color:#66d9ef">as</span> <span style="color:#e6db74">&#39;creator&#39;</span>,
</span></span><span style="display:flex;"><span>        modifierperson.PEO_FirstName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> modifierperson.PEO_LastName <span style="color:#66d9ef">as</span> <span style="color:#e6db74">&#39;modifier&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">from</span>    candidates
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    people peo             <span style="color:#66d9ef">on</span> CAN_PersonID <span style="color:#f92672">=</span> peo.PEO_PersonID
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    users creator          <span style="color:#66d9ef">on</span> creator.USR_UserID <span style="color:#f92672">=</span> CAN_CreatedBy
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    people creatorperson   <span style="color:#66d9ef">on</span> creatorperson.PEO_PersonID <span style="color:#f92672">=</span> creator.USR_PersonID
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    users modifier         <span style="color:#66d9ef">on</span> modifier.USR_UserID <span style="color:#f92672">=</span> CAN_ModifiedBy
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    people modifierperson  <span style="color:#66d9ef">on</span> modifierperson.PEO_PersonID <span style="color:#f92672">=</span> creator.USR_PersonID
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">where</span>   CAN_CandidateID <span style="color:#f92672">=</span> <span style="color:#f92672">@</span>candidateID
</span></span></code></pre></div><p>A thing of pure beauty, as you can see.  Not only were all the sql statements far longer than they needed to be, and you often needed to figure out some obscure prefixes, you end up &ldquo;stuttering&rdquo; with things like <code>person.PEO_PersonID</code> - how many times do I need to know this is a PersonID in a single sentence?</p>
<p>The primary key of each table had to include the table name too.  I&rsquo;m not actually convinced this is a bad idea; having a bunch of columns called <code>id</code> doesn&rsquo;t really make things clear when joining 6 tables.</p>
<p>The interesting part of this is that it&rsquo;s all useless; the database server we used supported table aliases (as seen above), so we could use those and drop the prefixes entirely:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">select</span>  CandidateID,
</span></span><span style="display:flex;"><span>        p.FirstName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> p.LastName <span style="color:#66d9ef">as</span> <span style="color:#e6db74">&#39;name&#39;</span>,
</span></span><span style="display:flex;"><span>        creatorperson.FirstName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> creatorperson.LastName <span style="color:#66d9ef">as</span> <span style="color:#e6db74">&#39;creator&#39;</span>,
</span></span><span style="display:flex;"><span>        modifierperson.FirstName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> modifierperson.LastName <span style="color:#66d9ef">as</span> <span style="color:#e6db74">&#39;modifier&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">from</span>    candidates <span style="color:#66d9ef">c</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    people p               <span style="color:#66d9ef">on</span> <span style="color:#66d9ef">c</span>.PersonID <span style="color:#f92672">=</span> p.PersonID
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    users creator          <span style="color:#66d9ef">on</span> creator.UserID <span style="color:#f92672">=</span> <span style="color:#66d9ef">c</span>.CreatedBy
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    people creatorperson   <span style="color:#66d9ef">on</span> creatorperson.PersonID <span style="color:#f92672">=</span> creator.PersonID
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    users modifier         <span style="color:#66d9ef">on</span> modifier.UserID <span style="color:#f92672">=</span> <span style="color:#66d9ef">c</span>.ModifiedBy
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">join</span>    people modifierperson  <span style="color:#66d9ef">on</span> modifierperson.PersonID <span style="color:#f92672">=</span> creator.PersonID
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">where</span>   CandidateID <span style="color:#f92672">=</span> <span style="color:#f92672">@</span>candidateID
</span></span></code></pre></div><p>Shorter, at least.</p>
<p>The table relationships didn&rsquo;t always help matters either; the idea of the <code>Person</code> table was that a person could exist as multiple entities in our system; they could be a user, a candidate, and a contact.  Not that this actually happened; they had unique person records for each of their entities.</p>
<p>The table prefixes also meant that when we wanted to use a microORM (<a href="https://www.learndapper.com/">Dapper</a>, which <strong>only</strong> maps queries into objects), we had to make every query alias every column, otherwise our property names would have to also include the prefixes, and we really didn&rsquo;t want the column prefixes polluting the rest of the domain!</p>
<p>We never got rid of this scheme in the primary database; the change wasn&rsquo;t worth doing.  If we had started making new tables without prefixes, we would still have had 100+ old tables with the prefixes, and no chance of fixing them as usually it involved dropping and recreating the tables.  Definitely not worth the hassle.</p>
<p>However, when we started creating separate databases for services which didn&rsquo;t rely on any data in the main database, the column prefix was not used.  In those services, everything felt a little smoother and a little less noisy.</p>
]]></content:encoded></item><item><title>Debugging GDI Handle Leaks</title><link>https://andydote.co.uk/2025/01/11/debugging-gdi-handles/</link><pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2025/01/11/debugging-gdi-handles/</guid><description>Many years ago, I was working on a dotnet Windows Forms application. The application had many issues overall: memory leaks, random crashes, data loss, and in this case, the &amp;ldquo;red x&amp;rdquo; problem.
The problem showed up at random, and instead of a window, dialogue, or control being rendered, it would be replaced with a white box with a red outline and red diagonal cross, and I think some error text in one corner, saying something about GDI handles.</description><content:encoded><![CDATA[<p>Many years ago, I was working on a dotnet Windows Forms application.  The application had many issues overall: memory leaks, random crashes, data loss, and in this case, the &ldquo;red x&rdquo; problem.</p>
<p>The problem showed up at random, and instead of a window, dialogue, or control being rendered, it would be replaced with a white box with a red outline and red diagonal cross, and I <em>think</em> some error text in one corner, saying something about GDI handles.  The issue itself didn&rsquo;t seem to be related to either time or memory usage; when the app crashed, we got an error report (usually), and that never suggested that the application had been open particularly long or that it was using an excessive amount of memory.</p>
<p>I had been given the job of fixing this problem (and others), so armed with a memory profiler (RedGate&rsquo;s, if I recall correctly), I went to work.  With no given reproduction, it was hard.  Some searching had shown that GDI handles were created when doing custom control painting; usually, this would be a fairly strong indicator of where to look, but in the case of this application, nearly all controls were custom-drawn, and there were many.</p>
<p>After days of taking memory snapshots and running comparisons, the only thing I was really noticing was that the number of font instances in use seemed high and got higher whenever I opened dialogues; it never went down again.</p>
<p>So, something to do with fonts.  Reading through our common control base code, I noticed this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ControlBase</span> : Control
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Font _normal = <span style="color:#66d9ef">new</span> Font(<span style="color:#e6db74">&#34;some-font&#34;</span>, <span style="color:#ae81ff">12</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Font _bold = <span style="color:#66d9ef">new</span> Font(<span style="color:#e6db74">&#34;some-font&#34;</span>, <span style="color:#ae81ff">12</span>, Options.Bold);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> Font _italic = <span style="color:#66d9ef">new</span> Font(<span style="color:#e6db74">&#34;some-font&#34;</span>, <span style="color:#ae81ff">12</span>, Options.Italic);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// ...</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This snippet means that every single control had 3 instances of a <code>Font</code>, which was never disposed (no <code>_normal.Dispose()</code> in the <code>ControlBase.Dispose()</code> function.)  My first reaction was to add the three <code>.Dispose()</code> calls, but realising the fonts were never modified after creation led me to make them <code>static</code> so that all control instances shared the same font instances.</p>
<p>A week or two of work, and the only output was adding 3x <code>static</code> words to the codebase - but the effect was that our application went from using 1000s of font instances to 3.  Quite the saving - and we never had the red X problem again!</p>
<p>The first lesson I took from this was that memory profiling is hard - running the app, taking a snapshot, running a bit more, taking a snapshot, etc. was not a fun feedback loop, especially as running with the profile slowed everything down massively.</p>
<p>The second, and probably more important, lesson was that the number of lines changed doesn&rsquo;t reflect the amount of effort that went into changing those lines.</p>
]]></content:encoded></item></channel></rss>