<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>s3 on Andy Dote</title><link>https://andydote.co.uk/tags/s3/</link><description>Recent content in s3 on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 12 Jul 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/s3/rss.xml" rel="self" type="application/rss+xml"/><item><title>Terraform, Kinesis Streams, Lambda and IAM problems</title><link>https://andydote.co.uk/2017/07/12/terraform-kinesis-lambda-iam/</link><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/07/12/terraform-kinesis-lambda-iam/</guid><description>I hit an problem the recently with Terraform, when I was trying to hook up a Lambda Trigger to a Kinesis stream. Both the lambda itself, and the stream creation succeeded within Terraform, but the trigger would just stay stuck on &amp;ldquo;creating&amp;hellip;&amp;rdquo; for at least 5 minutes, before I got bored of waiting and killed the process. Several attempts at doing this had the same issue.
The code looked something along the lines of this:</description><content:encoded><![CDATA[<p>I hit an problem the recently with Terraform, when I was trying to hook up a Lambda Trigger to a Kinesis stream.  Both the lambda itself, and the stream creation succeeded within Terraform, but the trigger would just stay stuck on &ldquo;creating&hellip;&rdquo; for at least 5 minutes, before I got bored of waiting and killed the process.  Several attempts at doing this had the same issue.</p>
<p>The code looked something along the lines of this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>data <span style="color:#e6db74">&#34;archive_file&#34;</span> <span style="color:#e6db74">&#34;consumer_lambda&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;zip&#34;</span>
</span></span><span style="display:flex;"><span>  source_dir <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./js/consumer&#34;</span>
</span></span><span style="display:flex;"><span>  output_path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./build/consumer.zip&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>resource <span style="color:#e6db74">&#34;aws_lambda_function&#34;</span> <span style="color:#e6db74">&#34;kinesis_consumer&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>data.archive_file.consumer_lambda.output_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  function_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;kinesis_consumer&#34;</span>
</span></span><span style="display:flex;"><span>  role <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>aws_iam_role.consumer_role.arn<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  handler <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;index.handler&#34;</span>
</span></span><span style="display:flex;"><span>  runtime <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nodejs6.10&#34;</span>
</span></span><span style="display:flex;"><span>  source_code_hash <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>base64sha256(file(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>data.archive_file.consumer_lambda.output_path<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>))<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  timeout <span style="color:#f92672">=</span> <span style="color:#ae81ff">300</span> <span style="color:#75715e"># 5 mins</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>resource <span style="color:#e6db74">&#34;aws_kinesis_stream&#34;</span> <span style="color:#e6db74">&#34;replay_stream&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;replay_stream&#34;</span>
</span></span><span style="display:flex;"><span>  shard_count <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>resource <span style="color:#e6db74">&#34;aws_lambda_event_source_mapping&#34;</span> <span style="color:#e6db74">&#34;kinesis_replay_lambda&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  event_source_arn <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>aws_kinesis_stream.replay_stream.arn<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  function_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>aws_lambda_function.kinesis_consumer.arn<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  starting_position <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TRIM_HORIZON&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>resource <span style="color:#e6db74">&#34;aws_iam_role&#34;</span> <span style="color:#e6db74">&#34;consumer_role&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;consumer_role&#34;</span>
</span></span><span style="display:flex;"><span>  assume_role_policy <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;&lt;EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Version&#34;: &#34;2012-10-17&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Statement&#34;: [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Principal&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;Service&#34;: [&#34;lambda.amazonaws.com&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Effect&#34;: &#34;Allow&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>resource <span style="color:#e6db74">&#34;aws_iam_role_policy&#34;</span> <span style="color:#e6db74">&#34;consumer_role_policy&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;consumer_role_policy&#34;</span>
</span></span><span style="display:flex;"><span>  role <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>aws_iam_role.consumer_role.id<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  policy <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;&lt;EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Version&#34;: &#34;2012-10-17&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Statement&#34;: [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Sid&#34;: &#34;Stmt1493060054000&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Effect&#34;: &#34;Allow&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Action&#34;: [&#34;lambda:InvokeAsync&#34;, &#34;lambda:InvokeFunction&#34;],
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Resource&#34;: [&#34;arn:aws:lambda:*:*:*&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Effect&#34;: &#34;Allow&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Action&#34;: [&#34;s3:GetObject*&#34;, &#34;s3:PutObject*&#34;],
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Resource&#34;: [&#34;arn:aws:s3:::*&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>I decided to try creating the trigger manually in AWS, which gave me the following error:</p>
<blockquote>
<p>There was an error creating the trigger: Cannot access stream arn:aws:kinesis:eu-west-1:586732038447:stream/test. Please ensure the role can perform the <strong>GetRecords</strong>, <strong>GetShardIterator</strong>, <strong>DescribeStream</strong>, and <strong>ListStreams</strong> Actions on your stream in IAM.</p>
</blockquote>
<p>All I had to do to fix this was to change my <code>consumer_role_policy</code> to include the relevant permissions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;Effect&#34;</span>: <span style="color:#e6db74">&#34;Allow&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;Action&#34;</span>: [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;kinesis:DescribeStream&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;kinesis:GetShardIterator&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;kinesis:GetRecords&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;kinesis:ListStreams&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;kinesis:PutRecords&#34;</span>
</span></span><span style="display:flex;"><span>    ],
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;Resource&#34;</span>: <span style="color:#e6db74">&#34;arn:aws:kinesis:*:*:*&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="takeaways">Takeaways</h2>
<ul>
<li><strong>Terraform could do with better errors</strong> - preferably in nice red text telling me I am doing things wrong!</li>
<li><strong>AWS told me exactly what was needed</strong> - Good error messages in AWS, so no need to spend hours googling which permissions would be needed.</li>
</ul>
]]></content:encoded></item><item><title>S3 Multi-File upload with Terraform</title><link>https://andydote.co.uk/2017/04/23/s3-multi-file-upload-terraform/</link><pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/04/23/s3-multi-file-upload-terraform/</guid><description>Hosting a static website with S3 is really easy, especially from terraform:
First off, we want a public readable S3 bucket policy, but we want to apply this only to one specific bucket. To achive that we can use Terraform&amp;rsquo;s template_file data block to merge in a value:
{ &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Sid&amp;#34;: &amp;#34;PublicReadGetObject&amp;#34;, &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Principal&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Action&amp;#34;: [ &amp;#34;s3:GetObject&amp;#34; ], &amp;#34;Resource&amp;#34;: [ &amp;#34;arn:aws:s3:::${bucket_name}/*&amp;#34; ] } ] } As you can see the interpolation syntax is pretty much the same as how you use variables in terraform itself.</description><content:encoded><![CDATA[<p>Hosting a static website with S3 is really easy, especially from terraform:</p>
<p>First off, we want a public readable S3 bucket policy, but we want to apply this only to one specific bucket.  To achive that we can use Terraform&rsquo;s <code>template_file</code> data block to merge in a value:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Version&#34;</span>: <span style="color:#e6db74">&#34;2012-10-17&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Statement&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Sid&#34;</span>: <span style="color:#e6db74">&#34;PublicReadGetObject&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Effect&#34;</span>: <span style="color:#e6db74">&#34;Allow&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Principal&#34;</span>: <span style="color:#e6db74">&#34;*&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Action&#34;</span>: [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;s3:GetObject&#34;</span>
</span></span><span style="display:flex;"><span>      ],
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;Resource&#34;</span>: [
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;arn:aws:s3:::${bucket_name}/*&#34;</span>
</span></span><span style="display:flex;"><span>      ]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As you can see the interpolation syntax is pretty much the same as how you use variables in terraform itself.  Next we define a <code>template_file</code> to do the transformation.  As the bucket name is going to be used many times, we extract that into a <code>variable</code> block also:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmake" data-lang="cmake"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">variable</span> <span style="color:#960050;background-color:#1e0010">&#34;bucket&#34;</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">default</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;examplebucket&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">data</span> <span style="color:#960050;background-color:#1e0010">&#34;template_file&#34;</span> <span style="color:#960050;background-color:#1e0010">&#34;s3_public_policy&#34;</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">template</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;${</span>file(<span style="color:#e6db74">&#34;policies/s3-public.json&#34;</span>)<span style="color:#960050;background-color:#1e0010">}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">vars</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#960050;background-color:#1e0010">bucket_name</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;${var.bucket}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">}
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}
</span></span></span></code></pre></div><p>Next we want to create the S3 bucket and set it to be a static website, which we can do using the <code>website</code> sub block.  For added usefulness, we will also define an <code>output</code> to show the website url on the command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmake" data-lang="cmake"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#960050;background-color:#1e0010">&#34;aws_s3_bucket&#34;</span> <span style="color:#960050;background-color:#1e0010">&#34;static_site&#34;</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">bucket</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;${var.bucket}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">acl</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;public-read&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">policy</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;${data.template_file.s3_public_policy.rendered}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">website</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#960050;background-color:#1e0010">index_document</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;index.html&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">}
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">output</span> <span style="color:#960050;background-color:#1e0010">&#34;url&#34;</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">value</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;${aws_s3_bucket.static_site.bucket}.s3-website-${var.region}.amazonaws.com&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}
</span></span></span></code></pre></div><h2 id="single-file-upload">Single File Upload</h2>
<p>If you just want one file in the website (say the <code>index.html</code> file), then you can add the following block.  Just make sure the <code>key</code> property matches the <code>index_document</code> name in the <code>aws_s3_bucket</code> block.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmake" data-lang="cmake"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#960050;background-color:#1e0010">&#34;aws_s3_bucket_object&#34;</span> <span style="color:#960050;background-color:#1e0010">&#34;index&#34;</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">bucket</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;${aws_s3_bucket.static_site.bucket}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">key</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;index.html&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">source</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;src/index.html&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">content_type</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;text/html&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">etag</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;${</span>md5(<span style="color:#e6db74">file(</span><span style="color:#e6db74">&#34;src/index.html&#34;</span>)<span style="color:#960050;background-color:#1e0010">)}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}
</span></span></span></code></pre></div><h2 id="multi-file-upload">Multi File Upload</h2>
<p>Most websites need more than one file to be useful, and while we could write out an <code>aws_s3_bucket_object</code> block for every file, that seems like a lot of effort.  Other options include manually uploading the files to S3, or using the aws cli to do it.  While both methods work, they&rsquo;re error prone - you need to specify the <code>content_type</code> for each file for them to load properly, and you can&rsquo;t change this property once a file is uploaded.</p>
<p>To get around this, I add one more variable to my main terraform file, and generate a second file with all the <code>aws_s3_bucket_object</code> blocks in I need.</p>
<p>The added <code>variable</code> is a lookup for mime types:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmake" data-lang="cmake"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">variable</span> <span style="color:#960050;background-color:#1e0010">&#34;mime_types&#34;</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">default</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#960050;background-color:#1e0010">htm</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;text/html&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#960050;background-color:#1e0010">html</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;text/html&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#960050;background-color:#1e0010">css</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;text/css&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#960050;background-color:#1e0010">js</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;application/javascript&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#960050;background-color:#1e0010">map</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;application/javascript&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#960050;background-color:#1e0010">json</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;application/json&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">}
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}
</span></span></span></code></pre></div><p>I then create a shell script which will write a new file containing a <code>aws_s3_bucket_object</code> block for each file in the <code>src</code> directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>SRC<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;src/&#34;</span>
</span></span><span style="display:flex;"><span>TF_FILE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;files.tf&#34;</span>
</span></span><span style="display:flex;"><span>COUNT<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cat &gt; $TF_FILE <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>find $SRC -iname <span style="color:#e6db74">&#39;*.*&#39;</span> | <span style="color:#66d9ef">while</span> read path; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    cat &gt;&gt; $TF_FILE <span style="color:#e6db74">&lt;&lt; EOM
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">resource &#34;aws_s3_bucket_object&#34; &#34;file_$COUNT&#34; {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  bucket = &#34;\${aws_s3_bucket.static_site.bucket}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  key = &#34;${path#$SRC}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  source = &#34;$path&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  content_type = &#34;\${lookup(var.mime_types, &#34;${path##*.}&#34;)}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  etag = &#34;\${md5(file(&#34;$path&#34;))}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOM</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    COUNT<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr $COUNT + 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><p>Now when I want to publish a static site, I just have to make sure I run <code>./files.sh</code> once before my <code>terraform plan</code> and <code>terraform apply</code> calls.</p>
<h2 id="caveats">Caveats</h2>
<p>This technique has one major drawback: it doesn&rsquo;t work well with updating an existing S3 bucket.  It won&rsquo;t remove files which are no longer in the terraform files, and can&rsquo;t detect file moves.</p>
<p>However, if you&rsquo;re happy with a call to <code>terraform destroy</code> before applying, this will work fine.  I use it for a number of test sites which I don&rsquo;t tend to leave online very long, and for scripted aws infrastructure that I give out to other people so they can run their own copy.</p>
]]></content:encoded></item></channel></rss>