<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>honeycomb on Andy Dote</title><link>https://andydote.co.uk/tags/honeycomb/</link><description>Recent content in honeycomb on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 17 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/honeycomb/rss.xml" rel="self" type="application/rss+xml"/><item><title>Pulumi Conditional Infrastructure for Speed</title><link>https://andydote.co.uk/2022/07/17/pulumi-faster-processes/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2022/07/17/pulumi-faster-processes/</guid><description>One of the reasons I prefer Pulumi over Terraform is the additional control I have over my processes due to the fact that it&amp;rsquo;s a programming language.
For example, I have a CLI, that creates a cluster of machines for a user; the machines use IAM Authentication with Vault so that they can request certificates on boot. The trouble with this application is that it is slow; it takes 175 seconds on average to provision the machines, write the IAM information to Vault, and then re-run the cloud-init script on all the machines in the cluster (as when they first booted, the configuration hadn&amp;rsquo;t been written to Vault yet.</description><content:encoded><![CDATA[<p>One of the reasons I prefer <a href="https://pulumi.com">Pulumi</a> over <a href="https://terraform.io">Terraform</a> is the additional control I have over my processes due to the fact that it&rsquo;s a programming language.</p>
<p>For example, I have a CLI, that creates a cluster of machines for a user; the machines use IAM Authentication with <a href="https://www.vaultproject.io">Vault</a> so that they can request certificates on boot.  The trouble with this application is that it is slow; it takes 175 seconds on average to provision the machines, write the IAM information to Vault, and then re-run the cloud-init script on all the machines in the cluster (as when they first booted, the configuration hadn&rsquo;t been written to Vault yet.) so that they can request a certificate.  The process is roughly this:</p>
<ul>
<li>Create infrastructure</li>
<li>Write configuration to Vault</li>
<li>Wait for the machines to be ready</li>
<li>Wait for SSH</li>
<li>Re-run cloud-init</li>
</ul>
<p>The CLI can&rsquo;t write the configuration to Vault before the machines boot, as the configuration values are from the same infrastructure stack as the machines themselves.  You can see the process in the <a href="https://honeycomb.io">Honeycomb</a> trace UI (with more details about what infra is created thanks to my <a href="/2021/03/01/observability-with-infrastructure-as-code/">pulumi-honeycomb stream adaptor</a>):</p>
<p><img loading="lazy" src="pulumi-infra-slow.png" alt="pulumi trace showing execution time of 175 seconds"  />
</p>
<p>I don&rsquo;t want to make two separate stacks for this, one containing IAM Roles and other configuration data, the other containing all the other infrastructure (load balancers, auto-scale groups, etc.)  But what if I could dynamically change what the stack does?</p>
<p>By adding an <code>IsInit</code> property to the configuration of the stack, we can change the pulumi program to return early when the value of <code>IsInit</code> is <code>true</code>, meaning we only create the minimal amount of infrastructure for the configuration call to succeed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">DefineInfrastructure</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumi</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">cfg</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ClusterConfiguration</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">role</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">iam</span>.<span style="color:#a6e22e">NewRole</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">Name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;-iam-role&#34;</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">iam</span>.<span style="color:#a6e22e">RoleArgs</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">NamePrefix</span>:       <span style="color:#a6e22e">pulumi</span>.<span style="color:#a6e22e">String</span>(<span style="color:#a6e22e">Name</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">AssumeRolePolicy</span>: <span style="color:#a6e22e">allowEc2Json</span>,
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">iam</span>.<span style="color:#a6e22e">NewRolePolicy</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">Name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;-iam-policy-cluster&#34;</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">iam</span>.<span style="color:#a6e22e">RolePolicyArgs</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">NamePrefix</span>: <span style="color:#a6e22e">pulumi</span>.<span style="color:#a6e22e">String</span>(<span style="color:#a6e22e">Name</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Role</span>:       <span style="color:#a6e22e">role</span>.<span style="color:#a6e22e">ID</span>(),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Policy</span>:     <span style="color:#a6e22e">findMachinesJson</span>,
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Export</span>(<span style="color:#e6db74">&#34;role-arn&#34;</span>, <span style="color:#a6e22e">role</span>.<span style="color:#a6e22e">Arn</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">cfg</span>.<span style="color:#a6e22e">IsInit</span> {
</span></span><span style="display:flex; background-color:#3c3d38"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex; background-color:#3c3d38"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">asg</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">autoscaling</span>.<span style="color:#a6e22e">NewGroup</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">Name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;-asg&#34;</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">autoscaling</span>.<span style="color:#a6e22e">GroupArgs</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">LaunchConfiguration</span>: <span style="color:#a6e22e">createLaunchConfiguration</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">cfg</span>, <span style="color:#a6e22e">role</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">VpcZoneIdentifiers</span>:  <span style="color:#a6e22e">cfg</span>.<span style="color:#a6e22e">ZoneIdentifiers</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">DesiredCapacity</span>:     <span style="color:#a6e22e">cfg</span>.<span style="color:#a6e22e">ClusterSize</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MinSize</span>:             <span style="color:#a6e22e">cfg</span>.<span style="color:#a6e22e">ClusterSize</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MaxSize</span>:             <span style="color:#a6e22e">cfg</span>.<span style="color:#a6e22e">ClusterSize</span>,
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Export</span>(<span style="color:#e6db74">&#34;asg-name&#34;</span>, <span style="color:#a6e22e">asg</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now that the stack can be run to create only partial infrastructure, the process changes to this:</p>
<ul>
<li>Create minimal infrastructure</li>
<li>Write configuration to Vault</li>
<li>Create remaining infrastructure</li>
</ul>
<p>But is the new process faster?  I had hoped it would be a little faster, as waiting for cloud-init and SSH can take a while, and thankfully, it is significantly faster.  It takes on average 98 seconds, so around 77 seconds faster.</p>
<p><img loading="lazy" src="pulumi-infra-fast.png" alt="pulumi trace showing execution time of 98 seconds"  />
</p>
<p>Comparing the before and after traces, I can see that the additional pulumi call adds 20 seconds to the processes, but the <code>consul_configure</code> span drops from 100 seconds to 3.5, which is quite the speed increase.</p>
<h2 id="what-about-terraform">What about Terraform?</h2>
<p>This is still possible to do with a terraform stack, but not in a pleasant way; in pulumi I can return early from the infra function, but with terraform, I would have to add a <code>count = var.is_init ?  0 : 1</code> to every resource I didn&rsquo;t want to create up front, which quickly becomes unwieldy.</p>
<p>There is also the downside of not being able to embed the Terraform inside a CLI tool like I can with Pulumi.</p>
<p>Overall, I am happy with how this has turned out.  The diff for enabling this optimisation is 3 files changed, 15 insertions, 7 deletions, which included some explanatory comments!</p>
]]></content:encoded></item><item><title>Adding Observability to Vault</title><link>https://andydote.co.uk/2021/05/27/vault-observe/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/05/27/vault-observe/</guid><description>One of the things I like to do when setting up a Vault cluster is to visualise all the operations Vault is performing, which helps see usage patterns changing, whether there are lots of failed requests coming in, and what endpoints are receiving the most traffic.
While Vault has a lot of data available in Prometheus telemetry, the kind of information I am after is best taken from the Audit backend.</description><content:encoded><![CDATA[<p>One of the things I like to do when setting up a Vault cluster is to visualise all the operations Vault is performing, which helps see usage patterns changing, whether there are lots of failed requests coming in, and what endpoints are receiving the most traffic.</p>
<p>While Vault has a lot of data available in Prometheus telemetry, the kind of information I am after is best taken from the Audit backend.  Setting up an audit backend for Vault is reasonably easy - it supports three methods of communication: file, socket and syslog.  For this application, I use a Unix socket and a small daemon running on the same machine as the Vault instance to send the data to a tracing system.</p>
<h2 id="the-goal">The Goal</h2>
<p>Write a small application that receives audit events and writes traces (spans) to an observability tool.   In this case, I am implementing both Honeycomb and Zipkin via OpenTelemetry.</p>
<p>The <a href="https://github.com/Pondidum/vault-observe">code is available on Github</a>, and the most interesting parts are covered in the rest of this blog post.</p>
<h2 id="receiving-and-processing-messages">Receiving and Processing Messages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ln</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">Listen</span>(<span style="color:#e6db74">&#34;unix&#34;</span>, <span style="color:#e6db74">&#34;/tmp/observe.sock&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ln</span>.<span style="color:#a6e22e">Accept</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">conn</span>).<span style="color:#a6e22e">ReadBytes</span>(<span style="color:#e6db74">&#39;\n&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// do something with the message
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>We only need to do minimal processing of the data for this application before sending it on to Honeycomb or Zipkin.  As the messages contain nested objects, we need to flatten the object hierarchy for easier viewing in spans.  So instead of this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;operation&#34;</span>: <span style="color:#e6db74">&#34;update&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;namespace&#34;</span>: { <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;root&#34;</span> },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;path&#34;</span>: <span style="color:#e6db74">&#34;sys/audit/socket&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;data&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;local&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We want to send this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.operation&#34;</span>: <span style="color:#e6db74">&#34;update&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.namespace.id&#34;</span>: <span style="color:#e6db74">&#34;root&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.path&#34;</span>: <span style="color:#e6db74">&#34;sys/audit/socket&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.data.local&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also want to get a few strongly typed pieces of data out of the message, too, such as the <code>type</code> (<code>request</code> or <code>response</code>) and the request&rsquo;s <code>id</code>, which is in both messages and can be used to group the spans.</p>
<p>To save us from deserialising the json twice, we can do the following:</p>
<ol>
<li>deserialize into a <code>map[string]interface{}</code></li>
<li>create a flattened version of the event using the <a href="https://pkg.go.dev/github.com/jeremywohl/flatten">flatten</a> library</li>
<li>turn the map into a typed struct using the <a href="https://pkg.go.dev/github.com/mitchellh/mapstructure">mapstructure</a> library</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// 1 deserialize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">event</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{}{}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">message</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">event</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 2 flatten
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">flat</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">flatten</span>.<span style="color:#a6e22e">Flatten</span>(<span style="color:#a6e22e">event</span>, <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#a6e22e">flatten</span>.<span style="color:#a6e22e">DotStyle</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 3 type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">typed</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Event</span>{}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mapstructure</span>.<span style="color:#a6e22e">Decode</span>(<span style="color:#a6e22e">event</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">typed</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now that we have our flattened version and our typed version of the message, we can forward it to our span processors.  There are two implementations (3 if you count <code>stdout</code>), so let&rsquo;s look at them one at a time.</p>
<h2 id="honeycomb">Honeycomb</h2>
<p>To send the spans to Honeycomb, I am using their lower-level library <a href="https://pkg.go.dev/github.com/honeycombio/libhoney-go">libhoney-go</a>, rather than the more usual <a href="https://pkg.go.dev/github.com/honeycombio/beeline-go">beeline</a> as I don&rsquo;t need all the <code>context</code> propagation or automatic ID generation.</p>
<p>For the first version of this application, just sending the two events to Honeycomb linked together is enough; however, both spans will show  0ms durations.  We&rsquo;ll fix this problem for both Honeycomb and OpenTelemetry later.</p>
<p>To link our spans together properly, I use the <code>.Request.ID</code> property from the event as the <code>trace.trace_id</code>; it&rsquo;s already a guid and is the same for both the request and response events.  Then, for a <code>request</code> event, I make it the parent span by using the <code>.Request.ID</code> again, but this time as the <code>trace.span_id</code>.  Finally, for the <code>response</code> event, I set the <code>trace.parent_id</code> to the <code>.Request.ID</code>, and generate a random value for the <code>trace.span_id</code> field.</p>
<p>Lastly, I loop through the flattened version of the event, adding each key-value pair to the event&rsquo;s attributes and finally send the event.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">NewEvent</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.trace_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;request&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.span_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.parent_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.span_id&#34;</span>, <span style="color:#a6e22e">generateSpanID</span>())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;service_name&#34;</span>, <span style="color:#e6db74">&#34;vault&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">event</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">val</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Send</span>()
</span></span></code></pre></div><h2 id="zipkin--opentelemetry">Zipkin / OpenTelemetry</h2>
<p>The process for sending via OpenTelemetry is reasonably similar; we start a new span, copy the flattened structure into the span&rsquo;s attributed and call <code>End()</code>, making the TracerProvider send the span to our configured backends (Zipkin in this case.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">id</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithValue</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#e6db74">&#34;request_id&#34;</span>, <span style="color:#a6e22e">id</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">GetTracerProvider</span>().<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;main&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithSpanKind</span>(<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanKindServer</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">value</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">event</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">SetAttributes</span>(<span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">KeyValue</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Key</span>:   <span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">Key</span>(<span style="color:#a6e22e">key</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Value</span>: <span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">StringValue</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%v&#34;</span>, <span style="color:#a6e22e">value</span>)),
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Error</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">SetStatus</span>(<span style="color:#a6e22e">codes</span>.<span style="color:#a6e22e">Error</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Error</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()
</span></span></code></pre></div><p>The hard part was figuring out how to feed the <code>.Request.ID</code> into the Tracer as the TraceID, which was achieved by configuring OpenTelemetry with a custom ID generator that would use the <code>request_id</code> property of the current <code>context</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Generator</span> <span style="color:#66d9ef">struct</span>{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">g</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Generator</span>) <span style="color:#a6e22e">NewIDs</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>) (<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">TraceID</span>, <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanID</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Value</span>(<span style="color:#e6db74">&#34;request_id&#34;</span>).(<span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">UUID</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tid</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">TraceID</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">val</span>.<span style="color:#a6e22e">MarshalText</span>()
</span></span><span style="display:flex;"><span>  copy(<span style="color:#a6e22e">tid</span>[:], <span style="color:#a6e22e">req</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sid</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanID</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Read</span>(<span style="color:#a6e22e">sid</span>[:])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tid</span>, <span style="color:#a6e22e">sid</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I am sure more copying and allocation is happening in this method than necessary, but it is good enough for now.  Configuring it for use by OpenTelemetry is straightforward; it just needs adding to the <code>NewTracerProvider</code> call by wrapping it with <code>trace.WithIDGenerator()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">exporter</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">zipkin</span>.<span style="color:#a6e22e">NewRawExporter</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;http://localhost:9411/api/v2/spans&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">zipkin</span>.<span style="color:#a6e22e">WithSDKOptions</span>(<span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithSampler</span>(<span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">AlwaysSample</span>())),
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">processor</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">NewSimpleSpanProcessor</span>(<span style="color:#a6e22e">exporter</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tp</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">NewTracerProvider</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithSpanProcessor</span>(<span style="color:#a6e22e">processor</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithResource</span>(<span style="color:#a6e22e">resource</span>.<span style="color:#a6e22e">NewWithAttributes</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">semconv</span>.<span style="color:#a6e22e">ServiceNameKey</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;vault-observe&#34;</span>),
</span></span><span style="display:flex;"><span>  )),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithIDGenerator</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Generator</span>{}),
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">SetTracerProvider</span>(<span style="color:#a6e22e">tp</span>)
</span></span></code></pre></div><h2 id="testing">Testing</h2>
<p>To verify that it works, I have a single <code>docker-compose.yml</code> file which sets up a Vault instance in dev mode, and a Zipkin instance.  It mounts the current working directory into the Vault container as <code>/sockets</code> to share the socket file between the host and the container.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3.9&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">vault</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">vault:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cap_add</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">IPC_LOCK</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;./:/sockets:rw&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;8200:8200&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VAULT_DEV_ROOT_TOKEN_ID</span>: <span style="color:#e6db74">&#34;vault&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">zipkin</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">openzipkin/zipkin-slim</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;9411:9411&#34;</span>
</span></span></code></pre></div><p>Running the application along with the docker container is now as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>go build
</span></span><span style="display:flex;"><span>docker-compose up -d
</span></span><span style="display:flex;"><span>./vault-observe --zipkin --socket-path observe.sock
</span></span></code></pre></div><p>In another terminal, you can now enable the new audit backend and send some requests so we can look at them in Zipkin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:8200&#34;</span>
</span></span><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vault&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault audit enable socket address<span style="color:#f92672">=</span>/sockets/observe.sock socket_type<span style="color:#f92672">=</span>unix
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault secrets enable -version<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> kv
</span></span><span style="display:flex;"><span>vault kv put /secrets/test name<span style="color:#f92672">=</span>andy
</span></span><span style="display:flex;"><span>vault kv get /secrets/test
</span></span></code></pre></div><h2 id="running-in-production">Running in Production</h2>
<p>There are a few things you should be aware of, running this in production:</p>
<ul>
<li>This <em>must not</em> be your only audit backend: Vault will fail requests if they are not successfully written to at least one audit backend if any are enabled.</li>
<li>There is the possibility of losing data if the <code>vault-observe</code> process stops</li>
</ul>
<h2 id="improvements">Improvements</h2>
<p>As I am using this for keeping an eye on request durations and patterns in behaviour, capturing the actual time it takes for Vault to handle a request would be pretty valuable.  So instead of processing both events, I will keep just the timestamp from the <code>request</code>, and then when the <code>response</code> event comes in, look up the timestamp and calculate the duration.</p>
<p>As I don&rsquo;t want an ever-expanding list of timestamps in memory, I use an <a href="https://pkg.go.dev/github.com/patrickmn/go-cache">automatically expiring cache</a> so keep them for around 10 seconds, as no request to Vault should be that slow!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">requests</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cache</span>.<span style="color:#a6e22e">New</span>(<span style="color:#ae81ff">10</span><span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>, <span style="color:#ae81ff">1</span><span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Minute</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">processMessage</span>(<span style="color:#a6e22e">requests</span>, <span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">sender</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">EOF</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>processMessage</code> function now handles the <code>request</code> and <code>response</code> messages separately.  The <code>request</code> just inserts the event&rsquo;s <code>time</code> property into the cache, and exists:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;request&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">requests</span>.<span style="color:#a6e22e">Set</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Time</span>, <span style="color:#a6e22e">cache</span>.<span style="color:#a6e22e">DefaultExpiration</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>response</code>  version pulls the time back out of the cache and stores it into the event itself - it&rsquo;s then up to the sender if it wants to use the value or not.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;response&#34;</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">requests</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>); <span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span> = <span style="color:#a6e22e">x</span>.(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">requests</span>.<span style="color:#a6e22e">Delete</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;No request found in the cache for %s&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the Honeycomb sender, we can remove all the parenting logic; we only need to set the <code>Timestamp</code> and <code>duration_ms</code> fields to get the duration showing correctly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">duration</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Time</span>.<span style="color:#a6e22e">Sub</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span>).<span style="color:#a6e22e">Milliseconds</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">NewEvent</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Timestamp</span> = <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;duration_ms&#34;</span>, <span style="color:#a6e22e">duration</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.trace_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.span_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span></code></pre></div><p>For the OpenTelemetry sender, we can add a <code>trace.WithTimestamp()</code> call to both the <code>Start()</code> and <code>End()</code> calls so use our events&rsquo; timestamps:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithValue</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#e6db74">&#34;request_id&#34;</span>, <span style="color:#a6e22e">id</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">GetTracerProvider</span>().<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;main&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithSpanKind</span>(<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanKindServer</span>), <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithTimestamp</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>(<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithTimestamp</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Time</span>))
</span></span></code></pre></div>]]></content:encoded></item><item><title>Observability with Infrastructure as Code</title><link>https://andydote.co.uk/2021/03/01/observability-with-infrastructure-as-code/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/03/01/observability-with-infrastructure-as-code/</guid><description>This article was originally published on the Pulumi blog.
When using the Pulumi Automation API to create applications which can provision infrastructure, it is very handy to be able to use observability techniques to ensure the application functions correctly and to help see where performance bottlenecks are.
One of the applications I work on creates a VPC and Bastion host and then stores the credentials into a Vault instance. The problem is that the “create infrastructure” part is an opaque blob, in that I can see it takes 129 seconds to create, but I can’t see what it’s doing, or why it takes this amount of time.</description><content:encoded><![CDATA[<blockquote>
<p>This article was originally published on the <a href="https://www.pulumi.com/blog/observability-with-infrastructure-as-code/">Pulumi blog</a>.</p>
</blockquote>
<p>When using the <a href="https://www.pulumi.com/blog/tag/automation-api/">Pulumi Automation API</a> to create applications which can provision infrastructure, it is very handy to be able to use observability techniques to ensure the application functions correctly and to help see where performance bottlenecks are.</p>
<p>One of the applications I work on creates a VPC and Bastion host and then stores the credentials into a Vault instance.  The problem is that the “create infrastructure” part is an opaque blob, in that I can see it takes 129 seconds to create, but I can’t see what it’s doing, or why it takes this amount of time.</p>
<p><img loading="lazy" src="pulumi-observability-before.png" alt="honeycomb traces of one pulumi stack resource"  />
</p>
<p>So can I do better?</p>
<h2 id="the-initial-application">The Initial Application</h2>
<p>In this example I use <a href="https://honeycomb.io/">Honeycomb&rsquo;s</a> <a href="https://github.com/honeycombio/beeline-go/">Go Beeline</a> to capture all the data I care about; durations, errors, any context which is “interesting”:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">Init</span>(<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">Config</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">WriteKey</span>: <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">&#34;HONEYCOMB_API_KEY&#34;</span>),
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Dataset</span>:  <span style="color:#e6db74">&#34;pulumi-demo&#34;</span>,
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">StartSpan</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#e6db74">&#34;basic-vpc&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">Send</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">name</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">auto</span>.<span style="color:#a6e22e">FullyQualifiedStackName</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">&#34;PULUMI_USERNAME&#34;</span>), <span style="color:#e6db74">&#34;basic-vpc&#34;</span>, <span style="color:#e6db74">&#34;dev&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">auto</span>.<span style="color:#a6e22e">UpsertStackInlineSource</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">name</span>, <span style="color:#e6db74">&#34;basic-vpc&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">pc</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumi</span>.<span style="color:#a6e22e">Context</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">azs</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">getAvailabilityZones</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">v</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">vpc</span>.<span style="color:#a6e22e">NewVpc</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">pc</span>, <span style="color:#e6db74">&#34;dev&#34;</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">vpc</span>.<span style="color:#a6e22e">VpcArgs</span>{
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">Description</span>:           <span style="color:#e6db74">&#34;dev&#34;</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">BaseCidr</span>:              <span style="color:#e6db74">&#34;192.168.0.0/16&#34;</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">AvailabilityZoneNames</span>: <span style="color:#a6e22e">azs</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">S3Endpoint</span>:            <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">DynamoEndpoint</span>:        <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>		})
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">SetConfig</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;aws:region&#34;</span>, <span style="color:#a6e22e">auto</span>.<span style="color:#a6e22e">ConfigValue</span>{<span style="color:#a6e22e">Value</span>: <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">&#34;PULUMI_REGION&#34;</span>)}); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ws</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Workspace</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ws</span>.<span style="color:#a6e22e">InstallPlugin</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;aws&#34;</span>, <span style="color:#e6db74">&#34;v3.23.0&#34;</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Refresh</span>(<span style="color:#a6e22e">ctx</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">stream</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">optup</span>.<span style="color:#a6e22e">ProgressStreams</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Up</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">stream</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//vault code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="adding-infrastructure-observability">Adding Infrastructure Observability</h2>
<p>To get a handle on what is happening when <code>stack.Up()</code> runs, I have mplemented a custom <code>io.Writer</code>, which will be passed into the <code>ProgressStream</code> constructor.</p>
<p>The custom progress stream&rsquo;s <code>Write</code> method is called once for each line emitted,  which allows us to start new spans when a resource starts being constructed, and send them when construction completes.  Currently, this is achieved by parsing the console output text, but I gather in the future, it will be possible to get streamed json blobs which can be unmarshaled into go structs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">pulumiBeeline</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>      <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contexts</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">func</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewPulumiBeeline</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumiBeeline</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pulumiBeeline</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ctx</span>:  	<span style="color:#a6e22e">ctx</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">contexts</span>: <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">func</span>(){},
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">cw</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumiBeeline</span>) <span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">p</span> []<span style="color:#66d9ef">byte</span>) (<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// todo: make more robust, support modifications, deletions etc.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">line</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">TrimSpace</span>(string(<span style="color:#a6e22e">p</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">parts</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">line</span>, <span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">parts</span>) &lt; <span style="color:#ae81ff">5</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">p</span>), <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//+  aws-vpc dev creating
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">//+  &lt;type&gt; &lt;name&gt; &lt;action&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">resourceType</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">parts</span>[<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">resourceName</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">parts</span>[<span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">resourceAction</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">parts</span>[<span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">resourceAction</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;creating&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">StartSpan</span>(<span style="color:#a6e22e">cw</span>.<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">resourceName</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">c</span>, <span style="color:#e6db74">&#34;type&#34;</span>, <span style="color:#a6e22e">resourceType</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// add other things here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">cw</span>.<span style="color:#a6e22e">contexts</span>[<span style="color:#a6e22e">resourceName</span>] = <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Send</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">resourceAction</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;created&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">cw</span>.<span style="color:#a6e22e">contexts</span>[<span style="color:#a6e22e">resourceName</span>]()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">p</span>), <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Modifying the <code>optup.ProgressStreams</code> is the only change needed to the original application:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">stream</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">optup</span>.<span style="color:#a6e22e">ProgressStreams</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>, <span style="color:#a6e22e">NewPulumiBeeline</span>(<span style="color:#a6e22e">ctx</span>))
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Up</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">stream</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now when I run this program again, I can see a lot more information in my Honeycomb traces, which not only shows me that Pulumi is <em>highly</em> parallelised, but also gives me a better idea of where the time is taken when creating infrastructure; in this example, it’s the NAT Gateways:</p>
<p><img loading="lazy" src="pulumi-observability-after.png" alt="honeycomb traces of all infrastructure resources in the pulumi stack"  />
</p>
<p>In the future, I want to expand this to cover far more details, such as including the reasons resources were created/modified/destroyed and including as much information as possible about what caused a resource to fail.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>In the end, this turned out to be much easier to achieve than I had hoped.  Being able to use Pulumi progmatically, rather than running <code>os.Exec</code> directly myself was a huge productivity boost.</p>
<p>I am looking forward to all the new kinds of tooling I can build to solve my user&rsquo;s problems continuing to utilise Honeycomb for my observability and Pulumi for my infrastructure.</p>
]]></content:encoded></item><item><title>Observability Without Honeycomb</title><link>https://andydote.co.uk/2020/03/15/observability-without-honeycomb/</link><pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2020/03/15/observability-without-honeycomb/</guid><description>Before I start on this, I want to make it clear that if you can buy Honeycomb, you should. Outlined below is how I started to add observability to an existing codebase which already had the ELK stack available, and was unable to use Honeycomb. My hope, in this case, is that I can demonstrate how much value observability gives, and also show how much more value you would get with an excellent tool, such as Honeycomb.</description><content:encoded><![CDATA[<p>Before I start on this, I want to make it clear that if you can buy <a href="https://honeycomb.io">Honeycomb</a>, you <strong>should</strong>.  Outlined below is how I started to add observability to an existing codebase which already had the <a href="https://www.elastic.co/what-is/elk-stack">ELK stack</a> available, and was unable to use Honeycomb.  My hope, in this case, is that I can demonstrate how much value observability gives, and also show how much <em>more</em> value you would get with an excellent tool, such as Honeycomb.</p>
<p>With that said, what is observability, how is it different to logging (and metrics), and why should you care?</p>
<p>If you already know, or would rather skip to the implementation, jump to <a href="#implementing-with-elastic-search">Implementing with Elastic Search</a>.</p>
<h2 id="what-is-it">What is it?</h2>
<p>The term Observability comes from systems engineering and is how you can determine the behaviour of the entire system from its outputs.  In our case, this means the <strong>events</strong> we emit while processing requests.  If we look at (my) hierarchy of monitoring, you can see that it starts with logging, with the next steps up being to output structured logs, then centralising those logs (no more SSHing into random hosts), and finally onto events:</p>
<blockquote>
<p>logs &lt; structured logs &lt; centralised structured logs &lt; events (observability)</p>
</blockquote>
<h2 id="the-problem-with-logs-and-metrics">The Problem with Logs and Metrics</h2>
<p>With logs, you are writing out many lines as your process runs, which has a few problems, the primary being that you are often looking for data which is absent.</p>
<p>How many times have you been looking through many lines of logs, before realising &ldquo;oh, the line about cache invalidation is missing, which means&hellip;&rdquo;.  It is much harder to notice data which is absent than data which is present, but with an unexpected value.</p>
<p>The second problem is the size of the logs saved.  Logs, especially structured ones, contain a lot of useful information, such as request ids, session ids, paths, versions, host data, and anything else interesting.  The majority of these fields are repeated for every log entry in the system, and that means they need to be stored and queryable at some point.  Often, this is solved by deleting historical data, or sampling at write time, both of which cause data loss, and you are back to trying to notice data which isn&rsquo;t there.</p>
<p>Metrics exhibit the data loss problem <em>by design</em>.  Metrics are deliberately aggregated client-side and then shipped to storage.  The numbers you get from metrics can be useful, but when you look at where they come from, it becomes evident that they are just a projection of logs themselves.  How many codebases have you read where every <code>loggger.Info(&quot;...&quot;, props);</code> line is followed (or preceded) by <code>stats.increment(&quot;some_counter)</code>?</p>
<h2 id="so-what-is-an-event">So What is an Event?</h2>
<p>An Event is a structured piece of data, with as much information about the current request in it as possible.  The difference is that you emit <strong>one</strong> event per request <strong>per service</strong>, if you are doing microservices.  You create an event at the beginning of handling a request and send it somewhere at the end of the request (whether successful or unsuccessful).</p>
<p>For things like background tasks, again, emitting one event per execution, and in well-structured monoliths, one event per request per component.</p>
<p>This doesn&rsquo;t sound like much of a difference, until you start writing your code to add interesting properties to the event, rather than log lines.  We want to store as much high cardinality data as possible (so anything unique, or nearly unique), the more of it, the better, as it lets us slice and dice our events by anything at a later time (e.g. by requestid, userid, endpoint paths, url parameters, http method, etc.)</p>
<p>Looking at the caching example mentioned above, before we had this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handleRequest</span>(<span style="color:#a6e22e">request</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">now</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>] <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>].<span style="color:#a6e22e">IsStale</span>(<span style="color:#a6e22e">now</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">logger</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#e6db74">&#34;Cache miss for user&#34;</span>, <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>))
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">stats</span>.<span style="color:#a6e22e">Increment</span>(<span style="color:#e6db74">&#34;cache_misses&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fillCache</span>(<span style="color:#a6e22e">cache</span>, <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">stats</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#34;request_duration&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">now</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>When the user is in the cache, there is no logline written, which is fine when everything is working.  However, when something unexpected happens, like daylight savings time or sudden clock drift, and suddenly all cache entries are never stale.  You have a decrease in latency (which looks good), your <code>cache_misses</code> counter goes down (looks good), but your data is older than you realised, and bad things are happening down the line.</p>
<p>If you were to write this function with observability in mind, you might write something like this instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handleRequest</span>(<span style="color:#a6e22e">request</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">NewEvent</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Send</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">now</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Timestamp</span> = <span style="color:#a6e22e">now</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{}{
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;request_id&#34;</span>: <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">ID</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;request_path&#34;</span>: <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">Path</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;request_method&#34;</span>: <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">method</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;user_id&#34;</span>: <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;cache_size&#34;</span>: len(<span style="color:#a6e22e">cache</span>),
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">userData</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cache</span>[<span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;cache_hit&#34;</span>, <span style="color:#a6e22e">found</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">found</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">userData</span>.<span style="color:#a6e22e">IsStale</span>(<span style="color:#a6e22e">now</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">userData</span> = <span style="color:#a6e22e">fillCache</span>(<span style="color:#a6e22e">ev</span>, <span style="color:#a6e22e">cache</span>, <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">UserID</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;cache_expires&#34;</span>, <span style="color:#a6e22e">userData</span>.<span style="color:#a6e22e">CacheUntil</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;cache_is_stale&#34;</span>, <span style="color:#a6e22e">userData</span>.<span style="color:#a6e22e">IsStale</span>(<span style="color:#a6e22e">now</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;request_duration_ms&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">now</span>) <span style="color:#f92672">/</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Millisecond</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The resulting event will contain enough information so that in the future when a bug is introduced, you will be able to look at your events and see that yes, while <code>request_duration_ms</code> has gone down and <code>cache_hit</code> has gone up, all the events have <code>cache_is_stale=false</code> with <code>cache_expires</code> times much older than they should be.</p>
<p>So this is the value add of Observability: Answering Unknown Unknowns; the questions you didn&rsquo;t know you needed to ask.</p>
<h2 id="implementing-with-elastic-search">Implementing with Elastic Search</h2>
<p>I won&rsquo;t cover how to set up and manage the ELK stack (as my opinion is that you should pay someone else to run it.  Don&rsquo;t waste your engineering effort.)  I will assume you have a way to get information from <code>stdout</code> of a process into ElasticSearch somehow (I usually use piping to <a href="https://www.elastic.co/beats/filebeat">Filebeat</a>, which forwards to <a href="https://www.elastic.co/logstash">LogStash</a>, which processes and pushes into <a href="https://www.elastic.co/elasticsearch/">ElasticSearch</a>).</p>
<p>Besides, the code is the important part.  This is all written in Go, but I gather you can do similar to NodeJS apps etc.  We will use Honeycomb&rsquo;s [Libhoney-go] package to do the heavy lifting, and supply a custom <code>Transmission</code>.  The following is the important part of a custom stdout write (loosely based on libhoney&rsquo;s <code>WriterSender</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">w</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">JsonSender</span>) <span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">ev</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">transmission</span>.<span style="color:#a6e22e">Event</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Data</span>[<span style="color:#e6db74">&#34;@timestamp&#34;</span>] = <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Timestamp</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">content</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Data</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">content</span> = append(<span style="color:#a6e22e">content</span>, <span style="color:#e6db74">&#39;\n&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Lock</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Unlock</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Writer</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">content</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">SendResponse</span>(<span style="color:#a6e22e">transmission</span>.<span style="color:#a6e22e">Response</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">Metadata</span>: <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Metadata</span>,
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The key difference here is that I am only serialising the <code>.Data</code> property of the Event, and am inserting an extra <code>@timestamp</code> key to make my event structure conform to the standard LogStash pattern.</p>
<p>All that remains to do is configure libhoney to use the custom sender:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">Init</span>(<span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">Config</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Transmission</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">JsonSender</span>{<span style="color:#a6e22e">Writer</span>: <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>},
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Dataset</span>:      <span style="color:#e6db74">&#34;my-api&#34;</span>,
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>Running your service, you would start to see json objects on stdout which look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;@timestamp&#34;</span>: <span style="color:#e6db74">&#34;2020-03-15T14:51:43.041744363+02:00&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;request_id&#34;</span>: <span style="color:#e6db74">&#34;7f46b313-0a37-457c-9727-b6fdc8c87733&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;request_path&#34;</span>: <span style="color:#e6db74">&#34;/api/user/dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;request_method&#34;</span>: <span style="color:#e6db74">&#34;GET&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;user_id&#34;</span>: <span style="color:#e6db74">&#34;e6baf70f-9812-4cff-94e9-80a308077955&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cache_size&#34;</span>: <span style="color:#ae81ff">86</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cache_hit&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cache_expires&#34;</span>: <span style="color:#e6db74">&#34;2020-03-15T15:02:17.045625680+02:00&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;cache_is_stale&#34;</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;request_duration_ms&#34;</span>: <span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There are no message fields for you to read, but you can see everything which happened in this method; whether the user was found in the cache, how big the cache was etc.</p>
<p>Now if we push that into ElasticSearch, we can filter by any of the values in the event; in this case, I filtered by <code>user_id</code> and added columns for all the cache properties.</p>
<p><img loading="lazy" src="observability-elk.png" alt="Kibana Screenshot"  />
</p>
<p>Now everything is in one place; you can slice and dice your data and figure out what exactly is going on.  You can even write some metrics off your event queries if you want!</p>
<h2 id="improvements--caveats">Improvements &amp; Caveats</h2>
<p>The main caveat is that pushing this into ElasticSearch is not as good as what you get from Honeycomb - It is just an improvement on logging messages and enables you to demonstrate the value of observability easily.</p>
<p>Once you&rsquo;ve demonstrated how useful observability is, the next step is to migrate to Honeycomb and get even more value.</p>
<p>I have written the word Honeycomb a lot in this post (9 times so far), but I want to stress that it is observability that we are after and that Honeycomb is an implementation detail.  It also happens to be the only real observability tooling (although <a href="https://lightstep.com/">Lightstep</a>, kind of.)</p>
<p>And let&rsquo;s not get started on the &ldquo;3 pillars of observability&rdquo; bullshit being peddled by other vendors.</p>
]]></content:encoded></item></channel></rss>