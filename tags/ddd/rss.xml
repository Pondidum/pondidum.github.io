<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ddd on Andy Dote</title><link>https://andydote.co.uk/tags/ddd/</link><description>Recent content in ddd on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 04 May 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/ddd/rss.xml" rel="self" type="application/rss+xml"/><item><title>Writing Rich Domain Models</title><link>https://andydote.co.uk/2014/05/04/rich-domain-modeling/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/05/04/rich-domain-modeling/</guid><description>The term Rich Domain Model is used to describe a domain model which really shows you how you should be using and manipulating the model, rather than letting you do anything with it. It is the opposite of an Anaemic Domain Model, which provides a very low abstraction over the data storage (generally), but with little to no enforcing of rules.
The Anaemic Domain Model To take the standard model of a person who has addresses and phone numbers etc seems a little contrite, so lets run through an example using timesheets (bear in mind I don&amp;rsquo;t know what really goes into a timesheet system, this just seems reasonable).</description></item></channel></rss>