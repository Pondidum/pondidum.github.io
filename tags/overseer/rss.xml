<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>overseer on Andy Dote</title><link>https://andydote.co.uk/tags/overseer/</link><description>Recent content in overseer on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 30 Aug 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/overseer/rss.xml" rel="self" type="application/rss+xml"/><item><title>A single project Windows Service and Console</title><link>https://andydote.co.uk/2015/08/30/single-project-service-and-console/</link><pubDate>Sun, 30 Aug 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/08/30/single-project-service-and-console/</guid><description>I have found that when developing MicroServices, I often want to run them from within Visual Studio, or just as a console application, and not have to bother with the hassle of installing as windows services.
In the past I have seen this achieved by creating a Class Library project with all the actual implementation inside it, and then both a Console Application and Windows Service project referencing the library and doing nothing other than calling a .</description><content:encoded><![CDATA[<p>I have found that when developing MicroServices, I often want to run them from within Visual Studio, or just as a console application, and not have to bother with the hassle of installing as windows services.</p>
<p>In the past I have seen this achieved by creating a <code>Class Library</code> project with all the actual implementation inside it, and then both a <code>Console Application</code> and <code>Windows Service</code> project referencing the library and doing nothing other than calling a <code>.Start()</code> method or similar.</p>
<p>While this works, it has always bugged me as there should be a straight forward way of achieving a single exe to do both roles.  It turns out there is an easy way to do it too&hellip;</p>
<h2 id="creating-the-project">Creating the Project</h2>
<p>First, create a <code>WindowsService</code> project in VisualStudio:
<img loading="lazy" src="service-new.png" alt="New Windows Service"  />
</p>
<p>Then open the project properties, and change the project type to <code>Console Application</code> and set the startup object:
<img loading="lazy" src="service-project-type.png" alt="Service Type"  />
</p>
<p>Next, open <code>Service1.cs</code> and add a new method (and rename it to <code>Service</code> if you feel the need!):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> StartConsole()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	Console.WriteLine(<span style="color:#e6db74">&#34;Press any key to exit...&#34;</span>);
</span></span><span style="display:flex;"><span>	OnStart(<span style="color:#66d9ef">new</span> <span style="color:#66d9ef">string</span>[] { });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	Console.ReadKey();
</span></span><span style="display:flex;"><span>	OnStop();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Finally  open <code>Program.cs</code> and replace the <code>Main</code> method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Main()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> service = <span style="color:#66d9ef">new</span> Service();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (Environment.UserInteractive)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		service.StartConsole();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		ServiceBase.Run(<span style="color:#66d9ef">new</span> ServiceBase[] { service });
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="displaying-output">Displaying Output</h2>
<p>Calling <code>Console.Write*</code> and <code>Console.Read*</code> methods when running as a windows service will cause exceptions to be thrown, which suggest that you should redirect the console streams to use them under a windows service.</p>
<p>As a MicroService you shouldn&rsquo;t need to be reading keys from the console (other than the one in our <code>StartConsole</code> method), but writing output would be useful&hellip;</p>
<p>To do this I like to use my logging library of choice (<a href="http://serilog.net/">Serilog</a>), which I have setup to write to files and to a console:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> InitializeLogging()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> logs = Path.Combine(baseDirectory, <span style="color:#e6db74">&#34;logs&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	Directory.CreateDirectory(logs);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	Log.Logger = <span style="color:#66d9ef">new</span> LoggerConfiguration()
</span></span><span style="display:flex;"><span>		.MinimumLevel.Debug()
</span></span><span style="display:flex;"><span>		.WriteTo.ColoredConsole()
</span></span><span style="display:flex;"><span>		.WriteTo.RollingFile(Path.Combine(logs, <span style="color:#e6db74">&#34;{Date}.log&#34;</span>))
</span></span><span style="display:flex;"><span>		.CreateLogger();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And call this method inside the <code>Service1</code> constructor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Service()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	InitializeComponent();
</span></span><span style="display:flex;"><span>	InitializeLogging();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="the-edge-case">The Edge Case</h2>
<p>There is one slight edge case which I am aware of, which is that the <code>Environment.UserInteractive </code> property can return true even when running as a windows service if when you install the service you tick <code>Allow service to interact with desktop</code> checkbox:</p>
<p><img loading="lazy" src="service-interact.png" alt="Service-Logon"  />
</p>
<p>My only solution to this is: <strong>Don&rsquo;t tick that box</strong>. I don&rsquo;t think I have ever used that option anyway!</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Using this method means less code and projects to maintain, and a very easy path to go from running a service as a desktop application to service.</p>
]]></content:encoded></item></channel></rss>