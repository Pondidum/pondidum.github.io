<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>zipkin on Andy Dote</title><link>https://andydote.co.uk/tags/zipkin/</link><description>Recent content in zipkin on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 12 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/zipkin/rss.xml" rel="self" type="application/rss+xml"/><item><title>Getting NodeJS OpenTelemetry data into NewRelic</title><link>https://andydote.co.uk/2021/03/12/nodejs-opentelemetry-newrelic/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/03/12/nodejs-opentelemetry-newrelic/</guid><description>I had the need to get some OpenTelemetry data out of a NodeJS application, and into NewRelic&amp;rsquo;s distributed tracing service, but found that there is no way to do it directly, and in this use case, adding a separate collector is more hassle than it&amp;rsquo;s worth.
Luckily, there is an NodeJS OpenTelemetry library which can report to Zipkin, and NewRelic can also ingest Zipkin format data.
To use it was relatively straight forward:</description><content:encoded><![CDATA[<p>I had the need to get some OpenTelemetry data out of a NodeJS application, and into NewRelic&rsquo;s distributed tracing service, but found that there is no way to do it directly, and in this use case, adding a separate collector is more hassle than it&rsquo;s worth.</p>
<p>Luckily, there is an NodeJS <a href="https://www.npmjs.com/package/@opentelemetry/exporter-zipkin">OpenTelemetry library which can report to Zipkin</a>, and NewRelic can also <a href="https://docs.newrelic.com/docs/understand-dependencies/distributed-tracing/trace-api/report-zipkin-format-traces-trace-api/">ingest Zipkin format data</a>.</p>
<p>To use it was relatively straight forward:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">context</span>, <span style="color:#a6e22e">setSpan</span>, <span style="color:#a6e22e">Span</span>, <span style="color:#a6e22e">trace</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@opentelemetry/api&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">BasicTracerProvider</span>, <span style="color:#a6e22e">BatchSpanProcessor</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@opentelemetry/tracing&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">ZipkinExporter</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@opentelemetry/exporter-zipkin&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">exporter</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ZipkinExporter</span>({
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;https://trace-api.newrelic.com/trace/v1&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">serviceName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;interesting-service&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Api-Key&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">NEWRELIC_APIKEY</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Data-Format&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;zipkin&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Data-Format-Version&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;2&#34;</span>,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">provider</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">BasicTracerProvider</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">provider</span>.<span style="color:#a6e22e">addSpanProcessor</span>(<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">BatchSpanProcessor</span>(<span style="color:#a6e22e">exporter</span>));
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">provider</span>.<span style="color:#a6e22e">register</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">tracer</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">getTracer</span>(<span style="color:#e6db74">&#34;default&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">rootSpan</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tracer</span>.<span style="color:#a6e22e">startSpan</span>(<span style="color:#e6db74">&#34;main&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// do something fantastically interesting
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">rootSpan</span>.<span style="color:#a6e22e">end</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">provider</span>.<span style="color:#a6e22e">shutdown</span>();
</span></span></code></pre></div><p>This has the added benefit of being able to test with Zipkin locally, using the <code>openzipkin/zipkin-slim</code> docker container, by just removing the URL property from the <code>ZipkinExporter</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run --rm -d -p 9411:9411 openzipkin/zipkin-slim
</span></span></code></pre></div><h2 id="child-spans">Child Spans</h2>
<p>Figuring out how to create child spans was actually harder in the end, in part because the OpenTelemetry docs don&rsquo;t quite match the actual function signatures.</p>
<p>In the end, I wrote this little helper function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">context</span>, <span style="color:#a6e22e">setSpan</span>, <span style="color:#a6e22e">Span</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;@opentelemetry/api&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">startSpan</span>(<span style="color:#a6e22e">parent</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Span</span>, <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">string</span>)<span style="color:#f92672">:</span> <span style="color:#a6e22e">Span</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tracer</span>.<span style="color:#a6e22e">startSpan</span>(<span style="color:#a6e22e">name</span>, <span style="color:#66d9ef">undefined</span>, <span style="color:#a6e22e">setSpan</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">active</span>(), <span style="color:#a6e22e">parent</span>));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Which I can use like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">DoInterestingThings</span>(<span style="color:#a6e22e">span</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Span</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">startSpan</span>(<span style="color:#a6e22e">span</span>, <span style="color:#e6db74">&#34;do-interesting-things&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// interesting things happen here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">end</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Doing both of these means I can now see what my misbehaving cron jobs are actually doing, rather than trying to guess what their problems are.</p>
]]></content:encoded></item></channel></rss>