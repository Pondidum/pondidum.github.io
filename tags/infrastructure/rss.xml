<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>infrastructure on Andy Dote</title><link>https://andydote.co.uk/tags/infrastructure/</link><description>Recent content in infrastructure on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 22 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/infrastructure/rss.xml" rel="self" type="application/rss+xml"/><item><title>The Operator Pattern in Nomad</title><link>https://andydote.co.uk/2021/11/22/nomad-operator-pattern/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/11/22/nomad-operator-pattern/</guid><description>The Operator Pattern from Kubernetes is an excellent way of handling tasks in a cluster in an automated way, for example, provisioning applications, running backups, requesting certificates, and injecting chaos testing.
As a Nomad user, I wanted to do something similar for my clusters, so I set about seeing how it would be possible. It turns out; it is much easier than I expected! While Nomad doesn&amp;rsquo;t support the idea of Custom Resource Definitions, we can achieve an operator by utilising a regular Nomad job and the nomad HTTP API.</description><content:encoded><![CDATA[<p>The <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/">Operator Pattern</a> from Kubernetes is an excellent way of handling tasks in a cluster in an automated way, for example, provisioning applications, running backups, requesting certificates, and injecting chaos testing.</p>
<p>As a Nomad user, I wanted to do something similar for my clusters, so I set about seeing how it would be possible.  It turns out; it is much easier than I expected!  While Nomad doesn&rsquo;t support the idea of Custom Resource Definitions, we can achieve an operator by utilising a regular Nomad job and the nomad HTTP API.</p>
<h2 id="the-setup">The Setup</h2>
<p>We&rsquo;re going to build an automated backup operator!  We&rsquo;ll use the  <a href="https://www.nomadproject.io/api-docs/events">Nomad Streaming API</a> to watch for jobs being registered and deregistered.  If a job has some metadata for auto backup, we&rsquo;ll create (or update) a backup job.  If a job is deregistered or doesn&rsquo;t have any auto backup metadata, we&rsquo;ll try to delete a backup job if it exists.</p>
<p>The complete source code is available in the <a href="https://github.com/Pondidum/nomad-operator">Nomad-Operator</a> repo on my GitHub.</p>
<h2 id="consuming-the-nomad-streaming-api">Consuming the Nomad Streaming API</h2>
<p>The <a href="https://pkg.go.dev/github.com/hashicorp/nomad/api">Nomad Go API library</a> makes it easy to consume the streaming API, handling all the details, such as deserialisation for us.</p>
<p>The client is created with no additional parameters, as the <code>Address</code> and <code>SecretID</code> will be populated from environment variables automatically (<code>NOMAD_ADDR</code> and <code>NOMAD_TOKEN</code> respectively):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">NewClient</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">Config</span>{})
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As we want to only listen to jobs that have been modified after our application deploys, we need to query what the current job index is at startup:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">index</span> <span style="color:#66d9ef">uint64</span> = <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">meta</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Jobs</span>().<span style="color:#a6e22e">List</span>(<span style="color:#66d9ef">nil</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">index</span> = <span style="color:#a6e22e">meta</span>.<span style="color:#a6e22e">LastIndex</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Next, we use the <code>EventStream</code> API and subscribe to all job event types (in practice, this means <code>JobRegistered</code>, <code>JobDeregistered</code>, and <code>JobBatchDeregistered</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">topics</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">map</span>[<span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">Topic</span>][]<span style="color:#66d9ef">string</span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">TopicJob</span>: {<span style="color:#e6db74">&#34;*&#34;</span>},
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">eventsClient</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">EventStream</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">eventCh</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">eventsClient</span>.<span style="color:#a6e22e">Stream</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">topics</span>, <span style="color:#a6e22e">index</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">QueryOptions</span>{})
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>Stream(...)</code> call itself returns a channel which we can loop over forever consuming events, ignoring the heartbeat events:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">select</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Done</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">event</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">eventCh</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">IsHeartbeat</span>() {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">handleEvent</span>(<span style="color:#a6e22e">event</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Finally, this operator only cares about jobs being registered and deregistered, so we loop through all the events and only handle the <code>JobRegistered</code> and <code>JobDeregistered</code> events:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Events</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;JobRegistered&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;JobDeregistered&#34;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">job</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Job</span>()
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">onJob</span>(<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#a6e22e">job</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="handling-jobs">Handling Jobs</h2>
<p>When we see jobs, we need to handle a few different cases:</p>
<ul>
<li>Jobs which are backup jobs themselves should be ignored</li>
<li>Jobs without backup settings should have their backup job removed (if it exists)</li>
<li>Jobs with backup settings should have their job created (or updated if it exists)</li>
<li>Deregistered jobs should have their backup job removed (if it exists)</li>
</ul>
<p>We&rsquo;re using the job level <code>meta</code> stanza in the <code>.nomad</code> files for our settings, which looks something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-hcl" data-lang="hcl"><span style="display:flex;"><span><span style="color:#66d9ef">task</span> <span style="color:#e6db74">&#34;server&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">meta</span> {
</span></span><span style="display:flex;"><span>    auto-backup <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    backup-schedule <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;@daily&#34;</span>
</span></span><span style="display:flex;"><span>    backup-target-db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;postgres&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Backup</span>) <span style="color:#a6e22e">OnJob</span>(<span style="color:#a6e22e">eventType</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">job</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">Job</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">HasPrefix</span>(<span style="color:#f92672">*</span><span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>, <span style="color:#e6db74">&#34;backup-&#34;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backupID</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;backup-&#34;</span> <span style="color:#f92672">+</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">settings</span>, <span style="color:#a6e22e">enabled</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">parseMeta</span>(<span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">Meta</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">eventType</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;JobDeregistered&#34;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">tryRemoveBackupJob</span>(<span style="color:#a6e22e">backupID</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">enabled</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">tryRemoveBackupJob</span>(<span style="color:#a6e22e">backupID</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">createBackupJob</span>(<span style="color:#a6e22e">backupID</span>, <span style="color:#a6e22e">settings</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Attempting to remove the job is straightforward as we don&rsquo;t care if it fails - it could be that the job doesn&rsquo;t exist, or is already stopped, or any other number of reasons, so we can use the <code>Deregister()</code> call and discard the output:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Backup</span>) <span style="color:#a6e22e">tryRemoveBackupJob</span>(<span style="color:#a6e22e">jobID</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Jobs</span>().<span style="color:#a6e22e">Deregister</span>(<span style="color:#a6e22e">jobID</span>, <span style="color:#66d9ef">false</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">WriteOptions</span>{})
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Creating the backup job involves rendering a go template of the nomad file we will use, and then calling <code>Register</code> to submit the job to Nomad.  We&rsquo;re using the fact that our backup IDs are stable, so re-running the same backup ID will replace the job with a new version.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Backup</span>) <span style="color:#a6e22e">createBackupJob</span>(<span style="color:#a6e22e">id</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">s</span> <span style="color:#a6e22e">settings</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">New</span>(<span style="color:#e6db74">&#34;&#34;</span>).<span style="color:#a6e22e">Delims</span>(<span style="color:#e6db74">&#34;[[&#34;</span>, <span style="color:#e6db74">&#34;]]&#34;</span>).<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">backupHcl</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buffer</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Buffer</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Execute</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">buffer</span>, <span style="color:#a6e22e">s</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">backup</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jobspec</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">buffer</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Jobs</span>().<span style="color:#a6e22e">Register</span>(<span style="color:#a6e22e">backup</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The nomad file is embedded using the Go <a href="https://pkg.go.dev/embed">embed</a> package to store the <code>.nomad</code> file in the binary, so we still have a single artefact to deploy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">//go:embed backup.nomad
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">backupHcl</span> <span style="color:#66d9ef">string</span>
</span></span></code></pre></div><p>And the <code>backup.nomad</code> file itself is a go template with custom delimiters (<code>[[</code> and <code>]]</code>) for fields, as the <code>.nomad</code> file, can contain <code>{{ }}</code> when using the inbuilt templating for populating secrets, amongst other things:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>job <span style="color:#e6db74">&#34;[[ .JobID ]]&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  datacenters <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;dc1&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;batch&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  periodic <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    cron             <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;[[ .Schedule ]]&#34;</span>
</span></span><span style="display:flex;"><span>    prohibit_overlap <span style="color:#f92672">=</span> true
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  group <span style="color:#e6db74">&#34;backup&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    task <span style="color:#e6db74">&#34;backup&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;docker&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      config <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        image   <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;alpine:latest&#34;</span>
</span></span><span style="display:flex;"><span>        command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;echo&#34;</span>
</span></span><span style="display:flex;"><span>        args    <span style="color:#f92672">=</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;backing up [[ .SourceJobID ]]&#39;s [[ .TargetDB ]] database&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      env <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        PGHOST     <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;postgres.service.consul&#34;</span>
</span></span><span style="display:flex;"><span>        PGDATABASE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;[[ .TargetDB ]]&#34;</span>
</span></span><span style="display:flex;"><span>        AWS_REGION <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;eu-west-1&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="testing-manual">Testing (Manual)</h2>
<p>The great thing about developing against Nomad is that testing is straightforward.  We can start a local copy by running <code>nomad agent -dev</code>, and then run our application locally to check it works properly, <em>before</em> needing to package it up into a Docker container and deploying it to a real cluster.  It also doesn&rsquo;t need to be packaged in a container for Nomad; we could use <a href="https://www.nomadproject.io/docs/drivers/exec">Isolated Exec</a> or <a href="https://www.nomadproject.io/docs/drivers/raw_exec">Raw Exec</a> too.)</p>
<p>There is a <code>start.sh</code> script in the repository which will use <code>tmux</code> to start 3 terminals, one to run a Nomad agent in dev mode (<code>nomad agent -dev</code>), one to build and run the operator (<code>go build &amp;&amp; ./operator</code>), and one to register and deregister nomad jobs.</p>
<p>When all is ready, submit the example job with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nomad job run example.nomad
</span></span></code></pre></div><p>Will cause the following output in the operator&rsquo;s terminal:</p>
<pre tabindex="0"><code>==&gt; JobRegistered: example (pending)...
    Registering backup job
    Backup created: backup-example
--&gt; Done
==&gt; JobRegistered: backup-example (running)...
    Job is a backup, skipping
</code></pre><p>We can also check the Nomad UI, running on http://localhost:4646, which shows our two jobs:</p>
<p><img loading="lazy" src="nomad-backup-jobs.png" alt="nomad jobs showing the example service and the backup periodic job"  />
</p>
<p>Note how the <code>example</code> job is a <code>service</code>, which continuously runs, and the <code>backup-example</code> is a <code>periodic</code> job, scheduled to run daily.</p>
<p>Removing the example job  with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nomad job stop example
</span></span></code></pre></div><p>This will be seen by the operator, which will remove the backup job:</p>
<pre tabindex="0"><code>==&gt; JobDeregistered: example (running)...
    Trying to remove a backup, if any
==&gt; JobDeregistered: backup-example (dead)...
    Job is a backup, skipping
</code></pre><p>Note how it also sees the <code>backup-example</code> job being deregistered and ignores it as, in our case, backups don&rsquo;t have backups!</p>
<h2 id="testing-automated">Testing (Automated)</h2>
<p>We can also write automated tests in two ways for this operator; Tests that run against a saved or synthetic event stream, and tests that work in the same way as the manual test; start Nomad, run a test suite; stop Nomad.</p>
<p>Reading from a file of known events, we can test the <code>handleEvent</code> function directly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">seenEvents</span> <span style="color:#f92672">:=</span> []<span style="color:#66d9ef">string</span>{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">NewConsumer</span>(<span style="color:#66d9ef">nil</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">eventType</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">job</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">Job</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">seenEvents</span> = append(<span style="color:#a6e22e">seenEvents</span>, <span style="color:#a6e22e">eventType</span>)
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">line</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">eventsJson</span>, <span style="color:#e6db74">&#34;\n&#34;</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">events</span> <span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">Events</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>([]byte(<span style="color:#a6e22e">line</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">events</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">handleEvent</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">events</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">assert</span>.<span style="color:#a6e22e">Len</span>(<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">seenEvents</span>, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">assert</span>.<span style="color:#a6e22e">Equal</span>(<span style="color:#a6e22e">t</span>, []<span style="color:#66d9ef">string</span>{<span style="color:#e6db74">&#34;JobRegistered&#34;</span>, <span style="color:#e6db74">&#34;JobDeregistered&#34;</span>}, <span style="color:#a6e22e">seenEvents</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The other way of testing is running a nomad instance in dev mode next to the application and registering jobs to it.  Usually, when doing this, I would start the Nomad application before running the tests and then stop it after, to save the time of waiting for Nomad to start between each test:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">wait</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">bool</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">NewClient</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">Config</span>{})
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">assert</span>.<span style="color:#a6e22e">NoError</span>(<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">seenJobID</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">NewConsumer</span>(<span style="color:#a6e22e">client</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">eventType</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">job</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">Job</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">seenJobID</span> = <span style="color:#f92672">*</span><span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">wait</span> <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">go</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Start</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//register a job
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">job</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jobspec</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">withBackupHcl</span>))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">assert</span>.<span style="color:#a6e22e">NoError</span>(<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Jobs</span>().<span style="color:#a6e22e">Register</span>(<span style="color:#a6e22e">job</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">api</span>.<span style="color:#a6e22e">WriteOptions</span>{})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// block until the job handler has run once
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">wait</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">assert</span>.<span style="color:#a6e22e">Equal</span>(<span style="color:#a6e22e">t</span>, <span style="color:#f92672">*</span><span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>, <span style="color:#a6e22e">seenJobID</span>)
</span></span></code></pre></div><p>As this is running against a real copy of Nomad, we need to wait for jobs to be registered and only stop our test once things have been processed; hence we use a <code>bool</code> channel to block until our job handler has seen a job.</p>
<p>In a real test suite, you would need to make the job handler filter to the specific job it is looking for; as this would prevent shared state issues (currently this will stop after <em>any</em> job is seen), and thus allow you to run the tests in parallel.</p>
<h2 id="deployment">Deployment</h2>
<p>No operator pattern would be complete without pushing the operator itself into the Nomad cluster, and while we <em>could</em> just run the binary directly in Nomad (utilising the <a href="https://www.nomadproject.io/docs/job-specification/artifact">Artifact Stanza</a> and <a href="https://www.nomadproject.io/docs/drivers/exec">Isolated Exec</a>), its probably easier to create a docker container.</p>
<p>We have a single <code>Dockerfile</code> with a multistage build so that our output container only contains the binary itself, rather than all the layers and intermediate artefacts from the build process:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-dockerfile" data-lang="dockerfile"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.16.10-alpine3.14 as builder</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> go.mod go.sum ./<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go mod download<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . ./<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> go build<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine:3.14 as output</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> --from<span style="color:#f92672">=</span>builder /app/operator /usr/local/bin/operator<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Once the container is built and tagged:</p>
<pre tabindex="0"><code>docker build -t operator:local .
</code></pre><p>We can verify it works as intended by running the container directly; <code>--net=host</code> is passed to the <code>run</code> command so that the operator can connect to Nomad on <code>localhost:4646</code>, rather than having to pass in our host IP through an environment variable.  If you want to do this, add <code>-e NOMAD_ADDR=http://SOME_IP_OR_HOST:4646</code> to the <code>docker run</code> command:</p>
<pre tabindex="0"><code>docker run --rm -it --net=host operator:local
</code></pre><p>Assuming we&rsquo;re happy, we can run the Operator container in our local Nomad instance without pushing it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>task <span style="color:#e6db74">&#34;operator&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;docker&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    image <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;operator:latest&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  template <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;&lt;EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {{ with secret &#34;nomad/creds/operator-job&#34; }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    NOMAD_TOKEN={{ .Data.secret_id  | toJSON }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {{ end }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span>    destination <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;secrets/db.env&#34;</span>
</span></span><span style="display:flex;"><span>    env <span style="color:#f92672">=</span> true
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  env <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    NOMAD_ADDR <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nomad.service.consul&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="wrapping-up">Wrapping Up</h2>
<p>The Operator Pattern is a great way to handle everyday tasks that a cluster operator would normally, and I have used it to handle things like automatic backups, certificate generation (at least until Vault supports LetEncrypt), and job cleanup (for example, developer branch builds only stay in the cluster for 3 days.)</p>
]]></content:encoded></item><item><title>The Problem with CPUs and Kubernetes</title><link>https://andydote.co.uk/2021/06/02/os-cpus-and-kubernetes/</link><pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/06/02/os-cpus-and-kubernetes/</guid><description>Key Takeaway: os .cpus() returns the number of cores on a Kubernetes host, not the number of cores assigned to a pod.
Investigating excessive memory usage Recently, when I was looking through a cluster health dashboard for a Kubernetes cluster, I noticed that one of the applications deployed was using a considerable amount of RAM - way more than I thought could be reasonable. Each instance (pod) of the application used approximately 8 GB of RAM, which was definitely excessive for a reasonably simple NodeJS webserver.</description><content:encoded><![CDATA[<h2 id="key-takeaway">Key Takeaway:</h2>
<blockquote>
<p><code>os .cpus()</code> returns the number of cores on a Kubernetes host, not the number of cores assigned to a pod.</p>
</blockquote>
<h2 id="investigating-excessive-memory-usage">Investigating excessive memory usage</h2>
<p>Recently, when I was looking through a cluster health dashboard for a Kubernetes cluster, I noticed that one of the applications deployed was using a considerable amount of RAM - way more than I thought could be reasonable.  Each instance (pod) of the application used approximately 8 GB of RAM, which was definitely excessive for a reasonably simple NodeJS webserver.  Combined with the application running 20-30 replicas or so, it makes the total RAM usage between 160 GB and 240 GB.</p>
<p>One of the first things I noticed was that the deployment manifest in Kubernetes had the <code>NODE_MAX_MEM</code> environment variable specified and set to 250 MB:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">NODE_MAX_MEM</span>: <span style="color:#ae81ff">250</span>
</span></span></code></pre></div><p><em>Interesting</em>.  So how is a single container using more RAM than that?</p>
<p>The application used to be deployed to EC2 machines and to fully utilise the multiple cores in the machines, the <a href="https://www.npmjs.com/package/cluster">cluster</a> library was used.</p>
<p>This library essentially forks the node process into <code>n</code> child processes, and in this case, <code>n</code> was set to <code>os.cpus()</code>, which returns the number of cores available on the machine in NodeJS.</p>
<p>While this works for direct virtual machine usage, when the application was containerised and deployed to Kubernetes, it used about the same amount of ram as before, so no one realised there was a problem.</p>
<h2 id="oscpus-and-kubernetes">os.cpus() and Kubernetes</h2>
<p>The interesting thing about <code>os.cpus()</code> when called in a container in Kubernetes is that it reports the number of cores available on the host machine, not the amount of CPU assigned to the container (e.g. through resource requests and limits).</p>
<p>So every replica for the application spawns 32 child processes, as our EC2 hosts have that many cores.  As they had a limited per-pod CPU budget, was there any benefit to doing this?</p>
<p>So I did what seemed natural - I replaced <code>os.cpus()</code> with <code>1</code>, and deployed the application to production, and watched the performance metrics to see what happened.</p>
<p>And what do you know? No difference in request performance <em>at all</em> - and the memory usage dropped by 7.75 GB per pod.</p>
<p>This means overall, we have saved 155 GB to 232.5 GB of RAM, with no performance difference!</p>
]]></content:encoded></item><item><title>Adding Observability to Vault</title><link>https://andydote.co.uk/2021/05/27/vault-observe/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/05/27/vault-observe/</guid><description>One of the things I like to do when setting up a Vault cluster is to visualise all the operations Vault is performing, which helps see usage patterns changing, whether there are lots of failed requests coming in, and what endpoints are receiving the most traffic.
While Vault has a lot of data available in Prometheus telemetry, the kind of information I am after is best taken from the Audit backend.</description><content:encoded><![CDATA[<p>One of the things I like to do when setting up a Vault cluster is to visualise all the operations Vault is performing, which helps see usage patterns changing, whether there are lots of failed requests coming in, and what endpoints are receiving the most traffic.</p>
<p>While Vault has a lot of data available in Prometheus telemetry, the kind of information I am after is best taken from the Audit backend.  Setting up an audit backend for Vault is reasonably easy - it supports three methods of communication: file, socket and syslog.  For this application, I use a Unix socket and a small daemon running on the same machine as the Vault instance to send the data to a tracing system.</p>
<h2 id="the-goal">The Goal</h2>
<p>Write a small application that receives audit events and writes traces (spans) to an observability tool.   In this case, I am implementing both Honeycomb and Zipkin via OpenTelemetry.</p>
<p>The <a href="https://github.com/Pondidum/vault-observe">code is available on Github</a>, and the most interesting parts are covered in the rest of this blog post.</p>
<h2 id="receiving-and-processing-messages">Receiving and Processing Messages</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ln</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">Listen</span>(<span style="color:#e6db74">&#34;unix&#34;</span>, <span style="color:#e6db74">&#34;/tmp/observe.sock&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ln</span>.<span style="color:#a6e22e">Accept</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">message</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">conn</span>).<span style="color:#a6e22e">ReadBytes</span>(<span style="color:#e6db74">&#39;\n&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// do something with the message
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>We only need to do minimal processing of the data for this application before sending it on to Honeycomb or Zipkin.  As the messages contain nested objects, we need to flatten the object hierarchy for easier viewing in spans.  So instead of this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;operation&#34;</span>: <span style="color:#e6db74">&#34;update&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;namespace&#34;</span>: { <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;root&#34;</span> },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;path&#34;</span>: <span style="color:#e6db74">&#34;sys/audit/socket&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;data&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;local&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We want to send this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.operation&#34;</span>: <span style="color:#e6db74">&#34;update&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.namespace.id&#34;</span>: <span style="color:#e6db74">&#34;root&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.path&#34;</span>: <span style="color:#e6db74">&#34;sys/audit/socket&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request.data.local&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We also want to get a few strongly typed pieces of data out of the message, too, such as the <code>type</code> (<code>request</code> or <code>response</code>) and the request&rsquo;s <code>id</code>, which is in both messages and can be used to group the spans.</p>
<p>To save us from deserialising the json twice, we can do the following:</p>
<ol>
<li>deserialize into a <code>map[string]interface{}</code></li>
<li>create a flattened version of the event using the <a href="https://pkg.go.dev/github.com/jeremywohl/flatten">flatten</a> library</li>
<li>turn the map into a typed struct using the <a href="https://pkg.go.dev/github.com/mitchellh/mapstructure">mapstructure</a> library</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// 1 deserialize
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">event</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">interface</span>{}{}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">message</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">event</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 2 flatten
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">flat</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">flatten</span>.<span style="color:#a6e22e">Flatten</span>(<span style="color:#a6e22e">event</span>, <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#a6e22e">flatten</span>.<span style="color:#a6e22e">DotStyle</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 3 type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">typed</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Event</span>{}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mapstructure</span>.<span style="color:#a6e22e">Decode</span>(<span style="color:#a6e22e">event</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">typed</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now that we have our flattened version and our typed version of the message, we can forward it to our span processors.  There are two implementations (3 if you count <code>stdout</code>), so let&rsquo;s look at them one at a time.</p>
<h2 id="honeycomb">Honeycomb</h2>
<p>To send the spans to Honeycomb, I am using their lower-level library <a href="https://pkg.go.dev/github.com/honeycombio/libhoney-go">libhoney-go</a>, rather than the more usual <a href="https://pkg.go.dev/github.com/honeycombio/beeline-go">beeline</a> as I don&rsquo;t need all the <code>context</code> propagation or automatic ID generation.</p>
<p>For the first version of this application, just sending the two events to Honeycomb linked together is enough; however, both spans will show  0ms durations.  We&rsquo;ll fix this problem for both Honeycomb and OpenTelemetry later.</p>
<p>To link our spans together properly, I use the <code>.Request.ID</code> property from the event as the <code>trace.trace_id</code>; it&rsquo;s already a guid and is the same for both the request and response events.  Then, for a <code>request</code> event, I make it the parent span by using the <code>.Request.ID</code> again, but this time as the <code>trace.span_id</code>.  Finally, for the <code>response</code> event, I set the <code>trace.parent_id</code> to the <code>.Request.ID</code>, and generate a random value for the <code>trace.span_id</code> field.</p>
<p>Lastly, I loop through the flattened version of the event, adding each key-value pair to the event&rsquo;s attributes and finally send the event.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">NewEvent</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.trace_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;request&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.span_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.parent_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.span_id&#34;</span>, <span style="color:#a6e22e">generateSpanID</span>())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;service_name&#34;</span>, <span style="color:#e6db74">&#34;vault&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">event</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">val</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Send</span>()
</span></span></code></pre></div><h2 id="zipkin--opentelemetry">Zipkin / OpenTelemetry</h2>
<p>The process for sending via OpenTelemetry is reasonably similar; we start a new span, copy the flattened structure into the span&rsquo;s attributed and call <code>End()</code>, making the TracerProvider send the span to our configured backends (Zipkin in this case.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">id</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">Parse</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithValue</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#e6db74">&#34;request_id&#34;</span>, <span style="color:#a6e22e">id</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">GetTracerProvider</span>().<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;main&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithSpanKind</span>(<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanKindServer</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">value</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">event</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">SetAttributes</span>(<span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">KeyValue</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Key</span>:   <span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">Key</span>(<span style="color:#a6e22e">key</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Value</span>: <span style="color:#a6e22e">attribute</span>.<span style="color:#a6e22e">StringValue</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%v&#34;</span>, <span style="color:#a6e22e">value</span>)),
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Error</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">SetStatus</span>(<span style="color:#a6e22e">codes</span>.<span style="color:#a6e22e">Error</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Error</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>()
</span></span></code></pre></div><p>The hard part was figuring out how to feed the <code>.Request.ID</code> into the Tracer as the TraceID, which was achieved by configuring OpenTelemetry with a custom ID generator that would use the <code>request_id</code> property of the current <code>context</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Generator</span> <span style="color:#66d9ef">struct</span>{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">g</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Generator</span>) <span style="color:#a6e22e">NewIDs</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>) (<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">TraceID</span>, <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanID</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">Value</span>(<span style="color:#e6db74">&#34;request_id&#34;</span>).(<span style="color:#a6e22e">uuid</span>.<span style="color:#a6e22e">UUID</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tid</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">TraceID</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">val</span>.<span style="color:#a6e22e">MarshalText</span>()
</span></span><span style="display:flex;"><span>  copy(<span style="color:#a6e22e">tid</span>[:], <span style="color:#a6e22e">req</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sid</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanID</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Read</span>(<span style="color:#a6e22e">sid</span>[:])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tid</span>, <span style="color:#a6e22e">sid</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I am sure more copying and allocation is happening in this method than necessary, but it is good enough for now.  Configuring it for use by OpenTelemetry is straightforward; it just needs adding to the <code>NewTracerProvider</code> call by wrapping it with <code>trace.WithIDGenerator()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">exporter</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">zipkin</span>.<span style="color:#a6e22e">NewRawExporter</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;http://localhost:9411/api/v2/spans&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">zipkin</span>.<span style="color:#a6e22e">WithSDKOptions</span>(<span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithSampler</span>(<span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">AlwaysSample</span>())),
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">processor</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">NewSimpleSpanProcessor</span>(<span style="color:#a6e22e">exporter</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tp</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">NewTracerProvider</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithSpanProcessor</span>(<span style="color:#a6e22e">processor</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithResource</span>(<span style="color:#a6e22e">resource</span>.<span style="color:#a6e22e">NewWithAttributes</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">semconv</span>.<span style="color:#a6e22e">ServiceNameKey</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;vault-observe&#34;</span>),
</span></span><span style="display:flex;"><span>  )),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sdktrace</span>.<span style="color:#a6e22e">WithIDGenerator</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Generator</span>{}),
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">SetTracerProvider</span>(<span style="color:#a6e22e">tp</span>)
</span></span></code></pre></div><h2 id="testing">Testing</h2>
<p>To verify that it works, I have a single <code>docker-compose.yml</code> file which sets up a Vault instance in dev mode, and a Zipkin instance.  It mounts the current working directory into the Vault container as <code>/sockets</code> to share the socket file between the host and the container.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3.9&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">vault</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">vault:latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cap_add</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">IPC_LOCK</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;./:/sockets:rw&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;8200:8200&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">VAULT_DEV_ROOT_TOKEN_ID</span>: <span style="color:#e6db74">&#34;vault&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">zipkin</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">openzipkin/zipkin-slim</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;9411:9411&#34;</span>
</span></span></code></pre></div><p>Running the application along with the docker container is now as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>go build
</span></span><span style="display:flex;"><span>docker-compose up -d
</span></span><span style="display:flex;"><span>./vault-observe --zipkin --socket-path observe.sock
</span></span></code></pre></div><p>In another terminal, you can now enable the new audit backend and send some requests so we can look at them in Zipkin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:8200&#34;</span>
</span></span><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vault&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault audit enable socket address<span style="color:#f92672">=</span>/sockets/observe.sock socket_type<span style="color:#f92672">=</span>unix
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault secrets enable -version<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> kv
</span></span><span style="display:flex;"><span>vault kv put /secrets/test name<span style="color:#f92672">=</span>andy
</span></span><span style="display:flex;"><span>vault kv get /secrets/test
</span></span></code></pre></div><h2 id="running-in-production">Running in Production</h2>
<p>There are a few things you should be aware of, running this in production:</p>
<ul>
<li>This <em>must not</em> be your only audit backend: Vault will fail requests if they are not successfully written to at least one audit backend if any are enabled.</li>
<li>There is the possibility of losing data if the <code>vault-observe</code> process stops</li>
</ul>
<h2 id="improvements">Improvements</h2>
<p>As I am using this for keeping an eye on request durations and patterns in behaviour, capturing the actual time it takes for Vault to handle a request would be pretty valuable.  So instead of processing both events, I will keep just the timestamp from the <code>request</code>, and then when the <code>response</code> event comes in, look up the timestamp and calculate the duration.</p>
<p>As I don&rsquo;t want an ever-expanding list of timestamps in memory, I use an <a href="https://pkg.go.dev/github.com/patrickmn/go-cache">automatically expiring cache</a> so keep them for around 10 seconds, as no request to Vault should be that slow!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">requests</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cache</span>.<span style="color:#a6e22e">New</span>(<span style="color:#ae81ff">10</span><span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>, <span style="color:#ae81ff">1</span><span style="color:#f92672">*</span><span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Minute</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">processMessage</span>(<span style="color:#a6e22e">requests</span>, <span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">sender</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">EOF</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>processMessage</code> function now handles the <code>request</code> and <code>response</code> messages separately.  The <code>request</code> just inserts the event&rsquo;s <code>time</code> property into the cache, and exists:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;request&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">requests</span>.<span style="color:#a6e22e">Set</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Time</span>, <span style="color:#a6e22e">cache</span>.<span style="color:#a6e22e">DefaultExpiration</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>response</code>  version pulls the time back out of the cache and stores it into the event itself - it&rsquo;s then up to the sender if it wants to use the value or not.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;response&#34;</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">found</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">requests</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>); <span style="color:#a6e22e">found</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span> = <span style="color:#a6e22e">x</span>.(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Time</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">requests</span>.<span style="color:#a6e22e">Delete</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;No request found in the cache for %s&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the Honeycomb sender, we can remove all the parenting logic; we only need to set the <code>Timestamp</code> and <code>duration_ms</code> fields to get the duration showing correctly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">duration</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Time</span>.<span style="color:#a6e22e">Sub</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span>).<span style="color:#a6e22e">Milliseconds</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">libhoney</span>.<span style="color:#a6e22e">NewEvent</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Timestamp</span> = <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;duration_ms&#34;</span>, <span style="color:#a6e22e">duration</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.trace_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#e6db74">&#34;trace.span_id&#34;</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Request</span>.<span style="color:#a6e22e">ID</span>)
</span></span></code></pre></div><p>For the OpenTelemetry sender, we can add a <code>trace.WithTimestamp()</code> call to both the <code>Start()</code> and <code>End()</code> calls so use our events&rsquo; timestamps:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithValue</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#e6db74">&#34;request_id&#34;</span>, <span style="color:#a6e22e">id</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">tr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">otel</span>.<span style="color:#a6e22e">GetTracerProvider</span>().<span style="color:#a6e22e">Tracer</span>(<span style="color:#e6db74">&#34;main&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tr</span>.<span style="color:#a6e22e">Start</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithSpanKind</span>(<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">SpanKindServer</span>), <span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithTimestamp</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">StartTime</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">End</span>(<span style="color:#a6e22e">trace</span>.<span style="color:#a6e22e">WithTimestamp</span>(<span style="color:#a6e22e">typed</span>.<span style="color:#a6e22e">Time</span>))
</span></span></code></pre></div>]]></content:encoded></item><item><title>Observability with Infrastructure as Code</title><link>https://andydote.co.uk/2021/03/01/observability-with-infrastructure-as-code/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2021/03/01/observability-with-infrastructure-as-code/</guid><description>This article was originally published on the Pulumi blog.
When using the Pulumi Automation API to create applications which can provision infrastructure, it is very handy to be able to use observability techniques to ensure the application functions correctly and to help see where performance bottlenecks are.
One of the applications I work on creates a VPC and Bastion host and then stores the credentials into a Vault instance. The problem is that the “create infrastructure” part is an opaque blob, in that I can see it takes 129 seconds to create, but I can’t see what it’s doing, or why it takes this amount of time.</description><content:encoded><![CDATA[<blockquote>
<p>This article was originally published on the <a href="https://www.pulumi.com/blog/observability-with-infrastructure-as-code/">Pulumi blog</a>.</p>
</blockquote>
<p>When using the <a href="https://www.pulumi.com/blog/tag/automation-api/">Pulumi Automation API</a> to create applications which can provision infrastructure, it is very handy to be able to use observability techniques to ensure the application functions correctly and to help see where performance bottlenecks are.</p>
<p>One of the applications I work on creates a VPC and Bastion host and then stores the credentials into a Vault instance.  The problem is that the “create infrastructure” part is an opaque blob, in that I can see it takes 129 seconds to create, but I can’t see what it’s doing, or why it takes this amount of time.</p>
<p><img loading="lazy" src="pulumi-observability-before.png" alt="honeycomb traces of one pulumi stack resource"  />
</p>
<p>So can I do better?</p>
<h2 id="the-initial-application">The Initial Application</h2>
<p>In this example I use <a href="https://honeycomb.io/">Honeycomb&rsquo;s</a> <a href="https://github.com/honeycombio/beeline-go/">Go Beeline</a> to capture all the data I care about; durations, errors, any context which is “interesting”:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">Init</span>(<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">Config</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">WriteKey</span>: <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">&#34;HONEYCOMB_API_KEY&#34;</span>),
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Dataset</span>:  <span style="color:#e6db74">&#34;pulumi-demo&#34;</span>,
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">span</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">StartSpan</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#e6db74">&#34;basic-vpc&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">span</span>.<span style="color:#a6e22e">Send</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">name</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">auto</span>.<span style="color:#a6e22e">FullyQualifiedStackName</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">&#34;PULUMI_USERNAME&#34;</span>), <span style="color:#e6db74">&#34;basic-vpc&#34;</span>, <span style="color:#e6db74">&#34;dev&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">stack</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">auto</span>.<span style="color:#a6e22e">UpsertStackInlineSource</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">name</span>, <span style="color:#e6db74">&#34;basic-vpc&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">pc</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumi</span>.<span style="color:#a6e22e">Context</span>) <span style="color:#66d9ef">error</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">azs</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">getAvailabilityZones</span>(<span style="color:#a6e22e">ctx</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">v</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">vpc</span>.<span style="color:#a6e22e">NewVpc</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">pc</span>, <span style="color:#e6db74">&#34;dev&#34;</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">vpc</span>.<span style="color:#a6e22e">VpcArgs</span>{
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">Description</span>:           <span style="color:#e6db74">&#34;dev&#34;</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">BaseCidr</span>:              <span style="color:#e6db74">&#34;192.168.0.0/16&#34;</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">AvailabilityZoneNames</span>: <span style="color:#a6e22e">azs</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">S3Endpoint</span>:            <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">DynamoEndpoint</span>:        <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>		})
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">SetConfig</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;aws:region&#34;</span>, <span style="color:#a6e22e">auto</span>.<span style="color:#a6e22e">ConfigValue</span>{<span style="color:#a6e22e">Value</span>: <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getenv</span>(<span style="color:#e6db74">&#34;PULUMI_REGION&#34;</span>)}); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ws</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Workspace</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ws</span>.<span style="color:#a6e22e">InstallPlugin</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;aws&#34;</span>, <span style="color:#e6db74">&#34;v3.23.0&#34;</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Refresh</span>(<span style="color:#a6e22e">ctx</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">stream</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">optup</span>.<span style="color:#a6e22e">ProgressStreams</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Up</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">stream</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//vault code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="adding-infrastructure-observability">Adding Infrastructure Observability</h2>
<p>To get a handle on what is happening when <code>stack.Up()</code> runs, I have mplemented a custom <code>io.Writer</code>, which will be passed into the <code>ProgressStream</code> constructor.</p>
<p>The custom progress stream&rsquo;s <code>Write</code> method is called once for each line emitted,  which allows us to start new spans when a resource starts being constructed, and send them when construction completes.  Currently, this is achieved by parsing the console output text, but I gather in the future, it will be possible to get streamed json blobs which can be unmarshaled into go structs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">pulumiBeeline</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span>      <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">contexts</span> <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">func</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">NewPulumiBeeline</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumiBeeline</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pulumiBeeline</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">ctx</span>:  	<span style="color:#a6e22e">ctx</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">contexts</span>: <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">func</span>(){},
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">cw</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pulumiBeeline</span>) <span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">p</span> []<span style="color:#66d9ef">byte</span>) (<span style="color:#a6e22e">n</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// todo: make more robust, support modifications, deletions etc.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">line</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">TrimSpace</span>(string(<span style="color:#a6e22e">p</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">parts</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">line</span>, <span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">parts</span>) &lt; <span style="color:#ae81ff">5</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">p</span>), <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">//+  aws-vpc dev creating
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">//+  &lt;type&gt; &lt;name&gt; &lt;action&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">resourceType</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">parts</span>[<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">resourceName</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">parts</span>[<span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">resourceAction</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">parts</span>[<span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">resourceAction</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;creating&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">StartSpan</span>(<span style="color:#a6e22e">cw</span>.<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">resourceName</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">c</span>, <span style="color:#e6db74">&#34;type&#34;</span>, <span style="color:#a6e22e">resourceType</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// add other things here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">cw</span>.<span style="color:#a6e22e">contexts</span>[<span style="color:#a6e22e">resourceName</span>] = <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Send</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">resourceAction</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;created&#34;</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">cw</span>.<span style="color:#a6e22e">contexts</span>[<span style="color:#a6e22e">resourceName</span>]()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> len(<span style="color:#a6e22e">p</span>), <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Modifying the <code>optup.ProgressStreams</code> is the only change needed to the original application:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">stream</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">optup</span>.<span style="color:#a6e22e">ProgressStreams</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>, <span style="color:#a6e22e">NewPulumiBeeline</span>(<span style="color:#a6e22e">ctx</span>))
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stack</span>.<span style="color:#a6e22e">Up</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">stream</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">beeline</span>.<span style="color:#a6e22e">AddField</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;err&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now when I run this program again, I can see a lot more information in my Honeycomb traces, which not only shows me that Pulumi is <em>highly</em> parallelised, but also gives me a better idea of where the time is taken when creating infrastructure; in this example, it’s the NAT Gateways:</p>
<p><img loading="lazy" src="pulumi-observability-after.png" alt="honeycomb traces of all infrastructure resources in the pulumi stack"  />
</p>
<p>In the future, I want to expand this to cover far more details, such as including the reasons resources were created/modified/destroyed and including as much information as possible about what caused a resource to fail.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>In the end, this turned out to be much easier to achieve than I had hoped.  Being able to use Pulumi progmatically, rather than running <code>os.Exec</code> directly myself was a huge productivity boost.</p>
<p>I am looking forward to all the new kinds of tooling I can build to solve my user&rsquo;s problems continuing to utilise Honeycomb for my observability and Pulumi for my infrastructure.</p>
]]></content:encoded></item><item><title>Nomad Isolated Exec</title><link>https://andydote.co.uk/2020/02/29/nomad-isolated-exec/</link><pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2020/02/29/nomad-isolated-exec/</guid><description>One of the many features of Nomad that I like is the ability to run things other than Docker containers. It has built-in support for Java, QEMU, and Rkt, although the latter is deprecated. Besides these inbuilt &amp;ldquo;Task Drivers&amp;rdquo; there are community maintained ones too, covering Podman, LXC, Firecraker and BSD Jails, amongst others.
The one I want to talk about today, however, is called exec. This Task Driver runs any given executable, so if you have an application which you don&amp;rsquo;t want (or can&amp;rsquo;t) put into a container, you can still schedule it with Nomad.</description><content:encoded><![CDATA[<p>One of the many features of <a href="https://nomadproject.io">Nomad</a> that I like is the ability to run things other than Docker containers.  It has built-in support for Java, QEMU, and Rkt, although the latter is deprecated.  Besides these inbuilt &ldquo;Task Drivers&rdquo; there are community maintained ones too, covering Podman, LXC, Firecraker and BSD Jails, amongst others.</p>
<p>The one I want to talk about today, however, is called <code>exec</code>.  This Task Driver runs any given executable, so if you have an application which you don&rsquo;t want (or can&rsquo;t) put into a container, you can still schedule it with Nomad.  When I run demos (particularly at conferences), I try to have everything runnable without an internet connection, which means I have to make sure all the Docker containers I wish to run are within a local Docker Registry already, and, well, sometimes I forget.  By using <code>exec</code>, I can serve a binary off my machine with no container overheads involved.</p>
<h2 id="insecurity">Insecurity?</h2>
<p>Until recently, I had always considered <code>exec</code> as a tradeoff: I don&rsquo;t need a docker container, but I lose the isolation of the container, and the application I run has full access to everything on this host.</p>
<p>What I hadn&rsquo;t realised, is that <code>exec</code> actually uses the host operating system&rsquo;s isolation features via the <a href="https://pkg.go.dev/github.com/opencontainers/runc/libcontainer?tab=doc">libcontainer</a> package to contain the application.  On Linux, this means using <code>cgroups</code> and a <code>chroot</code>, making the level of isolation roughly the same as a docker container provides.</p>
<p>When you specify a binary to run, it must meet a few criteria:</p>
<ul>
<li>An absolute path within Nomad&rsquo;s <code>chroot</code></li>
<li>A relative path within the Allocation Directory</li>
</ul>
<p>For instance, to run a dotnet core application consists of invoking <code>/usr/bin/dotnet</code> with the relative path of the dll extracted from the artifact:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>task <span style="color:#e6db74">&#34;consumer&#34;</span> {
</span></span><span style="display:flex;"><span>    driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;exec&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    config {
</span></span><span style="display:flex;"><span>        command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/usr/bin/dotnet&#34;</span>
</span></span><span style="display:flex;"><span>        args <span style="color:#f92672">=</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;local/Consumer.dll&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    artifact {
</span></span><span style="display:flex;"><span>        source <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://s3.internal.net/consumer-dotnet.zip&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Whereas running a go binary can be done with a path relative to the allocation directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>task <span style="color:#e6db74">&#34;consumer&#34;</span> {
</span></span><span style="display:flex;"><span>    driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;exec&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    config {
</span></span><span style="display:flex;"><span>        command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;local/consumer&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    artifact {
</span></span><span style="display:flex;"><span>        source <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://s3.internal.net/consumer-go.zip&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>But what happens if we want to run a binary which is not within the default chroot environment used by <code>exec</code>?</p>
<h2 id="configuring-the-chroot-environment">Configuring The chroot Environment</h2>
<p>By default, Nomad links the following paths into the task&rsquo;s chroot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/bin&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/etc&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/lib&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/lib32&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/lib64&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/run/resolvconf&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/sbin&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/usr&#34;</span>
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>We can configure the <code>chroot</code> per Nomad client, meaning we can provision nodes with different capabilities if necessary.  This is done with the <code>chroot_env</code> setting in the client&rsquo;s configuration file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>client {
</span></span><span style="display:flex;"><span>  chroot_env {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/bin&#34;</span>            <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/bin&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/etc&#34;</span>            <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/etc&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/lib&#34;</span>            <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/lib&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/lib32&#34;</span>          <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/lib32&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/lib64&#34;</span>          <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/lib64&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/run/resolvconf&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/run/resolvconf&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/sbin&#34;</span>           <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/sbin&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/usr&#34;</span>            <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/usr&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/vagrant&#34;</span>        <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/vagrant&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this case, I have added in the <code>/vagrant</code> path, which is useful as I usually provision a Nomad cluster using <a href="https://vagrantup.com">Vagrant</a>, and thus have all my binaries etc. available in <code>/vagrant</code>.  It means that my <code>.nomad</code> files for the demo have something like this for their tasks:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>task <span style="color:#e6db74">&#34;dashboard&#34;</span> {
</span></span><span style="display:flex;"><span>    driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;exec&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    config {
</span></span><span style="display:flex;"><span>        command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/vagrant/apps/bin/dashboard&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Meaning I don&rsquo;t need to host a Docker Registry, or HTTP server to expose my applications to the Nomad cluster.</p>
<h2 id="need-full-access">Need Full Access?</h2>
<p>If you need full access to the host machine, you can use the non-isolating version of <code>exec</code>, called <code>raw_exec</code>.  <code>raw_exec</code> works in the same way as <code>exec</code>, but without using <code>cgroups</code> and <code>chroot</code>.  As this would be a security risk, it must be enabled on each Nomad client:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>client {
</span></span><span style="display:flex;"><span>    enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plugin <span style="color:#e6db74">&#34;raw_exec&#34;</span> {
</span></span><span style="display:flex;"><span>    config {
</span></span><span style="display:flex;"><span>        enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="wrapping-up">Wrapping Up</h2>
<p>One of the many reasons I like Nomad is its simplicity, especially when compared to something as big and complex as Kubernetes.  Whenever I look into how Nomad works, I always seem to come away with the feeling that it has been well thought out, and how flexible it is because of this.</p>
<p>Being able to configure the chroot used by the Nomad clients means I can simplify my various demos further, as I can remove the need to have a webserver for an artifact source. As always, the less accidental complexity you have in your system, the better.</p>
]]></content:encoded></item><item><title>Consul DNS Fowarding in Alpine, revisited</title><link>https://andydote.co.uk/2019/12/30/consul-alpine-dns-revisited/</link><pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/12/30/consul-alpine-dns-revisited/</guid><description>I noticed when running an Alpine based virtual machine with Consul DNS forwarding set up, that sometimes the machine couldn&amp;rsquo;t resolve *.consul domains, but not in a consistent manner. Inspecting the logs looked like the request was being made and responded to successfully, but the result was being ignored.
After a lot of googling and frustration, I was able to track down that it&amp;rsquo;s down to a difference (or optimisation) in musl libc, which glibc doesn&amp;rsquo;t do.</description><content:encoded><![CDATA[<p>I noticed when running an Alpine based virtual machine with Consul DNS forwarding set up, that sometimes the machine couldn&rsquo;t resolve <code>*.consul</code> domains, but not in a consistent manner. Inspecting the logs looked like the request was being made and responded to successfully, but the result was being ignored.</p>
<p>After a lot of googling and frustration, I was able to track down that it&rsquo;s down to a difference (or optimisation) in musl libc, which glibc doesn&rsquo;t do. From Musl libc&rsquo;s <a href="https://wiki.musl-libc.org/functional-differences-from-glibc.html">Functional differences from glibc</a> page, we can see under the Name Resolver/DNS section the relevant information:</p>
<blockquote>
<p>Traditional resolvers, including glibc&rsquo;s, make use of multiple nameserver lines in resolv.conf by trying each one in sequence and falling to the next after one times out. musl&rsquo;s resolver queries them all in parallel and accepts whichever response arrives first.</p>
</blockquote>
<p>The machine&rsquo;s <code>/etc/resolv.conf</code> file has two <code>nameserver</code> specified:</p>
<pre tabindex="0"><code>nameserver 127.0.0.1
nameserver 192.168.121.1
</code></pre><p>The first is our <code>Unbound</code> instance which handles the forwarding to Consul, and the second is the DHCP set DNS server, in this case, libvirt/qemu&rsquo;s dnsmasq instance.</p>
<p>When running in a glibc based system, queries go to the first <code>nameserver</code>, and then if that can&rsquo;t resolve the request, it is then sent to the next <code>nameserver</code>, and so forth. As Alpine Linux uses muslc, it makes the requests in parallel and uses the response from whichever response comes back first.</p>
<p><img loading="lazy" src="muslc-dns.png" alt="sequence diagram, showing parallel DNS requests"  />
</p>
<p>When the DHCP DNS server is a network hop away, the latency involved means our resolution usually works, as the queries will hit the local DNS and get a response first. However, when the DHCP DNS is not that far away, for example when it is the DNS server that libvirt runs in the virtual network the machine is attached to, it becomes much more likely to get a response from that DNS server first, causing the failures I was seeing.</p>
<p>The solution to this is to change the setup so that all requests go to Unbound, which can then decide where to send them on to.  This also has the additional benefits of making all DNS requests work the same on all systems; regardless of glibc or muslc being used.</p>
<p><img loading="lazy" src="unbound-dns.png" alt="sequence diagram, showing all DNS requests going through unbound"  />
</p>
<h2 id="rebuilding-dns-resolution">Rebuilding DNS Resolution</h2>
<p>You can follow the same instructions in my previous <a href="/2019/05/31/consul-dns-forwarding-alpine/#run-consul">Consul DNS forwarding</a> post to setup Consul, as that is already in the right state for us.</p>
<p>Once Consul is up and running, it&rsquo;s time to fix the rest of our pipeline.</p>
<h3 id="unbound">Unbound</h3>
<p>First, install <code>unbound</code> and configure it to start on boot:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apk add unbound
</span></span><span style="display:flex;"><span>rc-update add unbound
</span></span></code></pre></div><p>The unbound config file (<code>/etc/unbound/unbound.conf</code>) is almost the same as the previous version, except we also have an <code>include</code> statement, pointing to a second config file, which we will generate shortly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">server</span>:
</span></span><span style="display:flex;"><span> <span style="color:#f92672">verbosity</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">do-not-query-localhost</span>: <span style="color:#66d9ef">no</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">domain-insecure</span>: <span style="color:#e6db74">&#34;consul&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">stub-zone</span>:
</span></span><span style="display:flex;"><span> <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;consul&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">stub-addr</span>: <span style="color:#ae81ff">127.0.0.1</span>@<span style="color:#ae81ff">8600</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">include</span>: <span style="color:#e6db74">&#34;/etc/unbound/forward.conf&#34;</span>
</span></span></code></pre></div><h3 id="dhclient">Dhclient</h3>
<p>Next, we install <code>dhclient</code> so that we can make use of it&rsquo;s hooks feature to generate our additional unbound config file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apk add dhclient
</span></span></code></pre></div><p>Create a config file for dhclient (<code>/etc/dhcp/dhclient.conf</code>), which again is almost the same as the previous post, but this time doesn&rsquo;t specify <code>prepend domain-name-servers</code>:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;
send host-name = gethostname();
request subnet-mask, broadcast-address, time-offset, routers,
 domain-name, domain-name-servers, domain-search, host-name,
 dhcp6.name-servers, dhcp6.domain-search, dhcp6.fqdn, dhcp6.sntp-servers,
 netbios-name-servers, netbios-scope, interface-mtu,
 rfc3442-classless-static-routes, ntp-servers;
</code></pre><p>Now we can write two hooks. The first is an enter hook, which we can use to write the <code>forward.conf</code> file out.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>touch /etc/dhclient-enter-hooks
</span></span><span style="display:flex;"><span>chmod +x /etc/dhclient-enter-hooks
</span></span></code></pre></div><p>The content is a single statement to write the <code>new_domain_name_servers</code> value into a <code>forward-zone</code> for unbound:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>cat <span style="color:#e6db74">&lt;&lt;-EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">forward-zone:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> name: &#34;.&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> forward-addr: ${new_domain_name_servers}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">)</span> | sudo tee /etc/unbound/forward.conf
</span></span></code></pre></div><p>The second hook is an exit ook, which runs after dhclient has finished writing out all the files it controls (such as <code>/etc/resolv.conf</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>touch /etc/dhclient-exit-hooks
</span></span><span style="display:flex;"><span>chmod +x /etc/dhclient-exit-hooks
</span></span></code></pre></div><p>The content is a single <code>sed</code> statement to replace the address of <code>nameserver</code> directives written to the <code>/etc/resolv.conf</code> with the unbound address:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>sudo sed -i <span style="color:#e6db74">&#39;s/nameserver.*/nameserver 127.0.0.1/g&#39;</span> /etc/resolv.conf
</span></span></code></pre></div><p>It&rsquo;s worth noting; we could put the content of the <code>enter</code> hook into the <code>exit</code> hook if you would rather.</p>
<p>Finally, we can delete our current <code>resolv.conf</code> and restart the networking service:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rm /etc/resolv.conf <span style="color:#75715e"># hack due to it dhclient making an invalid `chown` call.</span>
</span></span><span style="display:flex;"><span>rc-service networking restart
</span></span></code></pre></div><h2 id="testing">Testing</h2>
<p>We can now test that we can resolve the three kinds of address we care about:</p>
<ul>
<li><code>dig consul.service.consul</code> - should return the <code>eth0</code> ip of the machine</li>
<li><code>dig alpinetest.karhu.xyz</code> - should be resolved by libvirt&rsquo;s dnsmasq instance</li>
<li><code>dig example.com</code> - should be resolved by an upstream DNS server</li>
</ul>
<h2 id="conculsion">Conculsion</h2>
<p>This was an interesting and somewhat annoying problem to solve, but it means I have a more robust setup in my virtual machines now. It&rsquo;s interesting to note that if the DNS server from DHCP were not a local instance, the network latency added would make all the system function properly most of the time, as the local instance would answer before the remote instance could.</p>
]]></content:encoded></item><item><title>Nomad Good, Kubernetes Bad</title><link>https://andydote.co.uk/2019/11/21/nomad-good-kubernetes-bad/</link><pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/11/21/nomad-good-kubernetes-bad/</guid><description>I will update this post as I learn more (both positive and negative), and is here to be linked to when people ask me why I don&amp;rsquo;t like Kubernetes, and why I would pick Nomad in most situations if I chose to use an orchestrator at all.
TLDR: I don&amp;rsquo;t like complexity, and Kubernetes has more complexity than benefits.
Operational Complexity Operating Nomad is very straight forward. There are very few moving parts, so the number of things which can go wrong is significantly reduced.</description><content:encoded><![CDATA[<p>I will update this post as I learn more (both positive and negative), and is here to be linked to when people ask me why I don&rsquo;t like Kubernetes, and why I would pick Nomad in most situations if I chose to use an orchestrator <em>at all</em>.</p>
<p>TLDR: I don&rsquo;t like complexity, and Kubernetes has more complexity than benefits.</p>
<h3 id="operational-complexity">Operational Complexity</h3>
<p>Operating Nomad is very straight forward.  There are very few moving parts, so the number of things which can go wrong is significantly reduced.  No external dependencies are required to run it, and there is only one binary to use.  You run 3-5 copies in Server mode to manage the cluster and as many as you want running in Client mode to do the actual work.  You can add Consul if you want service discovery, but it&rsquo;s optional.  More on that later.</p>
<p>Compare this to operating a Kubernetes cluster.  There are multiple Kubernetes orchestration projects, tools, and companies to get clusters up and running, which should be an indication of the level of complexity involved.  Once you have the cluster set up, you need to keep it running.  There are so many moving parts (Controller Manager, Scheduler, API Server, Etcd, Kubelets) that it quickly becomes a full-time job to keep the cluster up and running.  Use a cloud service to run Kubernetes, and if you must use your own infrastructure, pay someone else to manage it.  It&rsquo;s cheaper in the long run. Trust me.</p>
<h3 id="deployment">Deployment</h3>
<p>Nomad, being a single binary, is easy to deploy.  If you want to use <a href="https://www.terraform.io/">Terraform</a> to create a cluster, Hashicorp provides modules for both <a href="https://github.com/hashicorp/terraform-aws-nomad">AWS</a> and <a href="https://github.com/hashicorp/terraform-azurerm-nomad">Azure</a>.  Alternatively, you can do everything yourself, as it&rsquo;s just keeping one binary running on hosts, and a bit of network/DNS config to get them talking to each other.</p>
<p>By comparison, Kubernetes has a multitude of tools to help you deploy a cluster. Still, while it gives you a lot of flexibility in choice, you also have to hope that the tool continues to exist and that there is enough community/company/documentation about that specific tool to help you when something goes wrong.</p>
<h3 id="upgrading-the-cluster">Upgrading The Cluster</h3>
<p>Upgrading Nomad involves doing a rolling deployment of the Servers and Clients.  If you are using the Hashicorp Terraform module, you re-apply the module with the new AMI ID to use, and then delete nodes (gracefully!) from the cluster and let the AutoScaleGroup take care of bringing new nodes up.  If you need to revert to an older version of Nomad, you follow the same process.</p>
<p>When it comes to Kubernetes, please pay someone else to do it.  It&rsquo;s not a fun process.  The process will differ depending on which cluster management tool you are using, and you also need to think about updates to etcd and managing state in the process.  There is a <a href="https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/">nice long document</a> on how to upgrade etcd.</p>
<h3 id="debugging-a-cluster">Debugging a Cluster</h3>
<p>As mentioned earlier, Nomad has a small number of moving parts.  There are three ports involved (HTTP, RPC and Gossip), so as long as those ports are open and reachable, Nomad should be operable.  Then you need to keep the Nomad agents alive.  That&rsquo;s pretty much it.</p>
<p>Where to start for Kubernetes? As many <a href="https://github.com/hjacobs/kubernetes-failure-stories">Kubernetes Failure Stories</a> point out: it&rsquo;s always DNS. Or etcd. Or Istio. Or networking. Or Kubelets. Or all of these.</p>
<h3 id="local-development">Local Development</h3>
<p>To run Nomad locally, you use the same binary as the production clusters, but in dev mode: <code>nomad agent -dev</code>.  To get a local cluster, you can spin up some Vagrant boxes instead.  I use my <a href="https://github.com/pondidum/hashibox">Hashibox</a> Vagrant box to do this when I do conference talks and don&rsquo;t trust the wifi to work.</p>
<p>To run Kubernetes locally to test things, you need to install/deploy MiniKube, K3S, etc.  The downside to this approach is that the environment is significantly different to your real Kubernetes cluster, and you can end up where a deployment works in one, but not the other, which makes debugging issues much harder.</p>
<h3 id="features--choice">Features &amp; Choice</h3>
<p>Nomad is relatively light on built-in features, which allows you the choice of what features to add, and what implementations of the features to use.  For example, it is pretty popular to use Consul for service discovery, but if you would rather use <a href="https://github.com/Netflix/eureka">Eureka</a>, or Zookeeper, or even etcd, that is fine, but you lose out on the seamless integration with Nomad that other Hashicorp tools have.  Nomad also supports <a href="https://www.nomadproject.io/docs/internals/plugins/index.html">Plugins</a> if you want to add support for your favourite tool.</p>
<p>By comparison, Kubernetes does everything, but like the phrase &ldquo;Jack of all trades, master of none&rdquo;, often you will have to supplement the inbuilt features.  The downside to this is that you can&rsquo;t switch off Kubernetes features you are not using, or don&rsquo;t want.  So if you add Vault for secret management, the Kubernetes Secrets are still available, and you have to be careful that people don&rsquo;t use them accidentally.  The same goes for all other features, such as Load Balancing, Feature Toggles, Service Discovery, DNS, etc.</p>
<h3 id="secret-management">Secret Management</h3>
<p>Nomad doesn&rsquo;t provide a Secret Management solution out of the box, but it does have seamless Vault integration, and you are also free to use any other Secrets As A Service tool you like.  If you do choose Vault, you can either use it directly from your tasks or use Nomad&rsquo;s integration to provide the secrets to your application.  It can even send a signal (e.g. <code>SIGINT</code> etc.) to your process when the secrets need re-reading.</p>
<p>Kubernetes, on the other hand, provides &ldquo;Secrets&rdquo;.  I put the word &ldquo;secrets&rdquo; in quotes because they are not secrets at all. The values are stored encoded in base64 in etcd, so anyone who has access to the etcd cluster has access to <em>all</em> the secrets.  The <a href="https://kubernetes.io/docs/concepts/configuration/secret/#risks">official documentation</a> suggests making sure only administrators have access to the etcd cluster to solve this.  Oh, and if you can deploy a container to the same namespace as a secret, you can reveal it by writing it to stdout.</p>
<blockquote>
<p>Kubernetes secrets are not secret, just &ldquo;slightly obscured.&rdquo;</p>
</blockquote>
<p>If you want real Secrets, you will almost certainly use Vault.  You can either run it inside or outside of Kubernetes, and either use it directly from containers via it&rsquo;s HTTPS API or use it to populate Kubernetes Secrets.  I&rsquo;d avoid populating Kubernetes Secrets if I were you.</p>
<h3 id="support">Support</h3>
<p>If Nomad breaks, you can either use community support or if you are using the Enterprise version, you have Hashicorp&rsquo;s support.</p>
<p>When Kubernetes breaks, you can either use community support or find and buy support from a Kubernetes management company.</p>
<p>The main difference here is &ldquo;when Kubernetes breaks&rdquo; vs &ldquo;if Nomad breaks&rdquo;.  The level of complexity in Kubernetes makes it far more likely to break, and that much harder to debug.</p>
]]></content:encoded></item><item><title>Creating a Vault instance with a TLS Consul Cluster</title><link>https://andydote.co.uk/2019/10/06/vault-consul-bootstrap/</link><pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/10/06/vault-consul-bootstrap/</guid><description>So we want to set up a Vault instance, and have it&amp;rsquo;s storage be a TLS based Consul cluster. The problem is that the Consul cluster needs Vault to create the certificates for TLS, which is quite the catch-22. Luckily for us, quite easy to solve:
Start a temporary Vault instance as an intermediate ca Launch Consul cluster, using Vault to generate certificates Destroy temporary Vault instance Start a permanent Vault instance, with Consul as the store Reprovision the Consul cluster with certificates from the new Vault instance There is a repository on Github with all the scripts used, and a few more details on some options.</description><content:encoded><![CDATA[<p>So we want to set up a <a href="https://www.vaultproject.io/">Vault</a> instance, and have it&rsquo;s storage be a TLS based <a href="https://www.consul.io/">Consul</a> cluster.  The problem is that the Consul cluster needs Vault to create the certificates for TLS, which is quite the catch-22.  Luckily for us, quite easy to solve:</p>
<ol>
<li>Start a temporary Vault instance as an intermediate ca</li>
<li>Launch Consul cluster, using Vault to generate certificates</li>
<li>Destroy temporary Vault instance</li>
<li>Start a permanent Vault instance, with Consul as the store</li>
<li>Reprovision the Consul cluster with certificates from the new Vault instance</li>
</ol>
<p><img loading="lazy" src="consul-vault-bootstrap.png" alt="Sequence diagram of the previous numbered list"  />
</p>
<p>There is a <a href="https://github.com/Pondidum/vault-consul-bootstrap-demo">repository on Github with all the scripts</a> used, and a few more details on some options.</p>
<h2 id="assumptions">Assumptions:</h2>
<p>The Host machine needs the following software available in your <code>PATH</code>:</p>
<ul>
<li><a href="https://www.vagrantup.com/">Vagrant</a></li>
<li><a href="https://www.consul.io/">Consul</a></li>
<li><a href="https://www.vaultproject.io/">Vault</a></li>
</ul>
<p>You have a TLS Certificate you can use to create an intermediate CA with.  See this blog post for <a href="/2019/08/25/vault-development-ca/">How to create a local CA</a></p>
<h2 id="running">Running</h2>
<p>The <code>run.sh</code> script will do all of this for you, but an explanation of the steps is below:</p>
<ol>
<li>
<p>Start a Temporary Vault instance</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">storage &#34;inmem&#34; {}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">listener &#34;tcp&#34; {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  address = &#34;0.0.0.0:8200&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  tls_disable = 1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span> &gt; <span style="color:#e6db74">&#34;vault/temp_vault.hcl&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault server -config<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vault/temp_vault.hcl&#34;</span> &amp;
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span>$!<span style="color:#e6db74">&#34;</span> &gt; vault.pid
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>./configure_vault.sh | tail -n 1<span style="color:#66d9ef">)</span>
</span></span></code></pre></div></li>
<li>
<p>Generate a Vault token for the Consul machines to use to authenticate with Vault</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export CONSUL_VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>vault write -field<span style="color:#f92672">=</span>token -force auth/token/create<span style="color:#66d9ef">)</span>
</span></span></code></pre></div></li>
<li>
<p>Launch 3 Consul nodes (uses the <code>CONSUL_VAULT_TOKEN</code> variable)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant up
</span></span></code></pre></div><p>The <code>vagrantfile</code> just declares 3 identical machines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">Vagrant</span><span style="color:#f92672">.</span>configure(<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>config<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>box <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pondidum/hashibox&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provision <span style="color:#e6db74">&#34;consul&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">type</span>: <span style="color:#e6db74">&#34;shell&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">path</span>: <span style="color:#e6db74">&#34;./provision.sh&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">env</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;VAULT_TOKEN&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">ENV</span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;CONSUL_VAULT_TOKEN&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>define <span style="color:#e6db74">&#34;c1&#34;</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>c1<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>    c1<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>hostname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;consul1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>define <span style="color:#e6db74">&#34;c2&#34;</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>c2<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>    c2<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>hostname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;consul2&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>define <span style="color:#e6db74">&#34;c3&#34;</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>c3<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>    c3<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>hostname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;consul3&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p>The provisioning script just reads a certificate from Vault, and writes out pretty much the same configuration as in the last post on <a href="/2019/09/14/consul-tls-cluster">creating a TLS enabled Consul Cluster</a>, but you can view it in the <a href="https://github.com/Pondidum/vault-consul-bootstrap-demo">repository</a> for this demo too.</p>
</li>
<li>
<p>Create a local Consul server to communicate with the cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./local_consul.sh
</span></span></code></pre></div><p>This is done so that the Vault instance can always communicate with the Consul cluster, no matter which Consul node we are reprovisioning later.  In a production environment, you would have this Consul server running on each machine that Vault is running on.</p>
</li>
<li>
<p>Stop the temporary Vault instance now that all nodes have a certificate</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kill <span style="color:#66d9ef">$(</span>cat vault.pid<span style="color:#66d9ef">)</span>
</span></span></code></pre></div></li>
<li>
<p>Start the persistent Vault instance, using the local Consul agent</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">storage &#34;consul&#34; {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  address = &#34;localhost:8501&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  scheme = &#34;https&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">listener &#34;tcp&#34; {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  address = &#34;0.0.0.0:8200&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  tls_disable = 1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span> &gt; <span style="color:#e6db74">&#34;</span>$config_dir<span style="color:#e6db74">/persistent_vault.hcl&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault server -config<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$config_dir<span style="color:#e6db74">/persistent_vault.hcl&#34;</span> &gt; /dev/null &amp;
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span>$!<span style="color:#e6db74">&#34;</span> &gt; vault.pid
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>./configure_vault.sh | tail -n 1<span style="color:#66d9ef">)</span>
</span></span></code></pre></div></li>
<li>
<p>Generate a new Vault token for the Consul machines to use to authenticate with Vault (same as step 2)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export CONSUL_VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>vault write -field<span style="color:#f92672">=</span>token -force auth/token/create<span style="color:#66d9ef">)</span>
</span></span></code></pre></div></li>
<li>
<p>Reprovision the Consul nodes with new certificates</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant provision c1 --provision-with consul
</span></span><span style="display:flex;"><span>vagrant provision c2 --provision-with consul
</span></span><span style="display:flex;"><span>vagrant provision c3 --provision-with consul
</span></span></code></pre></div></li>
<li>
<p>Profit</p>
<p>To clean up the host&rsquo;s copy of Vault and Consul, you can run this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kill <span style="color:#66d9ef">$(</span>cat vault.pid<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>kill <span style="color:#66d9ef">$(</span>cat consul.pid<span style="color:#66d9ef">)</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="summary--further-actions">Summary &amp; Further Actions</h2>
<p>Luckily, this is the kind of thing that should only need doing once (or once per isolated environment).  When running in a real environment, you will also want to set up:</p>
<ul>
<li>ACL in Consul which locks down the KV storage Vault uses to only be visible/writeable by Vault</li>
<li>Provisioning the <code>VAULT_TOKEN</code> to the machines in a secure fashion</li>
<li>Periodic refresh of the Certificates uses in the Consul cluster</li>
</ul>
]]></content:encoded></item><item><title>Consul DNS Fowarding in Ubuntu, revisited</title><link>https://andydote.co.uk/2019/09/24/consul-ubuntu-dns-revisited/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/09/24/consul-ubuntu-dns-revisited/</guid><description>I was recently using my Hashibox for a test, and I noticed the DNS resolution didn&amp;rsquo;t seem to work. This was a bit worrying, as I have written about how to do DNS resolution with Consul forwarding in Ubuntu, and apparently something is wrong with how I do it. Interestingly, the Alpine version works fine, so it appears there is something not quite working with how I am configuring Systemd-resolved.</description><content:encoded><![CDATA[<p>I was recently using my <a href="https://github.com/pondidum/hashibox">Hashibox</a> for a test, and I noticed the DNS resolution didn&rsquo;t seem to work.  This was a bit worrying, as I have written about how to do <a href="/2019/05/29/consul-dns-forwarding/">DNS resolution with Consul forwarding in Ubuntu</a>, and apparently something is wrong with how I do it.  Interestingly, the <a href="/2019/05/31/consul-dns-forwarding-alpine/">Alpine version</a> works fine, so it appears there is something not quite working with how I am configuring Systemd-resolved.</p>
<p>So this post is how I figured out what was wrong, and how to do DNS resolution with Consul forwarding on Ubuntu properly!</p>
<h2 id="the-problem">The Problem</h2>
<p>If Consul is running on the host, I can only resolve <code>.consul</code> domains, and if Consul is not running, I can resolve anything else.  Clearly I have configured something wrong!</p>
<p>To summarise, I want to be able to resolve 3 kinds of address:</p>
<ul>
<li><code>*.consul</code> addresses should be handled by the local Consul instance</li>
<li><code>$HOSTNAME.mshome.net</code> should be handled by the Hyper-V DNS server (running on the Host machine)</li>
<li><code>reddit.com</code> public DNS should be resolved properly</li>
</ul>
<h2 id="discovery">Discovery</h2>
<p>To make sure that hostname resolution even works by default, I create a blank Ubuntu box in Hyper-V, using <a href="https://www.vagrantup.com/">Vagrant</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">Vagrant</span><span style="color:#f92672">.</span>configure(<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>config<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>box <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bento/ubuntu-16.04&#34;</span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>hostname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;test&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p>I set the hostname so that I can test that dns resolution works from the host machine to the guest machines too.  I next bring up the machine, SSH into it, and try to <code>dig</code> my hostmachine&rsquo;s DNS name (<code>spectre.mshome.net</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&gt; vagrant up
</span></span><span style="display:flex;"><span>&gt; vagrant ssh
</span></span><span style="display:flex;"><span>&gt; dig spectre.mshome.net
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; spectre.mshome.net
</span></span><span style="display:flex;"><span>;; global options: +cmd
</span></span><span style="display:flex;"><span>;; Got answer:
</span></span><span style="display:flex;"><span>;; -&gt;&gt;HEADER<span style="color:#e6db74">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span style="color:#ae81ff">12333</span>
</span></span><span style="display:flex;"><span>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>;; QUESTION SECTION:
</span></span><span style="display:flex;"><span>;spectre.mshome.net.            IN      A
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>;; ANSWER SECTION:
</span></span><span style="display:flex;"><span>Spectre.mshome.net.     <span style="color:#ae81ff">0</span>       IN      A       192.168.181.161
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>;; Query time: <span style="color:#ae81ff">0</span> msec
</span></span><span style="display:flex;"><span>;; SERVER: 192.168.181.161#53<span style="color:#f92672">(</span>192.168.181.161<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>;; WHEN: Mon Sep <span style="color:#ae81ff">23</span> 21:57:26 UTC <span style="color:#ae81ff">2019</span>
</span></span><span style="display:flex;"><span>;; MSG SIZE  rcvd: <span style="color:#ae81ff">70</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; exit
</span></span><span style="display:flex;"><span>&gt; vagrant destroy -f
</span></span></code></pre></div><p>As you can see, the host machine&rsquo;s DNS server responds with the right address.  Now that I know that this should work, we can tweak the <code>Vagrantfile</code> to start an instance of my Hashibox:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">Vagrant</span><span style="color:#f92672">.</span>configure(<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>config<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>box <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pondidum/hashibox&#34;</span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>hostname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;test&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p>When I run the same command sin this box, I get a slighty different response:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; spectre.mshome.net
</span></span><span style="display:flex;"><span>;; global options: +cmd
</span></span><span style="display:flex;"><span>;; Got answer:
</span></span><span style="display:flex;"><span>;; -&gt;&gt;HEADER<span style="color:#e6db74">&lt;&lt;- opco</span>de: QUERY, status: NXDOMAIN, id: <span style="color:#ae81ff">57216</span>
</span></span><span style="display:flex;"><span>;; flags: qr aa rd; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>;; WARNING: recursion requested but not available
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>;; OPT PSEUDOSECTION:
</span></span><span style="display:flex;"><span>; EDNS: version: 0, flags:; udp: <span style="color:#ae81ff">4096</span>
</span></span><span style="display:flex;"><span>;; QUESTION SECTION:
</span></span><span style="display:flex;"><span>;spectre.mshome.net.            IN      A
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>;; AUTHORITY SECTION:
</span></span><span style="display:flex;"><span>consul.                 <span style="color:#ae81ff">0</span>       IN      SOA     ns.consul. hostmaster.consul. <span style="color:#ae81ff">1569276784</span> <span style="color:#ae81ff">3600</span> <span style="color:#ae81ff">600</span> <span style="color:#ae81ff">86400</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>;; Query time: <span style="color:#ae81ff">1</span> msec
</span></span><span style="display:flex;"><span>;; SERVER: 127.0.0.1#53<span style="color:#f92672">(</span>127.0.0.1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>;; WHEN: Mon Sep <span style="color:#ae81ff">23</span> 22:13:04 UTC <span style="color:#ae81ff">2019</span>
</span></span><span style="display:flex;"><span>;; MSG SIZE  rcvd: <span style="color:#ae81ff">103</span>
</span></span></code></pre></div><p>As intended, the DNS server on localhost responded&hellip;but it looks like Consul answered, not the inbuilt dns server (<code>systemd-resolved</code>), as I intended.</p>
<p>The reason for this is that I am running Consul&rsquo;s DNS endpoint on <code>8600</code>, and Systemd-Resolved cannot send requests to anything other than port <code>53</code>, so I use <code>iptables</code> to redirect the traffic from port <code>53</code> to <code>8600</code>, which means any local use of DNS will always be sent to Consul.</p>
<p>The reason it works when Consul is not running is that we have both <code>127.0.0.1</code> specified as a nameserver, and a fallback set to be the <code>eth0</code>&rsquo;s Gateway, so when Consul doesn&rsquo;t respond, the request hits the default DNS instead.</p>
<h2 id="the-solution-dnsmasq">The Solution: Dnsmasq.</h2>
<p>Basically, stop using <code>systemd-resolved</code> and use something that has a more flexible configuration.  Enter Dnsmasq.</p>
<p>Starting from the blank Ubuntu box, I install dnsmasq, and disable systemd-resolved.  Doing this might prevent any DNS resolutio working for a while&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt-get install -yq dnsmasq
</span></span><span style="display:flex;"><span>sudo systemctl disable systemd-resolved.service
</span></span></code></pre></div><p>If you would rather not disable <code>systemd-resolved</code> entirely, you can use these two lines instead to just switch off the local DNS stub:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;DNSStubListener=no&#34;</span> | sudo tee --append /etc/systemd/resolved.conf
</span></span><span style="display:flex;"><span>sudo systemctl restart systemd-resolved
</span></span></code></pre></div><p>Next I update <code>/etc/resolv.conf</code> to not be managed by Systemd, and point to where dnsmasq will be running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo rm /etc/resolv.conf
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;nameserver 127.0.0.1&#34;</span> | sudo tee /etc/resolv.conf
</span></span></code></pre></div><p>The reason for deleting the file is that it was symlinked to the Systemd-Resolved managed file, so that link needed to be broken first to prevent Systemd interfering.</p>
<p>Lastly a minimal configuration for dnsmasq:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">port=53
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">resolv-file=/var/run/dnsmasq/resolv.conf
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">bind-interfaces
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">listen-address=127.0.0.1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">server=/consul/127.0.0.1#8600
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;</span> | sudo tee /etc/dnsmasq.d/default
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo systemctl restart dnsmasq
</span></span></code></pre></div><p>This config does a few things, the two most important lines are:</p>
<ul>
<li>
<p><code>resolv-file=/var/run/dnsmasq/resolv.conf</code> which is pointing to the default <code>resolv.conf</code> written by dnsmasq.  This file contains the default nameserver supplied by the default network connection, and I want to use this as a fallback for anything dnsmasq cannot resolve directly (which will be everything, except <code>.consul</code>).  In my case, the content of this file is just <code>nameserver 192.168.181.161</code>.</p>
</li>
<li>
<p><code>server=/consul/127.0.0.1#8600</code> specifies that any address ending in <code>.consul</code> should be forwarded to Consul, running at <code>127.0.0.1</code> on port <code>8600</code>.  No more <code>iptables</code> rules!</p>
</li>
</ul>
<h2 id="testing">Testing</h2>
<p>Now that I have a (probably) working DNS system, let&rsquo;s look at testing it properly this time.  There are 3 kinds of address I want to test:</p>
<ul>
<li>Consul resolution, e.g. <code>consul.service.consul</code> should return the current Consul instance address.</li>
<li>Hostname resolution, e.g. <code>spectre.mshome.net</code> should resolve to the machine hosting the VM.</li>
<li>Public resolution, e.g. <code>reddit.com</code> should resolve to&hellip;reddit.</li>
</ul>
<p>I also want to test that the latter two cases work when Consul is <strong>not</strong> running too.</p>
<p>So let&rsquo;s write a simple script to make sure these all work.  This way I can reuse the same script on other machines, and also with other VM providers to check DNS works as it should.  The entire script is here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>local_domain<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>1<span style="color:#66d9ef">:-</span>mshome.net<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>host_machine<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>2<span style="color:#66d9ef">:-</span>spectre<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>consul agent -dev -client 0.0.0.0 -bind <span style="color:#e6db74">&#39;{{ GetInterfaceIP &#34;eth0&#34; }}&#39;</span> &gt; /dev/null &amp;
</span></span><span style="display:flex;"><span>sleep <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>consul_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dig consul.service.consul +short<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>self_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dig $HOSTNAME.$local_domain +short | tail -n 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>host_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dig $host_machine.$local_domain +short | tail -n 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>reddit_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dig reddit.com +short | tail -n 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kill %1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$consul_ip<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Didn&#39;t get consul ip&#34;</span> &gt;&amp;<span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$self_ip<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Didn&#39;t get self ip&#34;</span> &gt;&amp;<span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$host_ip<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Didn&#39;t get host ip&#34;</span> &gt;&amp;<span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$reddit_ip<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Didn&#39;t get reddit ip&#34;</span> &gt;&amp;<span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;==&gt; Consul Running: Success!&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>consul_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dig consul.service.consul +short | tail -n 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>self_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dig $HOSTNAME.$local_domain +short | tail -n 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>host_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dig $host_machine.$local_domain +short | tail -n 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>reddit_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dig reddit.com +short | tail -n 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span>$consul_ip<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> *<span style="color:#e6db74">&#34;;; connection timed out;&#34;</span>* <span style="color:#f92672">]]</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Got a consul ip (</span>$consul_ip<span style="color:#e6db74">)&#34;</span> &gt;&amp;<span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$self_ip<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Didn&#39;t get self ip&#34;</span> &gt;&amp;<span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$host_ip<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Didn&#39;t get host ip&#34;</span> &gt;&amp;<span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$reddit_ip<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Didn&#39;t get reddit ip&#34;</span> &gt;&amp;<span style="color:#ae81ff">2</span> <span style="color:#f92672">&amp;&amp;</span> exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;==&gt; Consul Stopped: Success!&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>exit <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><p>What this does is:</p>
<ol>
<li>Read two command line arguments, or use defaults if not specified</li>
<li>Start Consul as a background job</li>
<li>Query 4 domains, storing the results</li>
<li>Stop Consul (<code>kill %1</code>)</li>
<li>Check an IP address came back for each domain</li>
<li>Query the same 4 domains, storing the results</li>
<li>Check that a timeout was received for <code>consul.service.consul</code></li>
<li>Check an IP address came back for the other domains</li>
</ol>
<p>To further prove that dnsmasq is forwarding requests correctly, I can include two more lines to <code>/etc/dnsmasq.d/default</code> to enable logging, and restart dnsmasq</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;log-queries&#34;</span> | sudo tee /etc/dnsmasq.d/default
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;log-facility=/var/log/dnsmasq.log&#34;</span> | sudo tee /etc/dnsmasq.d/default
</span></span><span style="display:flex;"><span>sudo systemctl restart dnsmasq
</span></span><span style="display:flex;"><span>dig consul.service.consul
</span></span></code></pre></div><p>Now I can view the log file and check that it received the DNS query and did the right thing.  In this case, it recieved the <code>consul.service.consul</code> query, and forwarded it to the local Consul instance:</p>
<pre tabindex="0"><code>Sep 24 06:30:50 dnsmasq[13635]: query[A] consul.service.consul from 127.0.0.1
Sep 24 06:30:50 dnsmasq[13635]: forwarded consul.service.consul to 127.0.0.1
Sep 24 06:30:50 dnsmasq[13635]: reply consul.service.consul is 192.168.181.172
</code></pre><p>I don&rsquo;t tend to keep DNS logging on in my Hashibox as the log files can grow very quickly.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Now that I have proven my DNS resolution works (I think), I have rolled it back into my Hashibox, and can now use machine names for setting up clusters, rather than having to specify IP addresses initially.</p>
]]></content:encoded></item><item><title>Canary Routing with Traefik in Nomad</title><link>https://andydote.co.uk/2019/06/23/nomad-traefik-canary/</link><pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/06/23/nomad-traefik-canary/</guid><description>I wanted to implement canary routing for some HTTP services deployed via Nomad the other day, but rather than having the traffic split by weighting to the containers, I wanted to direct the traffic based on a header.
My first choice of tech was to use Fabio, but it only supports routing by URL prefix, and additionally with a route weight. While I was at JustDevOps in Poland, I heard about another router/loadbalancer which worked in a similar way to Fabio: Traefik.</description><content:encoded><![CDATA[<p>I wanted to implement canary routing for some HTTP services deployed via <a href="https://www.nomadproject.io/">Nomad</a> the other day, but rather than having the traffic split by weighting to the containers, I wanted to direct the traffic based on a header.</p>
<p>My first choice of tech was to use <a href="https://fabiolb.net/">Fabio</a>, but it only supports routing by URL prefix, and additionally with a route weight.  While I was at <a href="https://justdevops.org/">JustDevOps</a> in Poland, I heard about another router/loadbalancer which worked in a similar way to Fabio: <a href="https://traefik.io/">Traefik</a>.</p>
<p>While Traefik also doesn&rsquo;t directly support canary routing, it is much more flexible than Fabio, also allowing request filtering based on HTTP headers.  Traefik integrates with a number of container schedulers directly, but Nomad is not one of them.  It does however also support using the Consul Service Catalog so that you can use it as an almost drop-in replacement for Fabio.</p>
<p>So let&rsquo;s get to the setup.  As usual, there is a complete repository on GitHub: <a href="https://github.com/Pondidum/nomad-traefik-canary-demo">Nomad Traefik Canary Routing</a>.</p>
<h2 id="nomad">Nomad</h2>
<p>As usual, I am using my <a href="https://github.com/Pondidum/hashibox">Hashibox</a> <a href="https://vagrantup.com/">Vagrant</a> base image, and provisioning it as a single Nomad server and client node, using <a href="https://github.com/Pondidum/nomad-traefik-canary-demo/blob/master/scripts/server.sh">this script</a>.  I won&rsquo;t dig into all the setup in that, as I&rsquo;ve written it a few times now.</p>
<h2 id="consul">Consul</h2>
<p>Consul is already running on the Hashibox base, so we have no further configuration to do.</p>
<h2 id="traefik">Traefik</h2>
<p>Traefik can be deployed as a Docker container, and either configured through a TOML file (yay, <a href="https://noyaml.com/">not yaml!</a>) or with command line switches.  As we only need a minimal configuration, I opted to use the command line.</p>
<p>The container exposes two ports we need to care about: <code>80</code> for incoming traffic to be routed, and <code>8080</code> for the UI, which are statically allocated to the host as <code>8000</code> and <code>8080</code> for this demo.</p>
<p>The command line configuration used is as follows:</p>
<ul>
<li><code>--api</code> - enable the UI.</li>
<li><code>--consulcatalog</code> - Traefik has two ways to use Consul - <code>--consul</code> uses the KV store for service definitions, and <code>--consulcatalog</code> makes use Consul&rsquo;s service catalogue.</li>
<li><code>--consulcatalog.endpoint=consul.service.consul:8500</code> as Consul is not running in the same container as Traefik, we need to tell it where Consul is listening, and as we have <a href="">DNS Forwarding for <code>*.consul</code> domains</a>, we use the address <code>consul.service.consul</code>.  If DNS forwarding was not available, you could use the Nomad variable <code>${attr.unique.network.ip-address}</code> to get the current task&rsquo;s host&rsquo;s IP.</li>
<li><code>--consulcatalog.frontEndRule</code> disable the default rule - each service needs to specify <code>traefik.frontend.rule</code>.</li>
<li><code>--consulcatalog.exposedByDefault=false</code> - lastly, we stop Traefik showing all services registered into consul, the will need to have the <code>traefik.enable=true</code> tag to be processed.</li>
</ul>
<p>The entire job file is listed below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>job <span style="color:#e6db74">&#34;traefik&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  datacenters <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;dc1&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;service&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  group <span style="color:#e6db74">&#34;loadbalancers&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    task <span style="color:#e6db74">&#34;traefik&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;docker&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      config <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        image <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;traefik:1.7.12&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        args <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;--api&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;--consulcatalog&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;--consulcatalog.endpoint=consul.service.consul:8500&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;--consulcatalog.frontEndRule=&#39;&#39;&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;--consulcatalog.exposedByDefault=false&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        port_map <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          http <span style="color:#f92672">=</span> <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>          ui <span style="color:#f92672">=</span> <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      resources <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        network <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          port <span style="color:#e6db74">&#34;http&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">8000</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>          port <span style="color:#e6db74">&#34;ui&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">8080</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        memory <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>We register the job into Nomad, and then start on the backend services we will route to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nomad job run jobs/traefik.nomad
</span></span></code></pre></div><h2 id="the-backend-services">The Backend Services</h2>
<p>To demonstrate the services can be routed to correctly, we can use the <code>containersol/k8s-deployment-strategies</code> docker container.  This image exposes an HTTP service which responds with the container&rsquo;s hostname and the content of the <code>VERSION</code> environment variable, something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl http://echo.service.consul:8080
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Host: 23351e48dc98, Version: 1.0.0</span>
</span></span></code></pre></div><p>We&rsquo;ll start by making a standard nomad job for this container, and then update it to support canarying.  The entire job is listed below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>job <span style="color:#e6db74">&#34;echo&#34;</span> {
</span></span><span style="display:flex;"><span>  datacenters <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;dc1&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;service&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  group <span style="color:#e6db74">&#34;apis&#34;</span> {
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    task <span style="color:#e6db74">&#34;echo&#34;</span> {
</span></span><span style="display:flex;"><span>      driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;docker&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      config {
</span></span><span style="display:flex;"><span>        image <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;containersol/k8s-deployment-strategies&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        port_map {
</span></span><span style="display:flex;"><span>          http <span style="color:#f92672">=</span> <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      env {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">VERSION</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1.0.0&#34;</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      resources {
</span></span><span style="display:flex;"><span>        network {
</span></span><span style="display:flex;"><span>          port <span style="color:#e6db74">&#34;http&#34;</span> { }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      service {
</span></span><span style="display:flex;"><span>        name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;echo&#34;</span>
</span></span><span style="display:flex;"><span>        port <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        tags <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;traefik.enable=true&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;traefik.frontend.rule=Host:api.localhost&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        check {
</span></span><span style="display:flex;"><span>          type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>          path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/&#34;</span>
</span></span><span style="display:flex;"><span>          interval <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;5s&#34;</span>
</span></span><span style="display:flex;"><span>          timeout <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1s&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The only part of interest in this version of the job is the <code>service</code> stanza, which is registering our echo service into consul, with a few tags to control how it is routed by Traefik:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>service {
</span></span><span style="display:flex;"><span>  name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;echo&#34;</span>
</span></span><span style="display:flex;"><span>  port <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  tags <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;traefik.enable=true&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;traefik.frontend.rule=Host:api.localhost&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  check {
</span></span><span style="display:flex;"><span>    type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>    path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/&#34;</span>
</span></span><span style="display:flex;"><span>    interval <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;5s&#34;</span>
</span></span><span style="display:flex;"><span>    timeout <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1s&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>traefik.enabled=true</code> tag allows this service to be handled by Traefik (as we set <code>exposedByDefault=false</code> in Traefik), and <code>traefik.frontend.rule=Host:api.localhost</code> the rule means that any traffic with the <code>Host</code> header set to <code>api.localhost</code> will be routed to the service.</p>
<p>Which we can now run the job in Nomad:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nomad job run jobs/echo.nomad
</span></span></code></pre></div><p>Once it is up and running, we&rsquo;ll get 3 instances of <code>echo</code> running which will be round-robin routed by Traefik:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl http://traefik.service.consul:8080 -H <span style="color:#e6db74">&#39;Host: api.localhost&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Host: 1ac8a49cbaee, Version: 1.0.0</span>
</span></span><span style="display:flex;"><span>$ curl http://traefik.service.consul:8080 -H <span style="color:#e6db74">&#39;Host: api.localhost&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Host: 23351e48dc98, Version: 1.0.0</span>
</span></span><span style="display:flex;"><span>$ curl http://traefik.service.consul:8080 -H <span style="color:#e6db74">&#39;Host: api.localhost&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Host: c2f8a9dcab95, Version: 1.0.0</span>
</span></span></code></pre></div><p>Now that we have working routing for the Echo service let&rsquo;s make it canaryable.</p>
<h2 id="canaries">Canaries</h2>
<p>To show canary routing, we will create a second version of the service to respond to HTTP traffic with a <code>Canary</code> header.</p>
<p>The first change to make is to add in the <code>update</code> stanza, which controls how the containers get updated when Nomad pushes a new version.  The <code>canary</code> parameter controls how many instances of the task will be created for canary purposes (and must be less than the total number of containers).  Likewise, the <code>max_parallel</code> parameter controls how many containers will be replaced at a time when a deployment happens.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span>group &#34;apis&#34; {
</span></span><span style="display:flex;"><span>  count = 3
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">+  update {
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">+    max_parallel = 1
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">+    canary = 1
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">+  }
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span>
</span></span><span style="display:flex;"><span>  task &#34;echo&#34; {
</span></span></code></pre></div><p>Next, we need to modify the <code>service</code> stanza to write different tags to Consul when a task is a canary instance so that it does not get included in the &ldquo;normal&rdquo; backend routing group.</p>
<p>If we don&rsquo;t specify at least 1 value in <code>canary_tags</code>, Nomad will use the <code>tags</code> even in the canary version - an empty <code>canary_tags = []</code> declaration is not enough!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span>service {
</span></span><span style="display:flex;"><span>  name = &#34;echo&#34;
</span></span><span style="display:flex;"><span>  port = &#34;http&#34;
</span></span><span style="display:flex;"><span>  tags = [
</span></span><span style="display:flex;"><span>    &#34;traefik.enable=true&#34;,
</span></span><span style="display:flex;"><span>    &#34;traefik.frontend.rule=Host:api.localhost&#34;
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">+  canary_tags = [
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">+    &#34;traefik.enable=false&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">+  ]
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span>  check {
</span></span></code></pre></div><p>Finally, we need to add a separate <code>service</code> stanza to create a second backend group which will contain the canary versions.  Note how this group has a different name, and has no <code>tags</code>, but does have a set of <code>canary_tags</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>service {
</span></span><span style="display:flex;"><span>  name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;echo-canary&#34;</span>
</span></span><span style="display:flex;"><span>  port <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>  tags <span style="color:#f92672">=</span> <span style="color:#f92672">[]</span>
</span></span><span style="display:flex;"><span>  canary_tags <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;traefik.enable=true&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;traefik.frontend.rule=Host:api.localhost;Headers: Canary,true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  check {
</span></span><span style="display:flex;"><span>    type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>    path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/&#34;</span>
</span></span><span style="display:flex;"><span>    interval <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;5s&#34;</span>
</span></span><span style="display:flex;"><span>    timeout <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1s&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The reason we need two <code>service</code> stanzas is that Traefik can only create backends based on the name of the service registered to Consul and not from a tag in that registration.  If we just used one <code>service</code> stanza, then the canary version of the container would be added to both the canary backend and standard backend.  I was hoping for <code>traefik.backend=echo-canary</code> to work, but alas no.</p>
<p>The entire updated jobfile is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>job <span style="color:#e6db74">&#34;echo&#34;</span> {
</span></span><span style="display:flex;"><span>  datacenters <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;dc1&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;service&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  group <span style="color:#e6db74">&#34;apis&#34;</span> {
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    update {
</span></span><span style="display:flex;"><span>      max_parallel <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      canary <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    task <span style="color:#e6db74">&#34;echo&#34;</span> {
</span></span><span style="display:flex;"><span>      driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;docker&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      config {
</span></span><span style="display:flex;"><span>        image <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;containersol/k8s-deployment-strategies&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        port_map {
</span></span><span style="display:flex;"><span>          http <span style="color:#f92672">=</span> <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      env {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">VERSION</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1.0.0&#34;</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      resources {
</span></span><span style="display:flex;"><span>        network {
</span></span><span style="display:flex;"><span>          port <span style="color:#e6db74">&#34;http&#34;</span> { }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        memory <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      service {
</span></span><span style="display:flex;"><span>        name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;echo-canary&#34;</span>
</span></span><span style="display:flex;"><span>        port <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        tags <span style="color:#f92672">=</span> <span style="color:#f92672">[]</span>
</span></span><span style="display:flex;"><span>        canary_tags <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;traefik.enable=true&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;traefik.frontend.rule=Host:api.localhost;Headers: Canary,true&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        check {
</span></span><span style="display:flex;"><span>          type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>          path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/&#34;</span>
</span></span><span style="display:flex;"><span>          interval <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;5s&#34;</span>
</span></span><span style="display:flex;"><span>          timeout <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1s&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      service {
</span></span><span style="display:flex;"><span>        name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;echo&#34;</span>
</span></span><span style="display:flex;"><span>        port <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        tags <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;traefik.enable=true&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;traefik.frontend.rule=Host:api.localhost&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        canary_tags <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>          <span style="color:#e6db74">&#34;traefik.enable=false&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        check {
</span></span><span style="display:flex;"><span>          type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http&#34;</span>
</span></span><span style="display:flex;"><span>          path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/&#34;</span>
</span></span><span style="display:flex;"><span>          interval <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;5s&#34;</span>
</span></span><span style="display:flex;"><span>          timeout <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1s&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="testing">Testing</h2>
<p>First, we will change the <code>VERSION</code> environment variable so that Nomad sees the job as changed, and we get a different response from HTTP calls to the canary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span>env {
</span></span><span style="display:flex;"><span><span style="color:#f92672">-  VERSION = &#34;1.0.0&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f92672"></span><span style="color:#a6e22e">+  VERSION = &#34;2.0.0&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e"></span>}
</span></span></code></pre></div><p>Now we will update the job in Nomad:</p>
<pre tabindex="0"><code>nomad job run jobs/echo.nomad
</code></pre><p>If we run the status command, we can see that the deployment has started, and there is one canary instance running.  Nothing further will happen until we promote it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ nomad status echo
</span></span><span style="display:flex;"><span>ID            <span style="color:#f92672">=</span> echo
</span></span><span style="display:flex;"><span>Status        <span style="color:#f92672">=</span> running
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Latest Deployment
</span></span><span style="display:flex;"><span>ID          <span style="color:#f92672">=</span> 330216b9
</span></span><span style="display:flex;"><span>Status      <span style="color:#f92672">=</span> running
</span></span><span style="display:flex;"><span>Description <span style="color:#f92672">=</span> Deployment is running but requires promotion
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Deployed
</span></span><span style="display:flex;"><span>Task Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy  Progress Deadline
</span></span><span style="display:flex;"><span>apis        false     <span style="color:#ae81ff">3</span>        <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">1</span>       <span style="color:#ae81ff">1</span>        <span style="color:#ae81ff">0</span>          2019-06-19T11:19:31Z
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Allocations
</span></span><span style="display:flex;"><span>ID        Node ID   Task Group  Version  Desired  Status   Created    Modified
</span></span><span style="display:flex;"><span>dcff2555  82f6ea8b  apis        <span style="color:#ae81ff">1</span>        run      running  18s ago    2s ago
</span></span><span style="display:flex;"><span>5b2710ed  82f6ea8b  apis        <span style="color:#ae81ff">0</span>        run      running  6m52s ago  6m26s ago
</span></span><span style="display:flex;"><span>698bd8a7  82f6ea8b  apis        <span style="color:#ae81ff">0</span>        run      running  6m52s ago  6m27s ago
</span></span><span style="display:flex;"><span>b315bcd3  82f6ea8b  apis        <span style="color:#ae81ff">0</span>        run      running  6m52s ago  6m25s ago
</span></span></code></pre></div><p>We can now test that the original containers still work, and that the canary version works:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl http://traefik.service.consul:8080 -H <span style="color:#e6db74">&#39;Host: api.localhost&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Host: 1ac8a49cbaee, Version: 1.0.0</span>
</span></span><span style="display:flex;"><span>$ curl http://traefik.service.consul:8080 -H <span style="color:#e6db74">&#39;Host: api.localhost&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Host: 23351e48dc98, Version: 1.0.0</span>
</span></span><span style="display:flex;"><span>$ curl http://traefik.service.consul:8080 -H <span style="color:#e6db74">&#39;Host: api.localhost&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Host: c2f8a9dcab95, Version: 1.0.0</span>
</span></span><span style="display:flex;"><span>$ curl http://traefik.service.consul:8080 -H <span style="color:#e6db74">&#39;Host: api.localhost&#39;</span> -H <span style="color:#e6db74">&#39;Canary: true&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Host: 496840b438f2, Version: 2.0.0</span>
</span></span></code></pre></div><p>Assuming we are happy with our new version, we can tell Nomad to promote the deployment, which will remove the canary and start a rolling update of the three tasks, one at a time:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nomad deployment promote 330216b9
</span></span></code></pre></div><h2 id="end">End</h2>
<p>My hope is that the next version of Traefik will have better support for canary by header, meaning I could simplify the Nomad jobs a little, but as it stands, this doesn&rsquo;t add much complexity to the jobs, and can be easily put into an Architecture Decision Record (or documented in a wiki page, never to be seen or read from again!)</p>
]]></content:encoded></item><item><title>Configuring Consul DNS Forwarding in Alpine Linux</title><link>https://andydote.co.uk/2019/05/31/consul-dns-forwarding-alpine/</link><pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/05/31/consul-dns-forwarding-alpine/</guid><description>DEPRECATED - This has a race condition! Please see this post for an updated version which works!
Following on from the post the other day on setting up DNS forwarding to Consul with SystemD, I wanted also to show how to get Consul up and running under Alpine Linux, as it&amp;rsquo;s a little more awkward in some respects.
To start with, I am going to setup Consul as a service - I didn&amp;rsquo;t do this in the Ubuntu version, as there are plenty of useful articles about that already, but that is not the case with Alpine.</description><content:encoded><![CDATA[<h1 id="deprecated---this-has-a-race-condition">DEPRECATED - This has a race condition!</h1>
<p><a href="/2019/12/30/consul-alpine-dns-revisited/">Please see this post for an updated version which works!</a></p>
<p>Following on from the post the other day on setting up <a href="/2019/05/29/consul-dns-forwarding/">DNS forwarding to Consul with SystemD</a>, I wanted also to show how to get Consul up and running under <a href="https://www.alpinelinux.org/">Alpine Linux</a>, as it&rsquo;s a little more awkward in some respects.</p>
<p>To start with, I am going to setup Consul as a service - I didn&rsquo;t do this in the Ubuntu version, as there are plenty of useful articles about that already, but that is not the case with Alpine.</p>
<h2 id="run-consul">Run Consul</h2>
<p>First, we need to get a version of Consul and install it into our system.  This script downloads <code>1.5.1</code> from Hashicorp&rsquo;s releases site, installs it to <code>/usr/bin/consul</code>, and creates a <code>consul</code> user and group to run the daemon with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>CONSUL_VERSION<span style="color:#f92672">=</span>1.5.1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>curl -sSL https://releases.hashicorp.com/consul/<span style="color:#e6db74">${</span>CONSUL_VERSION<span style="color:#e6db74">}</span>/consul_<span style="color:#e6db74">${</span>CONSUL_VERSION<span style="color:#e6db74">}</span>_linux_amd64.zip -o /tmp/consul.zip
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>unzip /tmp/consul.zip
</span></span><span style="display:flex;"><span>sudo install consul /usr/bin/consul
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo addgroup -S consul
</span></span><span style="display:flex;"><span>sudo adduser -S -D -h /var/consul -s /sbin/nologin -G consul -g consul consul
</span></span></code></pre></div><p>Next, we need to create the directories for the configuration and data to live in, and copy the init script and configuration file to those directories:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>consul_dir<span style="color:#f92672">=</span>/etc/consul
</span></span><span style="display:flex;"><span>data_dir<span style="color:#f92672">=</span>/srv/consul
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo mkdir $consul_dir
</span></span><span style="display:flex;"><span>sudo mkdir $data_dir
</span></span><span style="display:flex;"><span>sudo chown consul:consul $data_dir
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo mv /tmp/consul.sh /etc/init.d/consul
</span></span><span style="display:flex;"><span>sudo chmod +x /etc/init.d/consul
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo mv /tmp/consul.json $consul_dir/consul.json
</span></span></code></pre></div><p>The init script is pretty straight forward, but note that I am running the agent in this example in <code>dev</code> mode; <strong>don&rsquo;t do this in production</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/sbin/openrc-run
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>CONSUL_LOG_FILE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/var/log/</span><span style="color:#e6db74">${</span>SVCNAME<span style="color:#e6db74">}</span><span style="color:#e6db74">.log&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>name<span style="color:#f92672">=</span>consul
</span></span><span style="display:flex;"><span>description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;A tool for service discovery, monitoring and configuration&#34;</span>
</span></span><span style="display:flex;"><span>description_checkconfig<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Verify configuration file&#34;</span>
</span></span><span style="display:flex;"><span>daemon<span style="color:#f92672">=</span>/usr/bin/$name
</span></span><span style="display:flex;"><span>daemon_user<span style="color:#f92672">=</span>$name
</span></span><span style="display:flex;"><span>daemon_group<span style="color:#f92672">=</span>$name
</span></span><span style="display:flex;"><span>consul_dir<span style="color:#f92672">=</span>/etc/consul
</span></span><span style="display:flex;"><span>extra_commands<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;checkconfig&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>start_pre<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    checkpath -f -m <span style="color:#ae81ff">0644</span> -o <span style="color:#e6db74">${</span>SVCNAME<span style="color:#e6db74">}</span>:<span style="color:#e6db74">${</span>SVCNAME<span style="color:#e6db74">}</span> <span style="color:#e6db74">&#34;</span>$CONSUL_LOG_FILE<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>depend<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    need net
</span></span><span style="display:flex;"><span>    after firewall
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>checkconfig<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    consul validate $consul_dir
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>start<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    checkconfig <span style="color:#f92672">||</span> <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    ebegin <span style="color:#e6db74">&#34;Starting </span><span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        start-stop-daemon --start --quiet <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>            -m --pidfile /var/run/<span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span>.pid <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>            --user <span style="color:#e6db74">${</span>daemon_user<span style="color:#e6db74">}</span> --group <span style="color:#e6db74">${</span>daemon_group<span style="color:#e6db74">}</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>            -b --stdout $CONSUL_LOG_FILE --stderr $CONSUL_LOG_FILE <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>            -k <span style="color:#ae81ff">027</span> --exec <span style="color:#e6db74">${</span>daemon<span style="color:#e6db74">}</span> -- agent -dev -config-dir<span style="color:#f92672">=</span>$consul_dir
</span></span><span style="display:flex;"><span>    eend $?
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stop<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    ebegin <span style="color:#e6db74">&#34;Stopping </span><span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        start-stop-daemon --stop --quiet <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>            --pidfile /var/run/<span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span>.pid <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>            --exec <span style="color:#e6db74">${</span>daemon<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>    eend $?
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Finally, a basic config file to launch consul is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;data_dir&#34;</span>: <span style="color:#e6db74">&#34;/srv/consul/data&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;client_addr&#34;</span>: <span style="color:#e6db74">&#34;0.0.0.0&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now that all our scripts are in place, we can register Consul into the service manager, and start it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo rc-update add consul
</span></span><span style="display:flex;"><span>sudo rc-service consul start
</span></span></code></pre></div><p>You can check consul is up and running by using <code>dig</code> to get the address of the consul service itself:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dig @localhost -p <span style="color:#ae81ff">8600</span> consul.service.consul
</span></span></code></pre></div><h2 id="setup-local-dns-with-unbound">Setup Local DNS with Unbound</h2>
<p>Now that Consul is running, we need to configure a local DNS resolver to forward requests for the <code>.consul</code> domain to Consul.  We will use <a href="https://nlnetlabs.nl/projects/unbound/about/">Unbound</a> as it works nicely on Alpine.  It also has the wonderful feature of being able to send queries to a specific port, so no <code>iptables</code> rules needed this time!</p>
<p>The config file (<code>/etc/unbound/unbound.conf</code>) is all default values, with the exception of the last 5 lines, which let us forward DNS requests to a custom, and insecure, location:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>sudo apk add unbound
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>cat <span style="color:#e6db74">&lt;&lt;-EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">server:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    verbosity: 1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    root-hints: /etc/unbound/root.hints
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    trust-anchor-file: &#34;/usr/share/dnssec-root/trusted-key.key&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    do-not-query-localhost: no
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    domain-insecure: &#34;consul&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">stub-zone:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    name: &#34;consul&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    stub-addr: 127.0.0.1@8600
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">)</span> | sudo tee /etc/unbound/unbound.conf
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo rc-update add unbound
</span></span><span style="display:flex;"><span>sudo rc-service unbound start
</span></span></code></pre></div><p>We can validate this works again by using <code>dig</code>, but this time removing the port specification to hit <code>53</code> instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dig @localhost consul.service.consul
</span></span></code></pre></div><h2 id="configure-dns-resolution">Configure DNS Resolution</h2>
<p>Finally, we need to update <code>/etc/resolv.conf</code> so that other system tools such as <code>ping</code> and <code>curl</code> can resolve <code>.consul</code> addresses.  This is a little more hassle on Alpine, as there are no <code>head</code> files we can push our nameserver entry into.  Instead, we use <code>dhclient</code> which will let us prepend a custom nameserver (or multiple) when the interface is brought up, even when using DHCP:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>sudo apk add dhclient
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>cat <span style="color:#e6db74">&lt;&lt;-EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">send host-name = gethostname();
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">request subnet-mask, broadcast-address, time-offset, routers,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        domain-name, domain-name-servers, domain-search, host-name,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        dhcp6.name-servers, dhcp6.domain-search, dhcp6.fqdn, dhcp6.sntp-servers,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        netbios-name-servers, netbios-scope, interface-mtu,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        rfc3442-classless-static-routes, ntp-servers;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">prepend domain-name-servers 127.0.0.1;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">)</span> | sudo tee /etc/dhcp/dhclient.conf
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo rm /etc/resolv.conf <span style="color:#75715e"># hack due to it dhclient making an invalid `chown` call.</span>
</span></span><span style="display:flex;"><span>sudo rc-service networking restart
</span></span></code></pre></div><p>The only thing of interest here is the little hack: we delete the <code>/etc/resolv.conf</code> before restarting the networking service, as if you don&rsquo;t do this, you get errors about &ldquo;chmod invalid option resource=&hellip;&rdquo;.</p>
<p>We can varify everything works in the same way we did on Ubuntu; <code>curl</code> to both a <code>.consul</code> and a public address:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl -s -o /dev/null -w <span style="color:#e6db74">&#34;%{http_code}\n&#34;</span> http://consul.service.consul:8500/ui/
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ curl -s -o /dev/null -w <span style="color:#e6db74">&#34;%{http_code}\n&#34;</span> http://google.com
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">301</span>
</span></span></code></pre></div><h2 id="end">End</h2>
<p>This was a bit easier to get started with than the Ubuntu version as I knew what I was trying to accomplish this time - however making a good <code>init.d</code> script was a bit more hassle, and the error from <code>chmod</code> took some time to track down.</p>
]]></content:encoded></item><item><title>Configuring Consul DNS Forwarding in Ubuntu 16.04</title><link>https://andydote.co.uk/2019/05/29/consul-dns-forwarding/</link><pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/05/29/consul-dns-forwarding/</guid><description>DEPRECATED - This doesn&amp;rsquo;t work properly Please see this post for an updated version which works!
One of the advantages of using Consul for service discovery is that besides an HTTP API, you can also query it by DNS.
The DNS server is listening on port 8600 by default, and you can query both A records or SRV records from it. SRV records are useful as they contain additional properties (priority, weight and port), and you can get multiple records back from a single query, letting you do load balancing client side:</description><content:encoded><![CDATA[<h1 id="deprecated---this-doesnt-work-properly">DEPRECATED - This doesn&rsquo;t work properly</h1>
<p><a href="/2019/09/24/consul-ubuntu-dns-revisited/">Please see this post for an updated version which works!</a></p>
<hr>
<p>One of the advantages of using <a href="https://www.consul.io/">Consul</a> for service discovery is that besides an HTTP API, you can also query it by DNS.</p>
<p>The DNS server is listening on port <code>8600</code> by default, and you can query both A records or SRV records from it.  <a href="https://en.wikipedia.org/wiki/SRV_record">SRV</a> records are useful as they contain additional properties (<code>priority</code>, <code>weight</code> and <code>port</code>), and you can get multiple records back from a single query, letting you do load balancing client side:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ dig @localhost -p <span style="color:#ae81ff">8600</span> consul.service.consul SRV +short
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">8300</span> vagrant1.node.dc1.consul.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> <span style="color:#ae81ff">14</span> <span style="color:#ae81ff">8300</span> vagrant2.node.dc1.consul.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> <span style="color:#ae81ff">100</span> <span style="color:#ae81ff">8300</span> vagrant3.node.dc1.consul.
</span></span></code></pre></div><p>A Records are also useful, as it means we should be able to treat services registered to Consul like any other domain - but it doesn&rsquo;t work:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl http://consul.service.consul:8500
</span></span><span style="display:flex;"><span>curl: <span style="color:#f92672">(</span>6<span style="color:#f92672">)</span> Could not resolve host: consul.service.consul
</span></span></code></pre></div><p>The reason for this is that the system&rsquo;s built-in DNS resolver doesn&rsquo;t know how to query Consul.  We can, however, configure it to forward any <code>*.consul</code> requests to Consul.</p>
<h2 id="solution---forward-dns-queries-to-consul">Solution - Forward DNS queries to Consul</h2>
<p>As I usually target Ubuntu based machines, this means configuring <code>systemd-resolved</code> to forward to Consul.  However, we want to keep Consul listening on it&rsquo;s default port (<code>8600</code>), and <code>systemd-resolved</code> can only forward requests to port <code>53</code>, so we need also to configure <code>iptables</code> to redirect the requests.</p>
<p>The steps are as follows:</p>
<ol>
<li>Configure <code>systemd-resolved</code> to forward <code>.consul</code> TLD queries to the local consul agent</li>
<li>Configure <code>iptables</code> to redirect <code>53</code> to <code>8600</code></li>
</ol>
<p>So let&rsquo;s get to it!</p>
<h3 id="1-make-iptables-persistent">1. Make iptables persistent</h3>
<p>IPTables configuration changes don&rsquo;t persist through reboots, so the easiest way to solve this is with the <code>iptables-persistent</code> package.</p>
<p>Typically I am scripting machines (using [Packer] or [Vagrant]), so I configure the install to be non-interactive:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo iptables-persistent iptables-persistent/autosave_v4 boolean false | sudo debconf-set-selections
</span></span><span style="display:flex;"><span>echo iptables-persistent iptables-persistent/autosave_v6 boolean false | sudo debconf-set-selections
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo DEBIAN_FRONTEND<span style="color:#f92672">=</span>noninteractive apt install -yq iptables-persistent
</span></span></code></pre></div><h3 id="2-update-systemd-resolved">2. Update Systemd-Resolved</h3>
<p>The file to change is <code>/etc/systemd/resolved.conf</code>.  By default it looks like this:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">[Resolve]
#DNS=
#FallbackDNS=8.8.8.8 8.8.4.4 2001:4860:4860::8888 2001:4860:4860::8844
#Domains=
#LLMNR=yes
#DNSSEC=no
</code></pre><p>We need to change the <code>DNS</code> and <code>Domains</code> lines - either editing the file by hand, or scripting a replacement with <code>sed</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo sed -i <span style="color:#e6db74">&#39;s/#DNS=/DNS=127.0.0.1/g; s/#Domains=/Domains=~consul/g&#39;</span> /etc/systemd/resolved.conf
</span></span></code></pre></div><p>The result of which is the file now reading like this:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">[Resolve]
DNS=127.0.0.1
#FallbackDNS=8.8.8.8 8.8.4.4 2001:4860:4860::8888 2001:4860:4860::8844
Domains=~consul
#LLMNR=yes
#DNSSEC=no
</code></pre><p>By specifying the <code>Domains</code> as <code>~consul</code>, we are telling resolvd to forward requests for the <code>consul</code> TLD to the server specified in the <code>DNS</code> line.</p>
<h3 id="3-configure-resolvconf-too">3. Configure Resolvconf too</h3>
<p>For compatibility with some applications (e.g. <code>curl</code> and <code>ping</code>), we also need to update <code>/etc/resolv.conf</code> to specify our local nameserver.  You do this <strong>not</strong> by editing the file directly!</p>
<p>Instead, we need to add <code>nameserver 127.0.0.1</code> to <code>/etc/resolvconf/resolv.conf.d/head</code>.  Again, I will script this, and as we need <code>sudo</code> to write to the file, the easiest way is to use <code>tee</code> to append the line and then run <code>resolvconf -u</code> to apply the change:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;nameserver 127.0.0.1&#34;</span> | sudo tee --append /etc/resolvconf/resolv.conf.d/head
</span></span><span style="display:flex;"><span>sudo resolvconf -u
</span></span></code></pre></div><h3 id="configure-iptables">Configure iptables</h3>
<p>Finally, we need to configure iptables so that when <code>systemd-resolved</code> sends a DNS query to localhost on port <code>53</code>, it gets redirected to port <code>8600</code>.  We&rsquo;ll do this for both TCP and UDP requests, and then use <code>netfilter-persistent</code> to make the rules persistent:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo iptables -t nat -A OUTPUT -d localhost -p udp -m udp --dport <span style="color:#ae81ff">53</span> -j REDIRECT --to-ports <span style="color:#ae81ff">8600</span>
</span></span><span style="display:flex;"><span>sudo iptables -t nat -A OUTPUT -d localhost -p tcp -m tcp --dport <span style="color:#ae81ff">53</span> -j REDIRECT --to-ports <span style="color:#ae81ff">8600</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo netfilter-persistent save
</span></span></code></pre></div><h2 id="verification">Verification</h2>
<p>First, we can test that both Consul and Systemd-Resolved return an address for a consul service:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ dig @localhost -p <span style="color:#ae81ff">8600</span> consul.service.consul +short
</span></span><span style="display:flex;"><span>10.0.2.15
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ dig @localhost consul.service.consul +short
</span></span><span style="display:flex;"><span>10.0.2.15
</span></span></code></pre></div><p>And now we can try using <code>curl</code> to verify that we can resolve consul domains and normal domains still:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl -s -o /dev/null -w <span style="color:#e6db74">&#34;%{http_code}\n&#34;</span> http://consul.service.consul:8500/ui/
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ curl -s -o /dev/null -w <span style="color:#e6db74">&#34;%{http_code}\n&#34;</span> http://google.com
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">301</span>
</span></span></code></pre></div><h2 id="end">End</h2>
<p>There are also guides available on how to do this on <a href="https://learn.hashicorp.com/consul/security-networking/forwarding">Hashicorp&rsquo;s website</a>, covering other DNS resolvers too (such as BIND, Dnsmasq, Unbound).</p>
]]></content:encoded></item><item><title>Running a Secure RabbitMQ Cluster in Nomad</title><link>https://andydote.co.uk/2019/04/06/nomad-rabbitmq-secure/</link><pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/04/06/nomad-rabbitmq-secure/</guid><description>Last time I wrote about running a RabbitMQ cluster in Nomad, one of the main pieces of feedback I received was about the (lack) of security of the setup, so I decided to revisit this, and write about how to launch as secure RabbitMQ node in Nomad.
The things I want to cover are:
Username and Password for the management UI Secure value for the Erlang Cookie SSL for Management and AMQP As usual, the demo repository with all the code is available if you&amp;rsquo;d rather just jump into that.</description><content:encoded><![CDATA[<p>Last time I wrote about running a RabbitMQ cluster in Nomad, one of the main pieces of feedback I received was about the (lack) of security of the setup, so I decided to revisit this, and write about how to launch as secure RabbitMQ node in Nomad.</p>
<p>The things I want to cover are:</p>
<ul>
<li>Username and Password for the management UI</li>
<li>Secure value for the Erlang Cookie</li>
<li>SSL for Management and AMQP</li>
</ul>
<p>As usual, the <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo">demo repository</a> with all the code is available if you&rsquo;d rather just jump into that.</p>
<h2 id="configure-nomad-to-integrate-with-vault">Configure Nomad To Integrate With Vault</h2>
<p>To manage the certificates and credentials I will use another Hashicorp tool called <a href="https://vaultproject.io/">Vault</a>, which provides Secrets As A Service.  It can be configured for High Availability, but for the demo, we will just use a single instance on one of our Nomad machines.</p>
<h3 id="vault">Vault</h3>
<p>We&rsquo;ll update the Vagrant script used in the <a href="/2019/01/28/nomad-rabbitmq-consul-cluster/">last post about Nomad Rabbitmq Clustering</a> to add in a single Vault node.  <strong>This is not suitable for using Vault in production;</strong> for that there should be a separate Vault cluster running somewhere, but as this post is focusing on how to integrate with Vault, a single node will suffice.</p>
<p>Once we have Vault installed (<a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/master/provision.sh#L50">see the <code>provision.sh</code> script</a>), we need to set up a few parts.  First is a PKI (public key infrastructure), better known as a Certificate Authority (CA).  We will generate a single root certificate and have our client machines (and optionally the host machine) trust that one certificate.</p>
<p>As this the machines are running in Hyper-V with the Default Switch, we can use the inbuilt domain name, <code>mshome.net</code>, and provide our own certificates.  This script is run as part of the Server (<code>nomad1</code>) provisioning script, but in a production environment would be outside of this scope.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>domain<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mshome.net&#34;</span>
</span></span><span style="display:flex;"><span>vault secrets enable pki
</span></span><span style="display:flex;"><span>vault secrets tune -max-lease-ttl<span style="color:#f92672">=</span>87600h pki
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault write -field<span style="color:#f92672">=</span>certificate pki/root/generate/internal common_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$domain<span style="color:#e6db74">&#34;</span> ttl<span style="color:#f92672">=</span>87600h <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    &gt; /vagrant/vault/mshome.crt
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault write pki/config/urls <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    issuing_certificates<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$VAULT_ADDR<span style="color:#e6db74">/v1/pki/ca&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    crl_distribution_points<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$VAULT_ADDR<span style="color:#e6db74">/v1/pki/crl&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault write pki/roles/rabbit <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    allowed_domains<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$domain<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    allow_subdomains<span style="color:#f92672">=</span>true <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    generate_lease<span style="color:#f92672">=</span>true <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    max_ttl<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;720h&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo cp /vagrant/vault/mshome.crt /usr/local/share/ca-certificates/mshome.crt
</span></span><span style="display:flex;"><span>sudo update-ca-certificates
</span></span></code></pre></div><p>If you don&rsquo;t want scary screens in FireFox and Chrome, you&rsquo;ll need to install the <code>mshome.crt</code> certificate into your trust store.</p>
<p>Next up, we have some policies we need in Vault.  The first deals with what the Nomad Server(s) are allowed to do - namely to handle tokens for itself, and anything in the <code>nomad-cluster</code> role.  <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/master/vault/nomad-server-policy.hcl">A full commented version of this policy is available here</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;auth/token/create/nomad-cluster&#34;</span> {
</span></span><span style="display:flex;"><span>  capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;update&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;auth/token/roles/nomad-cluster&#34;</span> {
</span></span><span style="display:flex;"><span>  capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;read&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;auth/token/lookup-self&#34;</span> {
</span></span><span style="display:flex;"><span>  capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;read&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;auth/token/lookup&#34;</span> {
</span></span><span style="display:flex;"><span>  capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;update&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;auth/token/revoke-accessor&#34;</span> {
</span></span><span style="display:flex;"><span>  capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;update&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;sys/capabilities-self&#34;</span> {
</span></span><span style="display:flex;"><span>  capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;update&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;auth/token/renew-self&#34;</span> {
</span></span><span style="display:flex;"><span>  capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;update&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As this policy mentions the <code>nomad-cluster</code> role a few times, let&rsquo;s have a look at that also:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;disallowed_policies&#34;</span>: <span style="color:#e6db74">&#34;nomad-server&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;explicit_max_ttl&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;nomad-cluster&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;orphan&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;period&#34;</span>: <span style="color:#ae81ff">259200</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;renewable&#34;</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This allows a fairly long-lived token to be created, which can be renewed.  It is also limiting what the tokens are allowed to do, which can be done as either a block list (<code>disallowed_policies</code>) or an allow list (<code>allowed_policies</code>).  In this case, I am letting the Clients access any policies except the <code>nomad-server</code> policy.</p>
<p>We can install both of these into Vault:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault policy write nomad-server /vagrant/vault/nomad-server-policy.hcl
</span></span><span style="display:flex;"><span>vault write auth/token/roles/nomad-cluster @/vagrant/vault/nomad-cluster-role.json
</span></span></code></pre></div><h3 id="nomad">Nomad</h3>
<p>Now that Vault is up and running, we should configure Nomad to talk to it.  This is done in two places - the Server configuration, and the Client configuration.</p>
<p>To configure the <strong>Nomad Server</strong>, we update it&rsquo;s configuration file to include a <code>vault</code> block, which contains a role name it will use to generate tokens (for itself and for the Nomad Clients), and an initial token.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>vault {
</span></span><span style="display:flex;"><span>    enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    address <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://localhost:8200&#34;</span>
</span></span><span style="display:flex;"><span>    task_token_ttl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1h&#34;</span>
</span></span><span style="display:flex;"><span>    create_from_role <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nomad-cluster&#34;</span>
</span></span><span style="display:flex;"><span>    token <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;some_token_here&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The initial token is generated by the <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/master/server.sh"><code>./server.sh</code></a> script - how you go about doing this in production will vary greatly depending on how you are managing your machines.</p>
<p>The <strong>Nomad Clients</strong> also need the Vault integration enabling, but in their case, it only needs the location of Vault, as the Server node(s) will provide tokens for the clients to use.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>vault {
</span></span><span style="display:flex;"><span>    enabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    address <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://nomad1.mshome.net:8200&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="job-requirements">Job Requirements</h2>
<p>Before we go about changing the job itself, we need to write some data into Vault for the job to use:</p>
<ul>
<li>Credentials: Username and password for the RabbitMQ Management UI, and the <code>RABBITMQ_ERLANG_COOKIE</code></li>
<li>A policy for the job allowing Certificate Generation and Credentials access</li>
</ul>
<h3 id="credentials">Credentials</h3>
<p>First off, we need to create a username and password to use with the Management UI.  This can be done via the Vault CLI:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault kv put secret/rabbit/admin <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    username<span style="color:#f92672">=</span>administrator <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    password<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat /proc/sys/kernel/random/uuid<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>For the Erlang Cookie, we will also generate a Guid, but this time we will store it under a separate path in Vault so that it can be locked down separately to the admin username and password if needed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault kv put secret/rabbit/cookie <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    cookie<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat /proc/sys/kernel/random/uuid<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><h3 id="job-policy">Job Policy</h3>
<p>Following the principle of <a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege">Least Privilege</a>, we will create a policy for our <code>rabbit</code> job which only allows certificates to be generated, and rabbit credentials to be read.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;pki/issue/rabbit&#34;</span> {
</span></span><span style="display:flex;"><span>  capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;create&#34;</span>, <span style="color:#e6db74">&#34;read&#34;</span>, <span style="color:#e6db74">&#34;update&#34;</span>, <span style="color:#e6db74">&#34;delete&#34;</span>, <span style="color:#e6db74">&#34;list&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;secret/data/rabbit/*&#34;</span> {
</span></span><span style="display:flex;"><span>  capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;read&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This is written into Vault in the same way as the other policies were:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault policy write rabbit /vagrant/vault/rabbit-policy.hcl
</span></span></code></pre></div><h2 id="rabbit-job-configuration">Rabbit Job Configuration</h2>
<p>The first thing we need to do to the job is specify what policies we want to use with Vault, and what to do when a token or credential expires:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>task <span style="color:#e6db74">&#34;rabbit&#34;</span> {
</span></span><span style="display:flex;"><span>  driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;docker&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  vault {
</span></span><span style="display:flex;"><span>    policies <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;default&#34;</span>, <span style="color:#e6db74">&#34;rabbit&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    change_mode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;restart&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#...</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="certificates">Certificates</h3>
<p>To configure RabbitMQ to use SSL, we need to provide it with values for 3 environment variables:</p>
<ul>
<li><code>RABBITMQ_SSL_CACERTFILE</code> - The CA certificate</li>
<li><code>RABBITMQ_SSL_CERTFILE</code> - The Certificate for RabbitMQ to use</li>
<li><code>RABBITMQ_SSL_KEYFILE</code> - the PrivateKey for the RabbitMQ certificate</li>
</ul>
<p>So let&rsquo;s add a <code>template</code> block to the job to generate and write out a certificate.  It&rsquo;s worth noting that <strong>line endings matter</strong>.  You either need your <code>.nomad</code> file to use LF line endings, or make the <code>template</code> a single line and use <code>\n</code> to add the correct line endings in.  I prefer to have the file with LF line endings.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>template <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  data <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;&lt;EOH
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{{ $host := printf &#34;common_name=%s.mshome.net&#34; (env &#34;attr.unique.hostname&#34;) }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{{ with secret &#34;pki/issue/rabbit&#34; $host &#34;format=pem&#34; }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{{ .Data.certificate }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{{ .Data.private_key }}{{ end }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOH</span>
</span></span><span style="display:flex;"><span>  destination <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;secrets/rabbit.pem&#34;</span>
</span></span><span style="display:flex;"><span>  change_mode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;restart&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>As we want to use the Nomad node&rsquo;s hostname within the <code>common_name</code> parameter of the secret, we need to use a variable to fetch and format the value:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>{{ $host :<span style="color:#f92672">=</span> printf <span style="color:#e6db74">&#34;common_name=%s.mshome.net&#34;</span> (env <span style="color:#e6db74">&#34;attr.unique.hostname&#34;</span>) }}
</span></span></code></pre></div><p>This can then be used by the <code>with secret</code> block to fetch a certificate for the current host:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>{{ with secret <span style="color:#e6db74">&#34;pki/issue/rabbit&#34;</span> $host <span style="color:#e6db74">&#34;format=pem&#34;</span> }}
</span></span></code></pre></div><p>Now that we have a certificate in the <code>./secrets/</code> directory, we can add a couple of volume mounts to the container, and set the environment variables with the container paths to the certificates.  Note how the root certificate is coming from the <code>/vagrant</code> directory, not from Vault itself.  Depending on how you are provisioning your machines to trust your CA, you will have a different path here!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>config {
</span></span><span style="display:flex;"><span>  image <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pondidum/rabbitmq:consul&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># ...</span>
</span></span><span style="display:flex;"><span>  volumes <span style="color:#f92672">=</span> <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;/vagrant/vault/mshome.crt:/etc/ssl/certs/mshome.crt&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;secrets/rabbit.pem:/etc/ssl/certs/rabbit.pem&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;secrets/rabbit.pem:/tmp/rabbitmq-ssl/combined.pem&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>env {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">RABBITMQ_SSL_CACERTFILE</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/etc/ssl/certs/mshome.crt&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">RABBITMQ_SSL_CERTFILE</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/etc/ssl/certs/rabbit.pem&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">RABBITMQ_SSL_KEYFILE</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/etc/ssl/certs/rabbit.pem&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#...</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You should also notice that we are writing the <code>secrets/rabbit.pem</code> file into the container twice:  The second write is to a file in <code>/tmp</code> as a workaround for the <code>docker-entrypoint.sh</code> script.  If we don&rsquo;t create this file ourselves, the container script will create it by combining the <code>RABBITMQ_SSL_CERTFILE</code> file and <code>RABBITMQ_SSL_KEYFILE</code> file, which will result in an invalid certificate, and a nightmare to figure out&hellip;</p>
<p>If the Vault integration in Nomad could write a single generated secret to two separate files, we wouldn&rsquo;t need this workaround.  Alternatively, you could make a custom container with a customised startup script to deal with this for you.</p>
<p>You can see the version of this file with <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/a588d7c2483c999b2fa0f47433403dfe1838fd50/rabbit/secure.nomad">only these changes here</a></p>
<h3 id="credentials-1">Credentials</h3>
<p>Now that we have things running with a certificate, it would be a great idea to start using the Erlang Cookie value and Management UI credentials we stored in Vault earlier.  This is a super easy change to support in the Nomad file - we need to add another <code>template</code> block, but this time set <code>env = true</code> which will instruct nomad that the key-values in the template should be loaded as environment variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>template <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> <span style="color:#e6db74">&lt;&lt;EOH
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {{ with secret &#34;secret/data/rabbit/cookie&#34; }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    RABBITMQ_ERLANG_COOKIE=&#34;{{ .Data.data.cookie }}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {{ end }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {{ with secret &#34;secret/data/rabbit/admin&#34; }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    RABBITMQ_DEFAULT_USER={{ .Data.data.username }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    RABBITMQ_DEFAULT_PASS={{ .Data.data.password }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {{ end }}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOH</span>
</span></span><span style="display:flex;"><span>    destination <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;secrets/rabbit.env&#34;</span>
</span></span><span style="display:flex;"><span>    env <span style="color:#f92672">=</span> true
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The complete nomad file with <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/a78736cac3a93a43a96cbe84492089fca29d15e1/rabbit/secure.nomad">both certificates and credentials can be seen here</a>.</p>
<h2 id="running">Running!</h2>
<p>Now, all we need to do is start our new secure cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nomad job run rabbit/secure.nomad
</span></span></code></pre></div><h2 id="client-libraries">Client Libraries</h2>
<p>Now that you have a secure version of RabbitMQ running, there are some interesting things which can be done with the client libraries.  While you can just use the secure port, RabbitMQ also supports <a href="https://www.rabbitmq.com/ssl.html#peer-verification">Peer Verification</a>, which means that the client has to present a certificate for itself, and RabbitMQ will validate that both certificates are signed by a common CA.</p>
<p>This process can be controlled with two environment variables:</p>
<ul>
<li><code>RABBITMQ_SSL_VERIFY</code> set to either <code>verify_peer</code> or <code>verify_none</code></li>
<li><code>RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT</code> set to <code>true</code> to require client certificates, <code>false</code> to make them optional</li>
</ul>
<p>In .net land, if you are using MassTransit, the configuration looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> bus = Bus.Factory.CreateUsingRabbitMq(c =&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    c.UseSerilog(logger);
</span></span><span style="display:flex;"><span>    c.Host(<span style="color:#e6db74">&#34;rabbitmq://nomad1.mshome.net:5671&#34;</span>, r =&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        r.Username(<span style="color:#e6db74">&#34;some_application&#34;</span>);
</span></span><span style="display:flex;"><span>        r.Password(<span style="color:#e6db74">&#34;some_password&#34;</span>);
</span></span><span style="display:flex;"><span>        r.UseSsl(ssl =&gt;
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            ssl.CertificatePath = <span style="color:#e6db74">@&#34;secrets/app.crt&#34;</span>;
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>There are also lots of other interesting things you can do with SSL and RabbitMQ, such as using the certificate as authentication rather than needing a username and password per app.  But you should be generating your app credentials dynamically with Vault too&hellip;</p>
<h1 id="wrapping-up">Wrapping Up</h1>
<p>Finding all the small parts to make this work was quite a challenge.  The <a href="https://gitter.im/hashicorp-nomad/Lobby">Nomad gitter</a> was useful when trying to figure out the certificates issue, and being able to read the <a href="https://github.com/docker-library/rabbitmq/blob/4b2b11c59ee65c2a09616b163d4572559a86bb7b/3.7/alpine/docker-entrypoint.sh#L363">source code</a> of the Docker image for RabbitMQ was invaluable to making the Certificate work.</p>
<p>If anyone sees anything I&rsquo;ve done wrong, or could be improved, I&rsquo;m happy to hear it!</p>
]]></content:encoded></item><item><title>RabbitMQ clustering with Consul in Nomad</title><link>https://andydote.co.uk/2019/01/28/nomad-rabbitmq-consul-cluster/</link><pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/01/28/nomad-rabbitmq-consul-cluster/</guid><description>Update If you want a secure version of this cluster, see Running a Secure RabbitMQ Cluster in Nomad.
RabbitMQ is the centre of a lot of micros service architectures, and while you can cluster it manually, it is a lot easier to use some of the auto clustering plugins, such as AWS (EC2), Consul, Etcd, or Kubernetes. As I like to use Nomad for container orchestration, I thought it would be a good idea to show how to cluster RabbitMQ when it is running in a Docker container, on an unknown host (i.</description><content:encoded><![CDATA[<p><strong>Update</strong> If you want a secure version of this cluster, see <a href="/2019/04/06/nomad-rabbitmq-secure/">Running a Secure RabbitMQ Cluster in Nomad</a>.</p>
<p>RabbitMQ is the centre of a lot of micros service architectures, and while you can cluster it manually, it is a lot easier to use some of the <a href="https://www.rabbitmq.com/clustering.html#cluster-formation-options">auto clustering plugins</a>, such as AWS (EC2), Consul, Etcd, or Kubernetes. As I like to use <a href="https://www.nomadproject.io/">Nomad</a> for container orchestration, I thought it would be a good idea to show how to cluster RabbitMQ when it is running in a Docker container, on an unknown host (i.e. one picked by Nomad.)</p>
<p>I ran into a few problems trying to get this working, but a lot of searching and some help from the <a href="https://groups.google.com/forum/#!forum/rabbitmq-users">RabbitMQ mailing list</a> (thanks Luke!) got me through all the issues, so hopefully, this will be easier next time and for other people too.</p>
<p>It is also worth noting that this is only going to be covering how to make a cluster work, not how to make it secure (setting up TLS etc.) for production usage.  There is a lot of <a href="https://www.rabbitmq.com/production-checklist.html#security-considerations">documentation on the RabbitMQ website</a> for further reading on this!</p>
<p>The full repository with all of the <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo">demo code is available on my Github</a>.</p>
<h2 id="nomad-cluster">Nomad Cluster</h2>
<p>As this post is mostly about running RabbitMQ on Nomad, and not setting up Nomad, I&rsquo;ll give the basics here - the full scripts are in the repository, and linked below too.</p>
<p>Vagrant is used to create us a three node cluster.  As I use Hyper-V for VMs, I can&rsquo;t set static IPs from the Vagrant file, so I have used another Vagrant feature: triggers.</p>
<p>Triggers let us specify scripts to run after Vagrant actions, so in this case, we run a script after machine1 comes up which writes out it&rsquo;s IP to the <code>/vagrant</code> share.  The other machines can then read this same file to join the cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">Vagrant</span><span style="color:#f92672">.</span>configure(<span style="color:#ae81ff">2</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>config<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>box <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bento/ubuntu-16.04&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provision <span style="color:#e6db74">&#34;shell&#34;</span>, <span style="color:#e6db74">path</span>: <span style="color:#e6db74">&#34;./provision.sh&#34;</span>, <span style="color:#e6db74">privileged</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>define <span style="color:#e6db74">&#34;n1&#34;</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>n1<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>    n1<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provision <span style="color:#e6db74">&#34;shell&#34;</span>, <span style="color:#e6db74">path</span>: <span style="color:#e6db74">&#34;./server.sh&#34;</span>, <span style="color:#e6db74">privileged</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    n1<span style="color:#f92672">.</span>trigger<span style="color:#f92672">.</span>after <span style="color:#e6db74">:up</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>trigger<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>      trigger<span style="color:#f92672">.</span>run_remote <span style="color:#f92672">=</span> { <span style="color:#e6db74">inline</span>: <span style="color:#e6db74">&#34;ip route get 1 | awk &#39;{print $NF;exit}&#39; &gt; /vagrant/server_ip&#34;</span> }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>define <span style="color:#e6db74">&#34;n2&#34;</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>n2<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>    n2<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>hostname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nomad2&#34;</span>
</span></span><span style="display:flex;"><span>    n2<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provision <span style="color:#e6db74">&#34;shell&#34;</span>, <span style="color:#e6db74">path</span>: <span style="color:#e6db74">&#34;./client.sh&#34;</span>, <span style="color:#e6db74">privileged</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p>The <code>provision.sh</code> script downloads and installs both Consul and Nomad, and then the respective <code>server.sh</code> and <code>client.sh</code> scripts set up both services in the right ways.  The server machine also acts as a Nomad client, so that we don&rsquo;t need 4 VMs running.</p>
<p><a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/master/vagrantfile">VagrantFile</a>, <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/master/provision.sh">provision.sh</a>, <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/master/server.sh">server.sh</a>, <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/master/client.sh">client.sh</a></p>
<p>All that remains to be done is <code>vagrant up</code>&hellip;and wait.  But while we&rsquo;re waiting for the machines to provision, let&rsquo;s have a look at RabbitMQ clustering, and how we&rsquo;ll define the job in Nomad.</p>
<h2 id="rabbitmq-cluster">RabbitMQ Cluster</h2>
<p>A few things to note about clustering RabbitMQ:</p>
<ul>
<li>All nodes must be listening on the same port for clustering (<code>4369</code> by default)</li>
<li>The <code>ERL_EPMD_PORT</code> variable doesn&rsquo;t work on <code>rabbitmq &lt; 3.7.9</code></li>
<li>The latest Docker image for rabbitmq is <code>3.7.8</code></li>
<li>The rabbit node names must be DNS resolvable</li>
<li>The <code>RABBITMQ_ERLANG_COOKIE</code> must have the same value</li>
</ul>
<p>The <code>rabbitmq_peer_discovery_consul</code> plugin we will use is shipped with RabbitMQ by default but is disabled.  The easiest way to get everything up and running is to create your own docker container, with the plugin enabled, and a small configuration file to set a few options:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">FROM rabbitmq:management-alpine
COPY rabbitmq.conf /etc/rabbitmq
RUN rabbitmq-plugins enable --offline rabbitmq_peer_discovery_consul
</code></pre><p>The <code>rabbitmq.conf</code> only needs a few lines:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">cluster_formation.peer_discovery_backend = rabbit_peer_discovery_consul
cluster_formation.consul.svc_addr_auto = true
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker build -t rabbitmq:consul .
</span></span></code></pre></div><p>An image built from this is also available on <a href="https://hub.docker.com/r/pondidum/rabbitmq">docker hub</a>.</p>
<p>Once we have a custom container built, it&rsquo;s a good idea to test that it actually works, before we start trying to get Nomad to run it.  We&rsquo;ll do this by creating a network in Docker so that all the containers can talk directly to each other on their pre-defined ports.  Don&rsquo;t forget to change <code>CONSUL_HOST</code> to your machine&rsquo;s IP address!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker network create rabbit
</span></span><span style="display:flex;"><span>docker run -d --rm --name consul -p 8500:8500 consul
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker run -d --rm --name rabbit1 -h rabbit1 --network rabbit -p 30001:15672 -e RABBITMQ_ERLANG_COOKIE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;rabbit&#39;</span> -e <span style="color:#e6db74">&#39;RABBITMQ_DEFAULT_USER=test&#39;</span> -e <span style="color:#e6db74">&#39;RABBITMQ_DEFAULT_PASS=test&#39;</span> -e CONSUL_HOST<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.0.75.1&#39;</span> rabbitmq:consul
</span></span><span style="display:flex;"><span>docker run -d --rm --name rabbit2 -h rabbit2 --network rabbit -p 30002:15672 -e RABBITMQ_ERLANG_COOKIE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;rabbit&#39;</span> -e <span style="color:#e6db74">&#39;RABBITMQ_DEFAULT_USER=test&#39;</span> -e <span style="color:#e6db74">&#39;RABBITMQ_DEFAULT_PASS=test&#39;</span> -e CONSUL_HOST<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.0.75.1&#39;</span> rabbitmq:consul
</span></span><span style="display:flex;"><span>docker run -d --rm --name rabbit3 -h rabbit3 --network rabbit -p 30003:15672 -e RABBITMQ_ERLANG_COOKIE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;rabbit&#39;</span> -e <span style="color:#e6db74">&#39;RABBITMQ_DEFAULT_USER=test&#39;</span> -e <span style="color:#e6db74">&#39;RABBITMQ_DEFAULT_PASS=test&#39;</span> -e CONSUL_HOST<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.0.75.1&#39;</span> rabbitmq:consul
</span></span></code></pre></div><p>You can now visit <code>http://localhost:30001</code> (or <code>30002</code> or <code>30003</code>) and see that we have a successful cluster running.  Once you&rsquo;re happy with it, you can kill it all off (as we started the containers with the <code>--rm</code> flag, Docker will delete them for us when they stop):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker stop rabbit1 rabbit2 rabbit3 consul
</span></span><span style="display:flex;"><span>docker network rm rabbit
</span></span></code></pre></div><h2 id="nomad-rabbit-job">Nomad Rabbit Job</h2>
<p>Now that we know our container clusters successfully, we can create a Job definition to do the same thing in Nomad.  Nomad jobs are defined in HCL, a Json-like configuration language.</p>
<p>The jobs require a name, which datacentre it should run in, and what kind of job type it is.  In this case, our job is called <code>rabbit</code> (imaginative I know), we&rsquo;ll run it in <code>dc1</code> (the default value Nomad starts with), and we&rsquo;ll make this job be a <code>service</code>, as opposed to a <code>batch</code> or <code>system</code> job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>job <span style="color:#e6db74">&#34;rabbit&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  datacenters <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;dc1&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;service&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  group <span style="color:#e6db74">&#34;cluster&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># tasks ...</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The <code>group</code> is used to hold a collection of <code>task</code>s, and when allocating a job, Nomad will make sure that all tasks belonging to an instance of a group are on the same node.</p>
<p>So for example, if you had a 2 node Nomad cluster, and 3 instances of a group which contained 3 tasks (e.g. API, varnish, and nginx containers), Nomad might distribute the groups like so:</p>
<p><img loading="lazy" src="nomad-allocation.png" alt="image of several nodes with groups of containers"  />
</p>
<p>Within the group, we can specify the number of instances we want with the <code>count</code> property, and we also specify that for both updates and migrations, only one group can be changed at a time.  This means that if you decide to upgrade the container used by the job, Nomad won&rsquo;t stop all instances at once, destroying your service&rsquo;s availability!</p>
<p>We also specify that we want to use the health checks (defined later on) rather than the state of the task itself to determine what is healthy, and how long the task must be healthy for before we decide it&rsquo;s actually healthy, and how long it has to achieve being healthy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>group <span style="color:#e6db74">&#34;cluster&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  count <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  update <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    max_parallel <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  migrate <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    max_parallel <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    health_check <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;checks&#34;</span>
</span></span><span style="display:flex;"><span>    min_healthy_time <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;5s&#34;</span>
</span></span><span style="display:flex;"><span>    healthy_deadline <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;30s&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The <code>task</code> is our unit of work in Nomad.  In this case, we are using the <code>docker</code> driver, but it also <a href="https://www.nomadproject.io/docs/drivers/index.html">supports many other drivers</a> including <code>exec</code>, <code>rkt</code> and <code>lxc</code>.  We configure which image to use, and importantly that the <code>hostname</code> is the name from Nomad!</p>
<p>The <code>port_map</code> tells nomad which ports of the container we want to expose, and labels them.  We can then refer to the ports by their labels in other parts of the configuration.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>task <span style="color:#e6db74">&#34;rabbit&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;docker&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  config <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    image <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pondidum/rabbitmq:consul&#34;</span>
</span></span><span style="display:flex;"><span>    hostname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>attr.unique.hostname<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    port_map <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      amqp <span style="color:#f92672">=</span> <span style="color:#ae81ff">5672</span>
</span></span><span style="display:flex;"><span>      ui <span style="color:#f92672">=</span> <span style="color:#ae81ff">15672</span>
</span></span><span style="display:flex;"><span>      epmd <span style="color:#f92672">=</span> <span style="color:#ae81ff">4369</span>
</span></span><span style="display:flex;"><span>      clustering <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The <code>env</code> section is pretty self-explanatory; they are environment variables to pass to the container.  As Consul is running on the Nomad host, we use the Nomad interpolation attribute to specify the IP of the current host, and we also set the <code>RABBITMQ_ERLANG_COOKIE</code> to a specific value.  In a production environment, you should be setting this value to something unguessable, possibly using the <a href="https://www.nomadproject.io/docs/job-specification/vault.html">Vault intergration</a> in Nomad to fetch a token.  We can also add other settings to pass to the container here, such as <code>RABBITMQ_DEFAULT_USER</code> and <code>RABBITMQ_DEFAULT_PASS</code>.  As with the cookie generation, in a production-like environment, you&rsquo;d probably want to use the Vault integration to pull the values for these variables.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>env <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  RABBITMQ_ERLANG_COOKIE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rabbitmq&#34;</span>
</span></span><span style="display:flex;"><span>  CONSUL_HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>attr.unique.network.ip-address<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The <code>resources</code> section lets us constraints on things like CPU, Memory, IOPs, and Network.  In our case, we are only specifying a set of ports to expose on the network, and that we want them to be bound to specific ports on the host:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>resources <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  network <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    port <span style="color:#e6db74">&#34;amqp&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">5672</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    port <span style="color:#e6db74">&#34;ui&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">15672</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    port <span style="color:#e6db74">&#34;epmd&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">4369</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    port <span style="color:#e6db74">&#34;clustering&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">25672</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>We could select different ports to bind the container ports to, or leave out the <code>static</code> pair entirely to have Nomad map the ports to random unused ports on the host.</p>
<p>Finally, the <code>service</code> block integrates with service discovery (so, Consul), and allows us to register ports and health checks for our service.  In the case of our RabbitMQ cluster, we already have service discovery integration via the RabbitMQ Consul plugin, so this registration is only used for the <code>check</code> feature, which is what will also be used by the <code>migrate</code> block to see if a task is healthy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>service <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  check <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    name     <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;alive&#34;</span>
</span></span><span style="display:flex;"><span>    type     <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tcp&#34;</span>
</span></span><span style="display:flex;"><span>    port     <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ui&#34;</span>
</span></span><span style="display:flex;"><span>    interval <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;10s&#34;</span>
</span></span><span style="display:flex;"><span>    timeout  <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;2s&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The check is using the <code>ui</code> port defined earlier to check if the UI is alive.  We could also change the health check to use the <code>amqp</code> port instead, as that might be a better indication that the actual service can do useful things.  We can define multiple checks, and are not limited to TCP; <code>grpc</code>, <code>http</code>, and <code>script</code> are also supported.</p>
<p>The entire job definition is below, and is <a href="https://github.com/Pondidum/Nomad-RabbitMQ-Demo/blob/master/rabbit/rabbit.nomad">also available in the repository</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>job <span style="color:#e6db74">&#34;rabbit&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  datacenters <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;dc1&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;service&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  group <span style="color:#e6db74">&#34;cluster&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    update <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      max_parallel <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    migrate <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      max_parallel <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      health_check <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;checks&#34;</span>
</span></span><span style="display:flex;"><span>      min_healthy_time <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;5s&#34;</span>
</span></span><span style="display:flex;"><span>      healthy_deadline <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;30s&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    task <span style="color:#e6db74">&#34;rabbit&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      driver <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;docker&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      config <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        image <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pondidum/rabbitmq:consul&#34;</span>
</span></span><span style="display:flex;"><span>        hostname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>attr.unique.hostname<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        port_map <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          amqp <span style="color:#f92672">=</span> <span style="color:#ae81ff">5672</span>
</span></span><span style="display:flex;"><span>          ui <span style="color:#f92672">=</span> <span style="color:#ae81ff">15672</span>
</span></span><span style="display:flex;"><span>          epmd <span style="color:#f92672">=</span> <span style="color:#ae81ff">4369</span>
</span></span><span style="display:flex;"><span>          clustering <span style="color:#f92672">=</span> <span style="color:#ae81ff">25672</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      env <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        RABBITMQ_ERLANG_COOKIE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;generate_a_guid_-_or_something_for_this&#34;</span>
</span></span><span style="display:flex;"><span>        RABBITMQ_DEFAULT_USER <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;test&#34;</span>
</span></span><span style="display:flex;"><span>        RABBITMQ_DEFAULT_PASS <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;test&#34;</span>
</span></span><span style="display:flex;"><span>        CONSUL_HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>attr.unique.network.ip-address<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      resources <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        network <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          port <span style="color:#e6db74">&#34;amqp&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">5672</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>          port <span style="color:#e6db74">&#34;ui&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">15672</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>          port <span style="color:#e6db74">&#34;epmd&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">4369</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>          port <span style="color:#e6db74">&#34;clustering&#34;</span> <span style="color:#f92672">{</span> static <span style="color:#f92672">=</span> <span style="color:#ae81ff">25672</span> <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      service <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rabbitmq&#34;</span>
</span></span><span style="display:flex;"><span>        port <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ui&#34;</span>
</span></span><span style="display:flex;"><span>        check <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          name     <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;alive&#34;</span>
</span></span><span style="display:flex;"><span>          type     <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tcp&#34;</span>
</span></span><span style="display:flex;"><span>          interval <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;10s&#34;</span>
</span></span><span style="display:flex;"><span>          timeout  <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;2s&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="running-the-job">Running The Job</h2>
<p>First, make sure your console can talk to Nomad, which we can do by using the <code>server_ip</code> file again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export NOMAD_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://</span><span style="color:#66d9ef">$(</span>cat server_ip<span style="color:#66d9ef">)</span><span style="color:#e6db74">:4646&#34;</span>
</span></span></code></pre></div><p>Now it should be possible to run the job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nomad job run rabbit/rabbit.nomad
</span></span></code></pre></div><p>After a few moments, we can visit any of the Nomad hosts, and log in to the RabbitMQ UI (<code>http://SOME_SERVER_IP:15672</code>) and you should be greeted with a running cluster with three nodes:</p>
<p><img loading="lazy" src="rabbitmq-cluster.png" alt="rabbitmq cluster dashboard"  />
</p>
<h2 id="homework">Homework</h2>
<ul>
<li>Kill a container on one of the nodes and see what happens (<code>vagrant ssh n2</code> then <code>docker stop &lt;SOME_CONTAINER_ID&gt;</code>)</li>
<li>Create an Application which you deploy to Nomad which uses service discovery to talk to RabbitMQ</li>
<li>Create some more Nomad clients, and try making a bigger RabbitMQ cluster</li>
</ul>
<p>If you have any questions, feel free to comment below or <a href="https://twitter.com/pondidum">send me a tweet</a>.</p>
]]></content:encoded></item><item><title>Testing Immutable Infrastructure</title><link>https://andydote.co.uk/2019/01/01/immutable-infra/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/01/01/immutable-infra/</guid><description>In my previous post, I glossed over one of the most important and useful parts of Immutable Infrastructure: Testability. There are many kinds of tests we can write for our infrastructure, but they should all be focused on the machine/service and maybe it&amp;rsquo;s nearest dependencies, not the entire system.
While this post focuses on testing a full machine (both locally in a VM, and remotely as an Amazon EC2 instance), it is also possible to do most of the same kind of tests against a Docker container.</description><content:encoded><![CDATA[<p>In my <a href="/2018/12/22/serilog-elk-jaeger/">previous post</a>, I glossed over one of the most important and useful parts of Immutable Infrastructure: Testability.  There are many kinds of tests we can write for our infrastructure, but they should all be focused on the machine/service and <em>maybe</em> it&rsquo;s nearest dependencies, <a href="https://medium.com/@copyconstruct/testing-microservices-the-sane-way-9bb31d158c16">not the entire system</a>.</p>
<p>While this post focuses on testing a full machine (both locally in a VM, and remotely as an Amazon EC2 instance), it is also possible to do most of the same kind of tests against a Docker container.  In fact, one of the tools used in this post supports building Docker containers as an output in parallel to the AMIs, so this can also assist in providing a migration path to/from Docker.</p>
<p>As an example, I will show how I built and tested a LogStash machine, including how to verify that the script to create the production machine is valid, that the machine itself has been provisioned correctly, and that the services inside work as expected.</p>
<p>I have <a href="https://github.com/Pondidum/immutable-infra-testing-demo">published all the source code</a> to GitHub.  The examples in this post are all taken from the repository but might have a few bits removed just for readability.  Check the full source out if you are interested!</p>
<h2 id="repository-structure-and-tools">Repository Structure and Tools</h2>
<p>When it comes to building anything that you will have lots of, consistency is key to making it manageable.  To that end, I have a small selection of tools that I use, and a repository structure I try and stick to.  They are the following:</p>
<p><strong><a href="https://www.vagrantup.com/">Vagrant</a></strong> - This is a tool for building and managing virtual machines.  It can be backed by many different <a href="https://www.vagrantup.com/docs/providers/">providers</a> such as Docker, HyperV and VirtualBox.  We&rsquo;ll use this to build a local Linux machine to develop and test LogStash in.  I use the HyperV provisioner, as that is what Docker For Windows also uses, and HyperV disables other virtualisation tools.</p>
<p><strong><a href="https://packer.io/">Packer</a></strong> - This tool provides a way to build machine images.  Where Vagrant builds running machines, Packer builds the base images for you to boot, and can build multiple different ones (in parallel) from one configuration.  We&rsquo;ll use this to create our AMIs (Amazon Machine Images.)</p>
<p><strong><a href="http://jestjs.io/">Jest</a></strong> - This is a testing framework written in (and for) NodeJS applications.  Whatever testing tool works best for your environment is what you should be using, but I use Jest as it introduces minimal dependencies, is cross-platform, and has some useful libraries for doing things like diffing json.</p>
<p>The repository structure is pretty simple:</p>
<ul>
<li>scripts/</li>
<li>src/</li>
<li>test/</li>
<li>build.sh</li>
<li>logstash.json</li>
<li>package.json</li>
<li>vagrantfile</li>
</ul>
<p>The <code>src</code> directory is where our application code will live.  If the application is compiled, the output goes to the <code>build</code> directory (which is not tracked in source-control.)  The <code>test</code> directory will contain all of our tests, and the <code>scripts</code> directory will contain everything needed for provisioning our machines.</p>
<p>We&rsquo;ll describe what the use of each of these files is as we go through the next section.</p>
<h2 id="local-development">Local Development</h2>
<p>To create our virtual machine locally, we will use <a href="https://www.vagrantup.com">Vagrant</a>.  To tell Vagrant how to build our machine, we need to create a <code>vagrantfile</code> in our repository, which will contain the machine details and provisioning steps.</p>
<p>The machine itself has a name, CPU count, and memory specified.  There is also a setting for Hyper-V which allows us to use a differencing disk, which reduces the startup time for the VM, and how much disk space it uses on the host machine.</p>
<p>For provisioning, we specify to run the relevant two files from the <code>scripts</code> directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">Vagrant</span><span style="color:#f92672">.</span>configure(<span style="color:#e6db74">&#34;2&#34;</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>config<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>box <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bento/ubuntu-16.04&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provider <span style="color:#e6db74">&#34;hyperv&#34;</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>hv<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        hv<span style="color:#f92672">.</span>vmname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;LogStash&#34;</span>
</span></span><span style="display:flex;"><span>        hv<span style="color:#f92672">.</span>cpus <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        hv<span style="color:#f92672">.</span>memory <span style="color:#f92672">=</span> <span style="color:#ae81ff">2048</span>
</span></span><span style="display:flex;"><span>        hv<span style="color:#f92672">.</span>linked_clone <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provision <span style="color:#e6db74">&#34;shell&#34;</span>, <span style="color:#e6db74">path</span>: <span style="color:#e6db74">&#34;./scripts/provision.sh&#34;</span>
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provision <span style="color:#e6db74">&#34;shell&#34;</span>, <span style="color:#e6db74">path</span>: <span style="color:#e6db74">&#34;./scripts/vagrant.sh&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p>To keep things as similar as possible between our development machine and our output AMI, I keep as much of the setup script in one file: <code>scripts/provision.sh</code>.  In the case of our LogStash setup, this means installing Java, LogStash, some LogStash plugins, and enabling the service on reboots:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># add elastic&#39;s package repository</span>
</span></span><span style="display:flex;"><span>wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;deb https://artifacts.elastic.co/packages/6.x/apt stable main&#34;</span> | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># install openjdk and set environment variable</span>
</span></span><span style="display:flex;"><span>sudo apt-get install openjdk-8-jre -y
</span></span><span style="display:flex;"><span>JAVA<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>readlink -f <span style="color:#66d9ef">$(</span>which java<span style="color:#66d9ef">)</span> | sed <span style="color:#e6db74">&#34;s:bin/java::&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;JAVA_HOME=</span>$JAVA<span style="color:#e6db74">&#34;</span> | sudo tee --append /etc/environment
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install logstash and plugins</span>
</span></span><span style="display:flex;"><span>sudo apt-get install logstash -y
</span></span><span style="display:flex;"><span>/usr/share/logstash/bin/logstash-plugin install logstash-filter-uuid
</span></span><span style="display:flex;"><span>/usr/share/logstash/bin/logstash-plugin install logstash-filter-prune
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo systemctl enable logstash.service
</span></span></code></pre></div><p>Vagrant will automatically mount it&rsquo;s working directory into the VM under the path <code>/vagrant</code>.  This means we can add a second provisioning script (<code>scripts/vagrant.sh</code>) to link the <code>/vagrant/src</code> directory to the LogStash configuration directory (<code>/etc/logstash/conf.d</code>), meaning we can edit the files on the host machine, and then restart LogStash to pick up the changes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>sudo rm -rf /etc/logstash/conf.d
</span></span><span style="display:flex;"><span>sudo ln -s /vagrant/src /etc/logstash/conf.d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo systemctl start logstash.service
</span></span></code></pre></div><p>Now that we have a <code>vagrantfile</code>, we can start the virtual machine with a single command.  Note, Hyper-V requires administrator privileges, so you need to run this command in an admin terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant up
</span></span></code></pre></div><p>After a while, your new LogStash machine will be up and running.  If you want to log into the machine and check files an processes etc., you can run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant ssh
</span></span></code></pre></div><p>An argument can also be provided to the <code>ssh</code> command to be executed inside the VM, which is how I usually trigger LogStash restarts (as it doesn&rsquo;t seem to detect when I save the config files in the <code>src</code> directory):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant ssh -c <span style="color:#e6db74">&#39;sudo systemctl restart logstash&#39;</span>
</span></span></code></pre></div><h2 id="deployment">Deployment</h2>
<p>To create the deployable machine image, I use Packer.  The process is very similar to how Vagrant is used: select a base AMI, create a new EC2 machine, provision it, and save the result as a new AMI.</p>
<p>Packer is configured with a single json file, in this case, named <code>logstash.json</code>.  The file is split into four parts: <code>variables</code>, <code>builders</code>, <code>provisioners</code>, and <code>outputs</code>.  I won&rsquo;t include the <code>outputs</code> section as it&rsquo;s not needed when building AMIs.</p>
<h3 id="variables">Variables</h3>
<p>The <code>variables</code> property is for all configuration that you can pass to Packer.  Their values can come from Environment Variables, CLI parameters, Consul, Vault, <a href="https://www.packer.io/docs/templates/user-variables.html">and others</a>.  In the LogStash example, there are three variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;variables&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;aws_access_key&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;aws_secret_key&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;ami_users&#34;</span>: <span style="color:#e6db74">&#34;{{env `AMI_ACCOUNTS`}}&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>aws_access_key</code> and <code>aws_secret_key</code> are known names - unless we specify some value, they will automatically be read from your AWS config (in <code>~/.aws/</code>), or if running on EC2, from the EC2 machine profile.</p>
<p>The <code>ami_users</code> is a custom variable which will read the <code>AMI_ACCOUNTS</code> environment variable by default.  This particular one is used so that I can grant access to the resulting AMI to multiple AWS accounts, which is useful if you&rsquo;re running in an Organisation with multiple Accounts.  For example, if the AMI is built in a <code>common</code> account, and will be deployed into <code>dev</code>, <code>qa</code> and <code>prod</code> accounts, then you would populate the <code>AMI_ACCOUNTS</code> as a CSV of account IDs.</p>
<h3 id="builders">Builders</h3>
<p>Packer can build <a href="https://www.packer.io/docs/builders/index.html">many different kinds</a> of machine image, but for this, we only need one: <code>amazon-ebs</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;builders&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;amazon-ebs&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;access_key&#34;</span>: <span style="color:#e6db74">&#34;{{user `aws_access_key`}}&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;secret_key&#34;</span>: <span style="color:#e6db74">&#34;{{user `aws_secret_key`}}&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;region&#34;</span>: <span style="color:#e6db74">&#34;eu-west-1&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;instance_type&#34;</span>: <span style="color:#e6db74">&#34;t2.micro&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;source_ami_filter&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;filters&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;virtualization-type&#34;</span>: <span style="color:#e6db74">&#34;hvm&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;ubuntu/images/*ubuntu-xenial-16.04-amd64-server-*&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;root-device-type&#34;</span>: <span style="color:#e6db74">&#34;ebs&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;owners&#34;</span>: [<span style="color:#e6db74">&#34;099720109477&#34;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;most_recent&#34;</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;ssh_username&#34;</span>: <span style="color:#e6db74">&#34;ubuntu&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;ami_name&#34;</span>: <span style="color:#e6db74">&#34;logstash {{timestamp}}&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;ami_users&#34;</span>: <span style="color:#e6db74">&#34;{{user `ami_users`}}&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The two most interesting properties of this are <code>source_ami_filter</code> and <code>ami_users</code>.  The <code>source_ami_filter</code> works in a very similar manner to the AWS CLI&rsquo;s <code>describe-images</code> <code>--filters</code> parameter, albeit in a more readable format.  In this case, I am specifying that I want an <code>ubuntu-xenial</code> base, and I want it to be an official Canonical image, so specify their Account ID as the <code>owner</code>.  I also specify the <code>most_recent</code> property, as this filter will return all versions of this AMI which Canonical publish.</p>
<p>The <code>ami_users</code> is what lets me grant access to the AMI from other accounts (rather than just making it public).  The property&rsquo;s value should be an array, but Packer is smart enough to expand the CSV in the user variable into an array for us.</p>
<h3 id="provisioners">Provisioners</h3>
<p>The <code>provisioners</code> array items are executed in the order they are specified.  To set up the machine, I use the <code>shell</code> provisioner to create a temporary directory, then the <code>file</code> provisioner to upload the files in the <code>src</code> directory to that temporary directory.  Finally a second <code>shell</code> provisioner uploads and runs the <code>scripts/provision.sh</code> and <code>scripts/aws.sh</code> files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;provisioners&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;shell&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;inline&#34;</span>: <span style="color:#e6db74">&#34;mkdir -p /tmp/src&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;file&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;source&#34;</span>: <span style="color:#e6db74">&#34;./src/&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;destination&#34;</span>: <span style="color:#e6db74">&#34;/tmp/src&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;shell&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;scripts&#34;</span>: [<span style="color:#e6db74">&#34;./scripts/provision.sh&#34;</span>, <span style="color:#e6db74">&#34;./scripts/aws.sh&#34;</span>]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>aws.sh</code> file is very small and does roughly the same thing as the <code>vagrant.sh</code> script, but rather than symlinking the <code>/vagrant</code> directory, it moves the uploaded <code>src</code> directory into the right location for LogStash:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>sudo rm /etc/logstash/conf.d/*
</span></span><span style="display:flex;"><span>sudo cp -r /tmp/src/* /etc/logstash/conf.d
</span></span></code></pre></div><p>Note that this doesn&rsquo;t start the LogStash service - this gets done by the UserData when we launch a new instance, as often we need to pass in additional configuration parameters, and don&rsquo;t want the service running until that has been done.</p>
<h3 id="running">Running</h3>
<p>To create the AMI, we need to invoke packer.  If I am running packer on a remote machine via SSH, I run it inside <code>tmux</code>, so that disconnects don&rsquo;t fail the process:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>packer build -var <span style="color:#e6db74">&#34;ami_users=111,222,333&#34;</span> logstash.json
</span></span></code></pre></div><p>After a while, Packer will finish, leaving you with an output which will include the new AMI ID:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">==</span>&gt; Builds finished. The artifacts of successful builds are:
</span></span><span style="display:flex;"><span>--&gt; amazon-ebs: AMIs were created:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>eu-west-1: ami-123123123
</span></span></code></pre></div><p>We&rsquo;ll get back to this output later when we create a build script that will also run our tests.  Before we get to that, however, let&rsquo;s look at how we can write tests which target both the local Vagrant machine and the AMI too.</p>
<h2 id="testing">Testing</h2>
<p>To test the machines, I am using <a href="https://jestjs.io">Jest</a>.  There isn&rsquo;t anything particularly interesting going on in the <code>package.json</code>, other than a few babel packages being installed so that I can use ES6 syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;scripts&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;watch&#34;</span>: <span style="color:#e6db74">&#34;jest --watch&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;test&#34;</span>: <span style="color:#e6db74">&#34;jest &#34;</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;devDependencies&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;babel-core&#34;</span>: <span style="color:#e6db74">&#34;^6.26.3&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;babel-jest&#34;</span>: <span style="color:#e6db74">&#34;^23.6.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;babel-preset-env&#34;</span>: <span style="color:#e6db74">&#34;^1.7.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;jest&#34;</span>: <span style="color:#e6db74">&#34;^23.6.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;regenerator-runtime&#34;</span>: <span style="color:#e6db74">&#34;^0.13.1&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="packer-configuration-testing">Packer Configuration Testing</h3>
<p>There are a number of tests we can do to make sure our Packer configuration is valid before running it.  This includes things like checking the base AMI is from a whitelisted source (such as our accounts, Amazon and Canonical).  The test has to handle the possibility of multiple builders, and that some builders might not have a <code>source_ami_filter</code>.  It also handles if no owner has been specified at all, which we also consider a &ldquo;bad thing&rdquo;:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ourAccounts</span> <span style="color:#f92672">=</span> [ <span style="color:#e6db74">&#34;111111&#34;</span>, <span style="color:#e6db74">&#34;222222&#34;</span>, <span style="color:#e6db74">&#34;333333&#34;</span>, <span style="color:#e6db74">&#34;444444&#34;</span> ];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">otherOwners</span> <span style="color:#f92672">=</span> [ <span style="color:#e6db74">&#34;amazon&#34;</span>, <span style="color:#e6db74">&#34;099720109477&#34;</span> <span style="color:#75715e">/*canonical*/</span> ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;ami builder&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should be based on a whitelisted owner&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">allOwners</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ourAccounts</span>.<span style="color:#a6e22e">concat</span>(<span style="color:#a6e22e">otherOwners</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">invalidOwners</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">owners</span> =&gt; <span style="color:#a6e22e">owners</span>.<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">owner</span> =&gt; <span style="color:#f92672">!</span><span style="color:#a6e22e">allOwners</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#a6e22e">owner</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">amisWithInvalidOwners</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">packer</span>.<span style="color:#a6e22e">builders</span>
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">builder</span> =&gt; <span style="color:#a6e22e">builder</span>.<span style="color:#a6e22e">source_ami_filter</span>)
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">builder</span> =&gt; ({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">builderName</span>(<span style="color:#a6e22e">builder</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">invalidOwners</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">invalidOwners</span>(<span style="color:#a6e22e">builder</span>.<span style="color:#a6e22e">source_ami_filter</span>.<span style="color:#a6e22e">owners</span> <span style="color:#f92672">||</span> [ <span style="color:#e6db74">&#34;NO OWNER SPECIFIED&#34;</span> ])
</span></span><span style="display:flex;"><span>      }))
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">builders</span> =&gt; <span style="color:#a6e22e">builders</span>.<span style="color:#a6e22e">invalidOwners</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">amisWithInvalidOwners</span>).<span style="color:#a6e22e">toEqual</span>([]);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>I also test that certain variables (<code>ami_users</code>) have been defined, and have been used in the right place:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;variables&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should have a variable for who can use the ami&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">packer</span>.<span style="color:#a6e22e">variables</span>).<span style="color:#a6e22e">toHaveProperty</span>(<span style="color:#e6db74">&#34;ami_users&#34;</span>);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should read ami_users from AMI_ACCOUNTS&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">packer</span>.<span style="color:#a6e22e">variables</span>.<span style="color:#a6e22e">ami_users</span>).<span style="color:#a6e22e">toMatch</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">/{{\s*env\s*`AMI_ACCOUNTS`\s*}}/</span>
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;ami builder&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should set the ami_user&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">invalidUsers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">packer</span>.<span style="color:#a6e22e">builders</span>
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">builder</span> =&gt; ({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">builderName</span>(<span style="color:#a6e22e">builder</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">users</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">builder</span>.<span style="color:#a6e22e">ami_users</span> <span style="color:#f92672">||</span> <span style="color:#e6db74">&#34;NO USERS SPECIFIED&#34;</span>
</span></span><span style="display:flex;"><span>      }))
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">ami</span> =&gt; <span style="color:#f92672">!</span><span style="color:#a6e22e">ami</span>.<span style="color:#a6e22e">users</span>.<span style="color:#a6e22e">match</span>(<span style="color:#e6db74">/{{\s*user\s*`ami_users`\s*}}/</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">invalidUsers</span>).<span style="color:#a6e22e">toEqual</span>([]);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>Other tests you might want to add are that the base AMI is under a certain age, or that your AMI has certain tags included, or that it is named in a specific manner.</p>
<h3 id="machine-testing">Machine Testing</h3>
<p>Machine testing is for checking that our provisioning worked successfully.  This is very useful, as subtle bugs can creep in when you don&rsquo;t verify what happens.</p>
<p>For example, a machine I built copied configuration directory to a target location but was missing the <code>-r</code> flag, so when I later added a subdirectory, the machine failed as the referenced files didn&rsquo;t exist.</p>
<p>So that the tests work with both the Vagrant and Packer built versions, we take in their address and key paths from the environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">spawnSync</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;child_process&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">createConnection</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;net&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// figure out where to look these up
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">host</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">LOGSTASH_ADDRESS</span>; <span style="color:#75715e">// e.g. &#34;172.27.48.28&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">keyPath</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">LOGSTASH_KEYPATH</span>; <span style="color:#75715e">// &#34;.vagrant/machines/default/hyperv/private_key&#34;;
</span></span></span></code></pre></div><p>We also define two helper methods: one to check if a TCP port is open, and one which uses SSH to execute a command and read the response in the machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">execute</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">command</span> =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">args</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">`vagrant@</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">host</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>, <span style="color:#e6db74">`-i`</span>, <span style="color:#a6e22e">keyPath</span>, <span style="color:#a6e22e">command</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ssh</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">spawnSync</span>(<span style="color:#e6db74">&#34;ssh&#34;</span>, <span style="color:#a6e22e">args</span>, { <span style="color:#a6e22e">encoding</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;utf8&#34;</span> });
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">lines</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ssh</span>.<span style="color:#a6e22e">stdout</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#34;\n&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">lines</span>[<span style="color:#a6e22e">lines</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;&#34;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">lines</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">lines</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">lines</span>;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">testPort</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">port</span> =&gt; <span style="color:#66d9ef">new</span> Promise((<span style="color:#a6e22e">resolve</span>, <span style="color:#a6e22e">reject</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">client</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">createConnection</span>({ <span style="color:#a6e22e">host</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">host</span>, <span style="color:#a6e22e">port</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">port</span> });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span> =&gt; <span style="color:#a6e22e">reject</span>(<span style="color:#a6e22e">err</span>));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;connect&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">end</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">resolve</span>();
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>We can then add some tests which check the files were written to the right place, that port <code>5044</code> is open, and port <code>9600</code> is closed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;the machine&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should have the correct configuration&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">files</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">execute</span>(<span style="color:#e6db74">&#34;find /etc/logstash/conf.d/* -type f&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">files</span>).<span style="color:#a6e22e">toEqual</span>([
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;/etc/logstash/conf.d/beats.conf&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;/etc/logstash/conf.d/patterns/custom.txt&#34;</span>
</span></span><span style="display:flex;"><span>    ]);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should be listening on 5044 for beats&#34;</span>, () =&gt; <span style="color:#a6e22e">testPort</span>(<span style="color:#ae81ff">5044</span>));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should not be listening on 9600&#34;</span>, () =&gt; <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">testPort</span>(<span style="color:#ae81ff">9600</span>)).<span style="color:#a6e22e">rejects</span>.<span style="color:#a6e22e">toThrow</span>(<span style="color:#e6db74">&#34;ECONNREFUSED&#34;</span>));
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Of course, as we can execute any command inside the machine, we can check pretty much anything:</p>
<ul>
<li><code>tail</code> the LogStash log and see if it&rsquo;s got the right contents</li>
<li>check if the service is started</li>
<li>check the service is enabled on boot</li>
<li>check the environment variables been written to the right files</li>
</ul>
<h3 id="application-testing">Application Testing</h3>
<p>There are two styles of Application Testing: white-box and black-box.  White-box will be tests run on the application inside the machine, using minimal external dependencies (preferably none at all), and Black-box will be run on the application from outside the machine, either using direct dependencies, or fakes.</p>
<p>It&rsquo;s worth noting that both white-box and black-box tests are <strong>slow</strong>, mostly down to how slow LogStash is at starting up, although only giving it 1 CPU and 2Gb of RAM probably doesn&rsquo;t help.</p>
<h4 id="whitebox-testing-logstash">Whitebox Testing LogStash</h4>
<p>To white-box test LogStash, I use a technique partially based on the <a href="https://github.com/agolo/logstash-test-runner">Agolo LogStash Test Runner</a>.  The process for the tests is to run LogStash interactively (rather than as a service), send it a single event, record the output events, and compare them to an expected output.</p>
<p>The test cases are kept in separate folders, with two files.  First is the input file, imaginatively called <code>input.log</code>, which will contain one json encoded event per line.  The format needs to match what the result of FileBeat sending an event to LogStash would be.  In this case, it means a few extra fields, and a <code>message</code> property containing a string of json.  Formatted for readability, the object looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;@timestamp&#34;</span>: <span style="color:#e6db74">&#34;2018-12-27T14:08:24.753Z&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;beat&#34;</span>: { <span style="color:#f92672">&#34;hostname&#34;</span>: <span style="color:#e6db74">&#34;Spectre&#34;</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Spectre&#34;</span>, <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;5.3.0&#34;</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;fields&#34;</span>: { <span style="color:#f92672">&#34;environment&#34;</span>: <span style="color:#e6db74">&#34;local&#34;</span>, <span style="color:#f92672">&#34;log_type&#34;</span>: <span style="color:#e6db74">&#34;application&#34;</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;input_type&#34;</span>: <span style="color:#e6db74">&#34;log&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;{\&#34;Timestamp\&#34;: \&#34;2018-12-18T17:06:27.7112297+02:00\&#34;,\&#34;Level\&#34;: \&#34;Information\&#34;,\&#34;MessageTemplate\&#34;: \&#34;This is the {count} message\&#34;,\&#34;Properties\&#34;: {\&#34;count\&#34;: 4,\&#34;SourceContext\&#34;: \&#34;LogLines.GetOpenPurchasesHandler\&#34;,\&#34;ApplicationName\&#34;: \&#34;FileBeatTest\&#34;,\&#34;CorrelationId\&#34;: \&#34;8f341e8e-6b9c-4ebf-816d-d89c014bad90\&#34;,\&#34;TimedOperationElapsedInMs\&#34;: 1000}}&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;offset&#34;</span>: <span style="color:#ae81ff">318</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;source&#34;</span>: <span style="color:#e6db74">&#34;D:\\tmp\\logs\\single.log&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;applicationlog&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I also define an <code>output.log</code>, which contains the expected result(s), again one json encoded event per line.  The example pipeline in the repository will emit two events for a given input, so this file contains two lines of json (again, newlines added for readability here):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;source&#34;</span>: <span style="color:#e6db74">&#34;D:\\tmp\\logs\\single.log&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;@version&#34;</span>: <span style="color:#e6db74">&#34;1&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;fields&#34;</span>: { <span style="color:#f92672">&#34;log_type&#34;</span>: <span style="color:#e6db74">&#34;application&#34;</span>, <span style="color:#f92672">&#34;environment&#34;</span>: <span style="color:#e6db74">&#34;local&#34;</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;@timestamp&#34;</span>: <span style="color:#e6db74">&#34;2018-12-18T15:06:27.711Z&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;offset&#34;</span>: <span style="color:#ae81ff">318</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;ApplicationName&#34;</span>: <span style="color:#e6db74">&#34;FileBeatTest&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;host&#34;</span>: <span style="color:#e6db74">&#34;ubuntu-16&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;applicationlog&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;CorrelationId&#34;</span>: <span style="color:#e6db74">&#34;8f341e8e-6b9c-4ebf-816d-d89c014bad90&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;MessageTemplate&#34;</span>: <span style="color:#e6db74">&#34;This is the {count} message&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Level&#34;</span>: <span style="color:#e6db74">&#34;Information&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Context&#34;</span>: <span style="color:#e6db74">&#34;LogLines.GetOpenPurchasesHandler&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;TimeElapsed&#34;</span>: <span style="color:#ae81ff">1000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Properties&#34;</span>: { <span style="color:#f92672">&#34;count&#34;</span>: <span style="color:#ae81ff">4</span> }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;duration&#34;</span>: <span style="color:#ae81ff">1000000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;timestamp&#34;</span>: <span style="color:#ae81ff">1545145586711000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;&lt;generated&gt;&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;traceid&#34;</span>: <span style="color:#e6db74">&#34;8f341e8e6b9c4ebf816dd89c014bad90&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;LogLines.GetOpenPurchasesHandler&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;localEndpoint&#34;</span>: { <span style="color:#f92672">&#34;serviceName&#34;</span>: <span style="color:#e6db74">&#34;FileBeatTest&#34;</span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To enable sending the lines directly to LogStash (rather than needing to use FileBeat), we define an <code>input.conf</code> file, which configures LogStash to read json from stdin:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">input {
  stdin { codec =&gt; &#34;json_lines&#34; }
}
</code></pre><p>And an <code>ouput.conf</code> file which configures LogStash to write the output as json lines a known file path:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">output {
  file {
    path =&gt; &#34;/tmp/test/output.log&#34;
    codec =&gt; &#34;json_lines&#34;
  }
}
</code></pre><p>The tests need to be run inside the machine itself, so I created a script in the <code>./scripts</code> directory which will do all the work, and can be run by the <code>execute</code> method in a Jest test.  The script stops the LogStash service, copies the current configuration from the <code>./src</code> directory and the replacement <code>input.conf</code> and <code>output.conf</code> files to a temporary location, and then runs LogStash once per test case, copying the result file to the test case&rsquo;s directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>sudo systemctl stop logstash
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>temp_path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/tmp/test&#34;</span>
</span></span><span style="display:flex;"><span>test_source<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/vagrant/test/acceptance&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo rm -rf <span style="color:#e6db74">&#34;</span>$temp_path<span style="color:#e6db74">/*&#34;</span>
</span></span><span style="display:flex;"><span>sudo mkdir -p $temp_path
</span></span><span style="display:flex;"><span>sudo cp -r /vagrant/src/* $temp_path
</span></span><span style="display:flex;"><span>sudo cp $test_source/*.conf $temp_path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>find $test_source/* -type d | <span style="color:#66d9ef">while</span> read test_path; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Running </span><span style="color:#66d9ef">$(</span>basename $test_path<span style="color:#66d9ef">)</span><span style="color:#e6db74"> tests...&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sudo /usr/share/logstash/bin/logstash <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        <span style="color:#e6db74">&#34;--path.settings&#34;</span> <span style="color:#e6db74">&#34;/etc/logstash&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        <span style="color:#e6db74">&#34;--path.config&#34;</span> <span style="color:#e6db74">&#34;</span>$temp_path<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        &lt; <span style="color:#e6db74">&#34;</span>$test_path<span style="color:#e6db74">/input.log&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sudo touch <span style="color:#e6db74">&#34;</span>$temp_path<span style="color:#e6db74">/output.log&#34;</span>   <span style="color:#75715e"># create it if it doesn&#39;t exist (dropped logs etc.)</span>
</span></span><span style="display:flex;"><span>    sudo rm -f <span style="color:#e6db74">&#34;</span>$test_path<span style="color:#e6db74">/result.log&#34;</span>
</span></span><span style="display:flex;"><span>    sudo mv <span style="color:#e6db74">&#34;</span>$temp_path<span style="color:#e6db74">/output.log&#34;</span> <span style="color:#e6db74">&#34;</span>$test_path<span style="color:#e6db74">/result.log&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>basename $test_path<span style="color:#66d9ef">)</span><span style="color:#e6db74"> tests done&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo systemctl start logstash
</span></span></code></pre></div><p>To execute this, we use the <code>beforeAll</code> function to run it once - we also pass in <code>Number.MAX_SAFE_INTEGER</code> as by default <code>beforeAll</code> will time out after 5 seconds, and the <code>test.sh</code> is <strong>slow as hell</strong> (as LogStash takes ages to start up).</p>
<p>Once the <code>test.sh</code> script has finished running, we load each test&rsquo;s <code>output.log</code> and <code>result.log</code> files, parse each line as json, compare the objects, and print out the delta if the objects are not considered equal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">source</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./test/acceptance&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">isDirectory</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span> =&gt; <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">lstatSync</span>(<span style="color:#a6e22e">p</span>).<span style="color:#a6e22e">isDirectory</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">cases</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fs</span>
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">readdirSync</span>(<span style="color:#a6e22e">source</span>)
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">name</span> =&gt; <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">source</span>, <span style="color:#a6e22e">name</span>))
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">isDirectory</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;logstash&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">beforeAll</span>(
</span></span><span style="display:flex;"><span>    () =&gt; <span style="color:#a6e22e">execute</span>(<span style="color:#e6db74">&#34;/vagrant/scripts/test.sh&#34;</span>),
</span></span><span style="display:flex;"><span>    Number.<span style="color:#a6e22e">MAX_SAFE_INTEGER</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">test</span>.<span style="color:#a6e22e">each</span>(<span style="color:#a6e22e">cases</span>)(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#a6e22e">directoryPath</span> =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">expected</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">readFile</span>(<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">directoryPath</span>, <span style="color:#e6db74">&#34;output.log&#34;</span>));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">actual</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">readFile</span>(<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">directoryPath</span>, <span style="color:#e6db74">&#34;result.log&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">diffpatch</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DiffPatcher</span>({
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">propertyFilter</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">context</span>) =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">name</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;id&#34;</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">id</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;&lt;generated&gt;&#34;</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">delta</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">diffpatch</span>.<span style="color:#a6e22e">diff</span>(<span style="color:#a6e22e">expected</span>, <span style="color:#a6e22e">actual</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">formatters</span>.<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">format</span>(<span style="color:#a6e22e">delta</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">output</span>.<span style="color:#a6e22e">length</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">output</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">output</span>.<span style="color:#a6e22e">length</span>).<span style="color:#a6e22e">toBe</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><h4 id="blackbox-testing-logstash">Blackbox Testing LogStash</h4>
<p>As the machine has ports open for FileBeat and will send it&rsquo;s output to ElasticSearch, we can set up a fake HTTP server, send some log events via FileBeat to the VM and check we receive the right HTTP calls to our fake server.</p>
<p>While looking on how to do this, I came across the <a href="https://www.npmjs.com/package/lumberjack-protocol">lumberjack-protocol</a> package on NPM, but unfortunately, it only supports lumberjack v1, and FileBeat and LogStash are now using v2, so you would have to use a local copy of filebeat to do the sending.</p>
<p>Due to the complexity of implementing this, and the diminished return on investment (the other tests should be sufficient), I have skipped creating the Blackbox tests for the time being.</p>
<h2 id="ami-testing">AMI Testing</h2>
<p>The final phase!  Now that we are reasonably sure everything works locally, we need to build our AMI and test that everything works there too, as it would be a shame to update an Auto Scale Group with the new image which doesn&rsquo;t work!</p>
<p>All that needs to happen to run the tests against an EC2 instance is to set the three environment variables we used with Vagrant, to values for communicating with the EC2 instance. To do this, we&rsquo;ll need the EC2 IP Address, the username for SSH, and the private key for SSH authentication.</p>
<p>The first thing our build script needs to do is create the AMI.  This is done in the same way as <a href="#running">mentioned earlier</a>, but with the slight difference of also piping the output to <code>tee</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>packer_log<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>packer build logstash.json | tee /dev/tty<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>ami_id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#34;</span>$packer_log<span style="color:#e6db74">&#34;</span> | tail -n <span style="color:#ae81ff">1</span> | sed <span style="color:#e6db74">&#39;s/.*\(ami.*\)/\1/&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>By using <code>tee</code>, we can pipe the build log from Packer to both the real terminal (<code>/dev/tty</code>), and to a variable called <code>packer_log</code>.  The script then takes the last line and uses some regex to grab the AMI ID.</p>
<p>Next up, the script uses the AWS CLI to launch an EC2 instance based on the AMI, and store it&rsquo;s IP Address and Instance ID:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>json<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws ec2 run-instances <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --image-id <span style="color:#e6db74">&#34;</span>$ami_id<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --instance-type t2.small <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --key-name <span style="color:#e6db74">&#34;</span>$keypair_name<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region eu-west-1 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --subnet-id <span style="color:#e6db74">&#34;</span>$subnet_id<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --security-group-ids <span style="color:#e6db74">&#34;</span>$security_group_id<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --tag-specifications <span style="color:#e6db74">&#39;ResourceType=instance,Tags=[{Key=Name,Value=logstash-verification}]&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --user-data <span style="color:#e6db74">&#34;</span>$userdata<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>instance_id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#34;</span>$json<span style="color:#e6db74">&#34;</span> | jq -r .Instances<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>.InstanceId<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>private_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#34;</span>$json<span style="color:#e6db74">&#34;</span> | jq -r .Instances<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>.PrivateIpAddress<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>The IP Address is then used to set up the environment variables which the node test scripts use to locate the machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>LOGSTASH_ADDRESS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$private_ip<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>LOGSTASH_SSH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ubuntu&#34;</span>
</span></span><span style="display:flex;"><span>LOGSTASH_KEYPATH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;~/.ssh/id_rsa&#34;</span> build ou
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>npm run test
</span></span></code></pre></div><p>Finally, the script uses the Instance ID to terminate the instance:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws ec2 terminate-instances <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --instance-ids <span style="color:#e6db74">&#34;</span>$instance_id<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><h2 id="wrapping-up">Wrapping Up</h2>
<p>Hopefully, this (rather long) post is a useful introduction (!) to how I tackle testing Immutable Infrastructure.  All of these techniques for testing the machine and application can be used for testing things like Docker containers too (and handily, Packer can be used to create Docker containers also).</p>
<p>As mentioned earlier <a href="https://github.com/Pondidum/immutable-infra-testing-demo">The Repository is available here</a>.</p>
]]></content:encoded></item><item><title>Code-free tracing with LogStash and Jaeger</title><link>https://andydote.co.uk/2018/12/22/serilog-elk-jaeger/</link><pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/12/22/serilog-elk-jaeger/</guid><description>I wanted to show request charts (similar to the network tab in firefox) for requests across our microservices but wanted to do so in the least invasive way possible.
We already use LogStash to collect logs from multiple hosts (via FileBeat) and forward them on to ElasticSearch, so perhaps I can do something to also output from LogStash to a tracing service.
There are a number of tracing services available (AppDash, Jaeger, Zipkin), but unfortunately LogStash doesn&amp;rsquo;t have plugins for any of them or for OpenTracing.</description><content:encoded><![CDATA[<p>I wanted to show request charts (similar to the network tab in firefox) for requests across our microservices but wanted to do so in the least invasive way possible.</p>
<p><img loading="lazy" src="firefox-network-timeline.png" alt="Firefox network timeline"  />
</p>
<p>We already use <a href="https://www.elastic.co/products/logstash">LogStash</a> to collect logs from multiple hosts (via <a href="https://www.elastic.co/products/beats/filebeat">FileBeat</a>) and forward them on to <a href="https://www.elastic.co/products/elasticsearch">ElasticSearch</a>, so perhaps I can do something to also output from LogStash to a tracing service.</p>
<p><img loading="lazy" src="logstash-jaeger.png" alt="app to filebeat to logstash to elasticsearch and opentracing"  />
</p>
<p>There are a number of tracing services available (<a href="https://github.com/sourcegraph/appdash">AppDash</a>, <a href="https://www.jaegertracing.io/">Jaeger</a>, <a href="https://zipkin.io/">Zipkin</a>), but unfortunately LogStash doesn&rsquo;t have plugins for any of them or for <a href="https://opentracing.io/">OpenTracing</a>.  I picked Jaeger, as it seemed to be the easiest to get up and running, and also had a &ldquo;Zipkin compatible&rdquo; API too if you didn&rsquo;t want to use the Jaeger one.</p>
<p>Setting up and running Jaeger in a production environment is way out of scope for this post, but for testing, I am just using the all-in-one Docker container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -d --nameron jaeger <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -e COLLECTOR_ZIPKIN_HTTP_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9411</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 5775:5775/udp <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 6831:6831/udp <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 6832:6832/udp <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 5778:5778 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 16686:16686 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 14268:14268 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 9411:9411 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  jaegertracing/all-in-one
</span></span></code></pre></div><p>The tracing APIs work in roughly the same way:  all traces have the same <code>traceid</code>, and are sub-divided into spans.  Spans have a unique id and can have a parent (span) id set.  The trouble with sending data from LogStash is that I don&rsquo;t have any parent IDs available. Well, at least without going and adding it to all our applications, and I&rsquo;m not sure how I would want to propagate it correctly either.</p>
<p>So the first question is: can I push multiple spans without any parent IDs, and have it plot them as I would expect.</p>
<h2 id="is-spanparentid-required">Is span.parentid required?</h2>
<p>As the HTTP API documentation seems to be non-existent (other than &ldquo;there is one!&rdquo;), and most of the other docs mention the Thrift API, I decided to use that to test the theory.  The <a href="https://github.com/jaegertracing/jaeger-client-csharp">Jaeger C# client</a> library has a nice API to use, but I wanted to manually specify things (e.g. <code>traceid</code>, <code>spanid</code>, etc.) and the API has no way to do that, as pretty much everything is marked as <code>internal</code>.</p>
<p>Instead, I cloned the client repository, and added a test (which had access to all the internals I wanted):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Scratch</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> HttpSender _sender;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Tracer _tracer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> TraceId _id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Scratch(ITestOutputHelper output)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        _sender = <span style="color:#66d9ef">new</span> HttpSender(<span style="color:#e6db74">&#34;http://localhost:14268/api/traces&#34;</span>);
</span></span><span style="display:flex;"><span>        _tracer = <span style="color:#66d9ef">new</span> Tracer.Builder(<span style="color:#e6db74">&#34;FirstService&#34;</span>).Build();
</span></span><span style="display:flex;"><span>        _id = TraceId.NewUniqueId(<span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        output.WriteLine(_id.ToString());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [Fact]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task Send()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> start = DateTime.UtcNow;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start, start.AddSeconds(<span style="color:#ae81ff">5</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start, start.AddSeconds(<span style="color:#ae81ff">3</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start.AddSeconds(<span style="color:#ae81ff">5</span>), start.AddSeconds(<span style="color:#ae81ff">10</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start.AddSeconds(<span style="color:#ae81ff">10</span>), start.AddSeconds(<span style="color:#ae81ff">20</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start, start.AddSeconds(<span style="color:#ae81ff">20</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> _sender.FlushAsync(CancellationToken.None);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">async</span> Task Create(DateTime start, DateTimeOffset finish)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> context = <span style="color:#66d9ef">new</span> SpanContext(_id, SpanId.NewUniqueId(), <span style="color:#66d9ef">new</span> SpanId(<span style="color:#ae81ff">0</span>), SpanContextFlags.None);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> span = <span style="color:#66d9ef">new</span> Span(_tracer, <span style="color:#e6db74">&#34;test&#34;</span>, context, start, <span style="color:#66d9ef">new</span> Dictionary&lt;<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">object</span>&gt;(), <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>        span.Finish(finish);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> _sender.AppendAsync(span, CancellationToken.None);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The graph rendered how I hoped, proving that I don&rsquo;t need to set the span&rsquo;s <code>parentid</code> for everything with the same <code>traceid</code> to work correctly!</p>
<h2 id="how-to-generate-a-consistent-traceid">How to generate a consistent TraceID?</h2>
<p>All our services pass along or generate a <code>correlationID</code> for each request, so my idea here was to do some conversion to put it in the <code>traceid</code>, which is an <code>int64</code>.  Our <code>correlationID</code>s are guids, which internally is an <code>int128</code>, so I figured I would take the least significant 8 bytes and use that.  This can be done in C# like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> correlationID = Guid.NewGuid();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> traceID = <span style="color:#66d9ef">new</span> TraceId(BitConverter.ToInt64(correlationID.ToByteArray(), <span style="color:#ae81ff">8</span>));
</span></span></code></pre></div><p>I noticed, however, that the <code>TraceID</code> structure in the Jaeger client can take two values: <code>int64 low</code> and <code>int64 high</code>, so I can use the entire <code>correlationid</code>.</p>
<h2 id="how-to-ship-from-logstash">How to ship from LogStash?</h2>
<p>After reading through the LogStash <a href="https://www.elastic.co/guide/en/logstash/current/output-plugins.html">Output Plugins docs</a> it looked like there were three possible ways to ship the events to Jaeger: writing a command line app; invoked through either <code>exec</code> or <code>pipe</code>, writing a LogStash plugin, or doing something with the <code>http</code> output.</p>
<h3 id="cli-adaptor">CLI adaptor</h3>
<p>The idea of this method would be to write a CLI app which takes an event from LogStash and then sends it to Jaeger using the Thrift API.  The app itself could be invoked using the <code>exec</code> or <code>pipe</code> outputs.  I didn&rsquo;t want to use this method for a few reasons:</p>
<p><strong>Development:</strong> The Jaeger client has things I need hidden from the public surface, such as being able to specify the <code>traceid</code>, rather than generating a new one each time, so I would either have to reimplement the classes I need, use reflection to instantiate things, or try opening Pull Requests to expose more internals of the library.</p>
<p><strong>Maintenance:</strong> I&rsquo;d rather not have yet another thing to maintain if I can avoid it, not to mention all the additional things like repository location, build agents, etc.</p>
<p><strong>Deployment:</strong> Our LogStash box is a plain Ubuntu box with nothing other than Java and LogStash installed on it.  As I would probably end up using C# to write the app, I&rsquo;d need to add even more dependencies.</p>
<p><strong>Throughput:</strong> Jaeger (and the others) support sending traces in batches for better efficiency.  Writing an app which supported that would involve writing the batching and caching, and the likelihood is I would mess it up, and increase the chances of lost messages.</p>
<h3 id="logstash-plugin">LogStash plugin</h3>
<p>Basically has the same problems as above, with the addition of me needing to learn enough about Java to build something reliable, and as this is a test and no one else in my team really knows Java either, so I ruled this out.</p>
<h3 id="http">Http?</h3>
<p>The Jaeger collector process can also expose a Zipkin compatible API, and while the documentation for that API is also terrible, I was able to find a <a href="https://github.com/openzipkin/zipkin/issues/1499">Pull Request on Github</a> with some structure defined.  I figured I could do most of this directly with LogStash&rsquo;s configuration DSL, assuming I can: generate a uuid (<code>logstash-filter-uuid</code> plugin), and remove all extra stuff from the post body (<code>logstash-filter-prune</code>).</p>
<h2 id="building-the-logstash-message">Building the LogStash message</h2>
<p>The first step of my configuration is based on what we need to do to <a href="https://github.com/serilog/serilog">Serilog</a> messages to make them a bit nicer in Kibana:</p>
<h3 id="pre-processing">Pre-processing</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>json {
</span></span><span style="display:flex;"><span>    source <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;message&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>date {
</span></span><span style="display:flex;"><span>    match <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;Timestamp&#34;</span>, <span style="color:#e6db74">&#34;ISO8601&#34;</span>, <span style="color:#e6db74">&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSSSSSZZ&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    target <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;@timestamp&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    rename <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;[Properties][ApplicationName]&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;ApplicationName&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;[Properties][CorrelationId]&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;CorrelationId&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;[Properties][SourceContext]&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;Context&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;[Properties][TimedOperationElapsedInMs]&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;TimeElapsed&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>json</code> block tells LogStash that everything in the <code>message</code> property is a json object, rather than a string.</p>
<p>The <code>date</code> block extracts the time the message was recorded by the application and writes it to the special <code>@timestamp</code> field.  This is a good idea as due to queuing, and processing times, the time the message was written and the time it was processed by LogStash will be different.</p>
<p>Lastly, the <code>mutate</code> block is moving a bunch of fields out of the message properties, and up to the top level of the object.  We query by things like <code>ApplicationName</code> a lot, and it&rsquo;s nice not to have to write <code>Properties.ApplicationName:blahblah</code> all the time.</p>
<h3 id="splitting">Splitting</h3>
<p>Our messages contain a lot of data which for the purposes of tracing, we just don&rsquo;t care about.  Not only is it a waste of bandwidth to send all the data to Jaeger, but also there could be clashing fields, and if we ever decide to use a hosted version of Jaeger, I don&rsquo;t want to be sending them all the data either.</p>
<p>So how do we remove everything from the message, but still keep it in the message for the other outputs?</p>
<p>LogStash has an interesting filter called <code>clone</code>.  What it does is copy the message as many times as you specify, and then runs the remaining part of the pipeline once per message, including the original message.  In code, this just looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>clone {
</span></span><span style="display:flex;"><span>    clones <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;jaeger&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If we wanted to split the message more times, we can just add more types to the <code>clones</code> array; there will be one extra message produced for each entry in the array, which will also be added to the message as the <code>type</code> property so we can filter on it later.</p>
<p>We don&rsquo;t want to send the <code>type</code> field itself to Jaeger (or ElasticSeach), so we move it from the message to the <code>@metadata</code> object, which doesn&rsquo;t get passed to outputs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    rename <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;type&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;[@metadata][type]&#34;</span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To handle the messages differently, we can just use an <code>if</code> statement on the <code>@metadata.type</code> property:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span>@metadata<span style="color:#f92672">][</span>type<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;jaeger&#34;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># do stuff to the jaeger message</span>
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># process the original message</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="building-the-http-payload">Building the Http Payload</h3>
<p>The hardest part of getting this to work was handling the dates.  Jaeger specifies that timestamps should come in <strong>micro</strong>seconds since epoch, and duration should be in microseconds also.  We need to use the <code>ruby</code> filter so we can run some code to do this, rather than using an inbuilt filter primitive.</p>
<p>The <code>duration</code> is easy enough, as we report <code>TimeElapsed</code> in milliseconds:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;duration&#39;, (event.get(&#39;TimeElapsed&#39;) * 1000).floor)&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To handle the timestamp we need to convert it to epoch milliseconds.  We can get the fractional seconds since the epoch by calling <a href="https://ruby-doc.org/core-1.9.3/Time.html#method-i-to_f"><code>to_f</code></a> on the <code>@timestamp</code> field, and then multiply by <code>1000</code> a couple of times to express it as microseconds.  We also <code>floor</code> it to remove the leftover fraction:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;timestamp&#39;, (event.get(&#39;@timestamp&#39;).to_f * 1000 * 1000).floor)&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This on its own will work, but it <strong>won&rsquo;t be right</strong>.  We report log entries when an operation completes, which means our timestamp is the finish of the event, not the start.  To solve this, we subtract the duration off the timestamp:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;timestamp&#39;, (event.get(&#39;@timestamp&#39;).to_f * 1000 * 1000).floor - event.get(&#39;duration&#39;))&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Next, we need to create our span id.  We need to generate a random id, consisting of letters and numbers, so the easiest way is to generate a <code>uuid</code>, and then tweak it to fit the Jaeger/Zipkin format.  To do that we need to install the <code>logstash-filter-uuid</code> plugin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/usr/share/logstash/bin/logstash-plugin install logstash-filter-uuid
</span></span></code></pre></div><p>There are a few things we need to do to generate a valid span id (for Jaeger):</p>
<ol>
<li>generate a uuid</li>
<li>remove the dashes</li>
<li>make it lowercase</li>
<li>trim it to 16 chars</li>
</ol>
<p>We use four filters to achieve this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>uuid {
</span></span><span style="display:flex;"><span>    target <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;id&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    lowercase <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;(^.{1,16}).*$&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\1</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The reason we specify the <code>mutate</code> twice is that order of the same operation (<code>gsub</code> in this case) is not guaranteed within a <code>mutate</code> block.</p>
<p>Next up we need to tweak the <code>traceid</code> from a guid to a uuid:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    lowercase <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;traceid&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Next, we can populate some other context into the message, by renaming the other fields we want.  I discovered most of the fields and their formats from a combination of the <a href="https://github.com/jaegertracing/jaeger-idl/blob/master/thrift/zipkincore.thrift">thrift dtos</a> and the <a href="https://github.com/openzipkin/zipkin/issues/1499">this pull request</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    rename <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;CorrelationId&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;traceid&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Context&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;name&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;ApplicationName&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;[localEndpoint][serviceName]&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Finally, we want to trim all the other properties from our message, which we can do by using the <code>logstash-filter-prune</code> plugin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>prune {
</span></span><span style="display:flex;"><span>    whitelist_names <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;duration&#34;</span>, <span style="color:#e6db74">&#34;localEndpoint&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    remove_field <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;@timestamp&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We have to explicitly remove the <code>@timestamp</code> property as the prune plugin seems to ignore it (it also ignores the <code>@metadata</code> property).</p>
<p>The complete filter code can be made a little more efficient by combining several of the <code>mutate</code> blocks, provided we keep things in the right order, as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;duration&#39;, (event.get(&#39;TimeElapsed&#39;) * 1000).floor)&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;timestamp&#39;, (event.get(&#39;@timestamp&#39;).to_f * 1000 * 1000).floor - event.get(&#39;duration&#39;))&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>uuid {
</span></span><span style="display:flex;"><span>    target <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;id&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    rename <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;CorrelationId&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;traceid&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Context&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;name&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;ApplicationName&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;[localEndpoint][serviceName]&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    remove_field <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;@timestamp&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    lowercase <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;id&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;(^.{1,16}).*$&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\1</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prune {
</span></span><span style="display:flex;"><span>    whitelist_names <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;duration&#34;</span>, <span style="color:#e6db74">&#34;localEndpoint&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="publishing-to-jaeger">Publishing to Jaeger</h3>
<p>When publishing to the Jaeger API, you have to send it an array of json objects.  To achieve this in the <code>http</code> output plugin, we can enable the <code>format =&gt; json_batch</code>, which will cause the HTTP client to buffer some events and then send them all at once.  So more efficiency, and no extra code on our part.</p>
<p>To help make testing easier, I publish to two different HTTP endpoints: the Jaeger docker container running on my host machine, and to a <a href="http://requestloggerbin.herokuapp.com/">Request Logger Bin</a>; where I can inspect the response if something is reported as a failure by Jaeger, and replay it (via the <a href="https://insomnia.rest/">Insomnia</a> REST client) and check error messages returned from Jaeger.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>output {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span>@metadata<span style="color:#f92672">][</span>type<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;jaeger&#34;</span> {
</span></span><span style="display:flex;"><span>        http {
</span></span><span style="display:flex;"><span>            url <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http://192.168.0.115:9411/api/v2/spans&#34;</span>
</span></span><span style="display:flex;"><span>            format <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;json_batch&#34;</span>
</span></span><span style="display:flex;"><span>            http_method <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;post&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        http {
</span></span><span style="display:flex;"><span>            url <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http://requestloggerbin.herokuapp.com/bin/ff3da5b2-ec57-4611-ada8-b360ab38830c&#34;</span>
</span></span><span style="display:flex;"><span>            format <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;json_batch&#34;</span>
</span></span><span style="display:flex;"><span>            http_method <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;post&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># normal message handling: elasticsearch etc.</span>
</span></span><span style="display:flex;"><span>        stdout { codec <span style="color:#f92672">=&gt;</span> rubydebug }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I also used LogStash&rsquo;s log output by tailing the log file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>tail -f /var/log/logstash/logstash-plain.log
</span></span></code></pre></div><p>Eventually, I had a working LogStash configuration and can view application traces in Jaeger.</p>
<h2 id="problems">Problems</h2>
<p>One thing I cannot figure out how to do is sending the <code>tags</code> property to Jaeger.  The Zipkin (and OpenTracing) APIs specify tags to be an object, e.g.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;traceid&#34;</span>: <span style="color:#e6db74">&#34;1ee98d32185e41faba146c151ce8e27d&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;8377a6dae87947d7&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;timestamp&#34;</span>: <span style="color:#ae81ff">1545321238784000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;duration&#34;</span>: <span style="color:#ae81ff">409000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;localEndpoint&#34;</span>: { <span style="color:#f92672">&#34;serviceName&#34;</span>: <span style="color:#e6db74">&#34;PersonInformationService&#34;</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;SomeOperation&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;tags&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;CorrelationID&#34;</span>: <span style="color:#e6db74">&#34;1ee98d32-185e-41fa-ba14-6c151ce8e27d&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;db.name&#34;</span>: <span style="color:#e6db74">&#34;test-blahblah&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>But LogStash wants the <code>tags</code> property to be an array of strings, and even using the <code>remove_field</code> on <code>tags</code> and then manually populating it doesn&rsquo;t work.  Currently, I don&rsquo;t <em>need</em> anything in the tags, but it would be nice to have it working.  I should ask on the Elastic forums perhaps.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>This post turned out to be a lot longer than I was expecting, but hopefully, it was interesting.  Next time I&rsquo;ll try and go through how I do testing of immutable infrastructure, as well as local development of the base images.</p>
]]></content:encoded></item></channel></rss>