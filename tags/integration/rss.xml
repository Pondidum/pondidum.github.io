<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>integration on Andy Dote</title><link>https://andydote.co.uk/tags/integration/</link><description>Recent content in integration on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 09 Jun 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/integration/rss.xml" rel="self" type="application/rss+xml"/><item><title>Database Integrations for MicroServices</title><link>https://andydote.co.uk/2016/06/09/database-integrations-for-microservices/</link><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2016/06/09/database-integrations-for-microservices/</guid><description>This is a follow up post after seeing Michal Franc&amp;rsquo;s NDC talk on migrating from Monolithic architectures.
One point raised was that Database Integration points are a terrible idea - and I wholeheartedly agree. However, there can be a number of situations where a Database Integration is the best or only way to achieve the end goal. This can be either technical; say a tool does not support API querying (looking at you SSRS), or cultural; the other team either don&amp;rsquo;t have the willingness, time, or power to learn how to query an API.</description></item></channel></rss>