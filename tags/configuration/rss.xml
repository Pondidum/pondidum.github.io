<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>configuration on Andy Dote</title><link>https://andydote.co.uk/tags/configuration/</link><description>Recent content in configuration on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 12 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/configuration/rss.xml" rel="self" type="application/rss+xml"/><item><title>Outside In Design</title><link>https://andydote.co.uk/2024/12/12/system-design-outside-in/</link><pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2024/12/12/system-design-outside-in/</guid><description>Following on from my previous post about not having too much configuration, I want to talk about how I design software.
I try and follow what I call &amp;ldquo;outside in design&amp;rdquo;; I try and make something that requires the bare minimum amount of configuration to cover the most common of use-cases. Once this functionality is working, further configuration can be added to cover the next most common use cases.
API Reduction As A Feature The first example I want to go through is how I removed options from an HTTP rate limiter we use.</description><content:encoded><![CDATA[<p>Following on from my previous post about not having <a href="/2024/10/31/too-much-configuration/">too much configuration</a>, I want to talk about how I design software.</p>
<p>I try and follow what I call &ldquo;outside in design&rdquo;; I try and make something that requires the bare minimum amount of configuration to cover the most common of use-cases.  Once this functionality is working, further configuration can be added to cover the next most common use cases.</p>
<h2 id="api-reduction-as-a-feature">API Reduction As A Feature</h2>
<p>The first example I want to go through is how I removed options from an HTTP rate limiter we use.  There are many teams using rate limiters, and we have noticed that there are often similar mistakes made in how they work and duplication of domain-specific functionality.</p>
<p>In order to make life easier for <em>most</em> users, a new rate limiter was made which reduced the API surface area, only exposing the bare minimum options.</p>
<p><strong>Algorithm.</strong> Instead of offering many different types of algorithm (for example <code>Token Bucket</code>, <code>Leaky Bucket</code>, <code>Fixed Window Counter</code>, and <code>Sliding Window</code>), the rate limiter only uses <code>Sliding Window</code>.</p>
<p><strong>Sizes.</strong>: By forcing the use of a specific algorithm, we eliminate a lot of algorithm specific options, such as bucket capacity, refill/drain rate, and window overlap.  We expose a single option of <code>WindowSeconds</code> with a default vault of <code>60</code>.</p>
<p><strong>Penalties.</strong> We also decided to not expose how long a ban is, and instead make it a multiple of the <code>WindowSeconds</code> option, in our case <code>WindowSeconds * 3</code>.</p>
<p><strong>Selection Criteria.</strong> Rate limiters we observed could filter by many different properties, such as IP Address, Headers, Cookies, Path, Query, Status Code, etc.  Our rate limiter has the following rules:</p>
<ul>
<li>Account and Path</li>
<li>Account and (bad) Status</li>
<li>IP Address and Path</li>
<li>IP Address and (bad) Status</li>
<li>Anonymous IP</li>
</ul>
<p>The way the account is detected is the same for all services in our domain, so we can centralise the checking code to be identical in all instances.</p>
<p><strong>Triggering.</strong> For triggering, we went with the simplest thing possible: if any counter&rsquo;s value goes over a threshold, then a ban is issued for the Account or IP address triggering the ban.  The threshold value is exposed as <code>MaxRequests</code> with a default value of <code>100</code></p>
<p>Finally, we expose one additional configuration: <code>Storage</code>.  This is an optional field which you can set to a Valkey or Redis-compatible client so that if you have many instances of your application, the rate-limiting is shared amongst all instances.</p>
<p>For most of our teams, using a rate limiter is now this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">limiter</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">org</span>.<span style="color:#a6e22e">NewRateLimiter</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">org</span>.<span style="color:#a6e22e">WithStorage</span>(<span style="color:#a6e22e">valkey</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">org</span>.<span style="color:#a6e22e">WithMaxRequests</span>(<span style="color:#ae81ff">80</span>),
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mux</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">NewServeMux</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">mux</span>.<span style="color:#a6e22e">Handle</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">limiter</span>(<span style="color:#a6e22e">apiRootHandler</span>))
</span></span></code></pre></div><p>For teams that need more customisation, we recommend they reach out to us to see what their needs are; the outcome would usually be embedding and customising the rate-limiter, forking the library, or using an off-the-shelf library directly.  So far very few teams have needed extra customisation.</p>
<p>The downside to this approach is if we want to change some detail about how the rate limiter works; we now have to find all the teams using it to make sure we don&rsquo;t break their workflow.  For Go projects, we typically bump the major version of the library, and have explicit messaging about the differences in the readme.</p>
<h2 id="organisation-conventions">Organisation Conventions</h2>
<p>The next example is trying to show off what we can achive when using conventions;  some of these conventions were in place before we wrote this code, and some have become conventions since.</p>
<p>When it comes to building docker containers, there are a few things that people, in general, want:</p>
<ul>
<li>the container to be built</li>
<li>tests to be run, preventing publishing broken containers</li>
<li>the (working) container to be published somewhere so it can be used</li>
<li>extra artifacts from the build to be collected (test reports, coverage, etc.)</li>
<li>it to be fast</li>
</ul>
<p>The problem with all these things is in the details; building itself is fairly straightforward, but publishing requires knowing where to publish, any credentials required, and how to name and version the container.  Likewise, artifact collection requires knowing where the artifacts are to be collected from, and where to publish them to (along with authentication etc.)</p>
<p>The even bigger issue is &ldquo;to be fast&rdquo;; people don&rsquo;t care about how its fast, they just want fast.  This means not only making a cacheable dockerfile but doing that caching somehow; with ephemeral build agents, that caching becomes harder.</p>
<p>We can go through our requirements and see what ones we know the answers to already and what we need to get from users:</p>
<p><strong>Docker Registry.</strong> The internal Secret Management Service (SMS) has a convention for where your docker registry is, and what the credentials are: read from <code>/teams/$team_name/docker/registry</code>.</p>
<p><strong>Container Path.</strong> We always publish to <code>$registry/$team_name/$repo_name/$container_name</code>.</p>
<p><strong>Container Name.</strong> A repository can have multiple containers, or the name of the container can differ from the repository.  So for this property, we need the users to supply something.</p>
<p><strong>Container Version.</strong> We decided that a short git SHA is enough for versioning.</p>
<p><strong>Caching.</strong> The registry has a second path convention for storing cache contents: <code>$registry/cache/$team_name/$repo_name/$container_name</code>.</p>
<p><strong>Artifacts.</strong> Artifacts are published to the Github Actions artifacts, so no extra authentication or settings are needed.  We decided that if the <code>.artifacts</code> folder exists and has contents, that is what will get stored.</p>
<p>Given the above analysis, we decided on 4 configuration options:</p>
<ol>
<li><code>team_name</code>: no default.  We will use this value to find the registry information and build container and cache paths.</li>
<li><code>container_name</code>: no default.  You need to tell us what the name of your container should be.</li>
<li><code>build_args</code>: default empty.  Supply extra arguments to the <code>docker build</code> command.  Some teams need to inject extra information from the host.</li>
<li><code>dockerfile</code>: default <code>./Dockerfile</code>.  Some teams have multiple dockerfiles in their repository, or keep the files in subfolders.</li>
</ol>
<p>By relying on the <code>team_name</code> parameter, so many other options can be eliminated, and it turns out most people don&rsquo;t care what exact path their containers are uploaded to, as long as they are accessible when it comes to being used in a deployment environment.  This is foreshadowing!</p>
<p>For most teams, their build workflow becomes just two steps: checkout sourcecode, and build the container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">org/docker-build@v1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">team_name</span>: <span style="color:#e6db74">&#34;team-one&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">api</span>
</span></span></code></pre></div><h2 id="organisation-conventions-two">Organisation Conventions Two</h2>
<p>Now that we have a shared way to build docker containers with low configuration, the next logical step was figuring out if we could do the same for deployment.  It turns out a lot of the conventions used to build the container can be applied to deployment: docker registry, container path, container name, and container version are all the same between the two.  In addition, we need to add a few more: the name of the environment being deployed to and the path to your deployment definition file (for example, a Nomad job).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">org/nomad-docker@v1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">team_name</span>: <span style="color:#e6db74">&#34;team-one&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container_name</span>: <span style="color:#ae81ff">api</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>: <span style="color:#ae81ff">live</span>
</span></span></code></pre></div><h2 id="the-pit-of-success">The Pit of Success</h2>
<p>We also like to leverage The Pit of Success, which seems to originate from <a href="https://learn.microsoft.com/en-us/archive/blogs/brada/the-pit-of-success">Rico Mariani</a>; we want to make doing the easiest thing to be the correct thing.</p>
<p>To that end, we provide a library to populate an app&rsquo;s secrets.  This library handles multiple forms of authentication for different runtime locations (developer machine, nomad cluster, lambda, etc.), and handles where the secrets themselves are located.</p>
<p>The library&rsquo;s usage boils down to two things.  A single <code>struct</code> to represent their secrets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Secrets</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ClientID</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ClientSecret</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ApiToken</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// etc
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>And a single function call to populate it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">org</span>.<span style="color:#a6e22e">ReadSecrets</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#e6db74">&#34;management-api&#34;</span>, <span style="color:#a6e22e">secrets</span>)
</span></span></code></pre></div><p>This function call does a lot behind the scenes:</p>
<p><strong>Authentication.</strong> This varies based on where the app is running: on a developer machine, it uses the local cached secret manager credentials and triggers authentication flows if needed.  When deployed, it uses the relevant secret authentication system for that environment (e.g. Nomad&rsquo;s Vault integration or AWS Secret Manager in Lambda).</p>
<p><strong>Secret Location.</strong> It reads all the secrets for from a conventional path: <code>/teams/$team_name/apps/$app_name/$env/*</code>, where the values come from different places:</p>
<ul>
<li><code>team_name</code> comes from a common environment variable, and <code>ReadSecrets</code> errors if its not populated</li>
<li><code>env</code> comes from either an environment variable when the app is deployed somewhere or is set to <code>local</code> on a developer&rsquo;s machine.</li>
<li><code>app_name</code> is supplied in code (<code>management-api</code> in this case)</li>
</ul>
<p>While teams can roll their own secret management integration, our library is so easy to use that almost no teams choose to do anything different.</p>
<h2 id="the-golden-path">The Golden Path</h2>
<p>Our tools form what we call our Golden Path, a term which seems to originate from <a href="https://engineering.atspotify.com/2020/08/how-we-use-golden-paths-to-solve-fragmentation-in-our-software-ecosystem/#:~:text=The%20Golden%20Path%20%E2%80%94%20as%20we,this%20opinionated%20and%20supported%20path.">spotify</a>.  We use it to define a way to develop and deploy software in a tried and tested manner.  Teams are always free to choose their own path by changing what parts of the system they see fit.</p>
<p>The trade off teams are making is between maintenance burden and configuration;  choose our tools, and you don&rsquo;t need to worry about them working, but you need to follow our conventions and opinions.</p>
<h2 id="how-do-you-design-software">How Do You Design Software?</h2>
<p>While this is working really well for me and my teams, there has to be other opinions too; I&rsquo;d be interested in hearing how people do this for their teams and projects.</p>
]]></content:encoded></item><item><title>Too Much Configuration</title><link>https://andydote.co.uk/2024/10/31/too-much-configuration/</link><pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2024/10/31/too-much-configuration/</guid><description>When writing software, you will come across many questions which don&amp;rsquo;t always have a clear answer, and its tempting to not answer the question, and provide it as a configuration option to the user of your software. You might go as far as setting a default value though. This seems good for everyone; you don&amp;rsquo;t have to make a decision, users can change their minds whenever they want.
However, too much configuration is a bad thing in general.</description><content:encoded><![CDATA[<p>When writing software, you will come across many questions which don&rsquo;t always have a clear answer, and its tempting to not answer the question, and provide it as a configuration option to the user of your software.  You might go as far as setting a default value though.  This seems good for everyone; you don&rsquo;t have to make a decision, users can change their minds whenever they want.</p>
<p>However, too much configuration is a bad thing in general.  There are two ways I want to view configuration: internally, from the developer of the software&rsquo;s perspective, and externally, from the user of the software&rsquo;s persepective (who might also be writing software.)</p>
<p>Most of the categories I will cover exist in both internal and external sections, as the effects they have are bi-directional.</p>
<h2 id="internal-issues">Internal Issues</h2>
<p>While internal issues will be more felt by you, the developer of software, I think that they are actually less important than the external issues.  How a user experiences your software is siginficantly important, and in general I would rather take on a little burden to allow my users to have a better experience - to a point though.</p>
<h3 id="cognitive-load">Cognitive Load</h3>
<p>One of the most underlooked aspect of configuration is the cognative load it puts on developers.  Every configuration value brings in additional questions, some of which we will touch on later.  For now I want to look at how a value is actually used.  Every piece of indirection in a codebase adds up over time - some indirection is useful and needed for sure, but having too much makes it harder to follow flow of the program.</p>
<p>Often times, configuration values interact with eachother in unexpected ways; a retry-count and a backoff-strategy when configured together can cause your program to retry forever very fast, or retry forever with days between attempts.</p>
<h3 id="changing-values">Changing Values</h3>
<p>A configuration value is part of your API contract; changing anyhthing about it can break your users, and might keep you from making needed changes.  For example, if a configuration has a default value, and you want to change that default, how do you handle all the usages of your software which are expecting the default to remain the same?  will it impact their usage?  The same goes for removing a default value, renaming a configuration setting, or changing its type.</p>
<h3 id="validation">Validation</h3>
<p>Configuration values need validating, and not just checking they are the expected type (type validation) - they also need semantic validation; checking wether a value makes sense in the given context.  For example, setting an HTTP timeout to 3 days is probably not a useful thing to do.</p>
<p>This adds to the complexity of your software: constants (or even magic values) don&rsquo;t need this extra validation and the more code you have to maintain, the higher the burden of maintenance.</p>
<h3 id="complexity">Complexity</h3>
<p>This area in general applies to applications over libraries, but does apply to both, especially when libraries can read configuration from multiple places.</p>
<p>First off, how many configuration sources does your software have?  For a CLI, there are usually at least three sources: Command arguments and flags, environment variables, and configuration files.  These sources need to have their values merged somehow, and even if that strategy is just &ldquo;cli arguments win&rdquo;, you still have to implement a hierarchy and all the complexities that come with that.  Boolean configurations are fairly straightforward, but how do arrays or nested objects work?  Do you merge the array values?  Do you replace the entire array?  And is the answer the same for all arrays in your configuration, or does it differ?</p>
<p>If you are lucky, all the complexity is encapsulated into one place, such that the rest of you software sees a single <code>Configuration</code> object of some form, and doesn&rsquo;t need to worry about how the values got into that structure.</p>
<p>However, even libraries end up doing things with the environment.  For example, the OpenTelemetry libraries will read the environment for default values; this is nice to start with as you have to write less code to get things up and running, and (at least for OpenTelemetry) the environment variables are documented, and the same across languages and versions.  It does mean, though, that the configuration for your OpenTelemetry setup is separate from the rest of your application.  What if you also need to do something that depends on a value that is used for OpenTelemetry?</p>
<p>The final complexity to talk about is the extra code paths introduced by each configuration value.  This applies to things like which storage method to use in the application, rather than only supporting one, or which transports to use.  I have had experience with a vendor whose product supported multiple central logging backends, but it turned out they primarily used Firebase, and all other backends weren&rsquo;t tested so thoroughly.  We saw so many performance problems with the other &ldquo;supported&rdquo; backends.  Which leads us nicely to Testing.</p>
<h3 id="testing">Testing</h3>
<p>Testing configuration is tricky; generally its not really done, which leaves you open to problems like &ldquo;did this value here really used to work?&rdquo;</p>
<p>Frequently when developing software, I have multiple implementations of a cache in my programs:  there is the real implementation (such as Redis or a filesystem), a testing cache (in memory), and a bunch of decorators (statistics about the cache, tracing of what is happening etc.)  When testing most of my applications, I use the <code>InMemoryCache</code> as it is the fastest and eliminates shared state from my tests (or even between test runs), but I have to make sure there are also sufficient integration tests for the application using the real cache - not just testing its implementation.</p>
<h3 id="documentation">Documentation</h3>
<p>Configuration values need documenting: what each value does, whether it is required or not, what it&rsquo;s default value is, and any interactions it has (i.e. configuration it cannot work with or requires to also be set.)  Documentation is generally not the strongest of points for developers, and keeping that documentation up to date and accurate again adds to the maintenance burden.</p>
<h2 id="external-issues">External Issues</h2>
<p>The issues we face internally are also faced externally by the users of our software.  Not all of them are exactly the same, and the problems can be easier or harder than the internal problems.</p>
<h3 id="cognative-load">Cognative Load</h3>
<p>When you encounter a piece of software which has <em>so many</em> options, how do you go about figuring out what settings you need for your usage, and what properties need to be set?  If you are lucky, the <a href="#documentation">Documentation</a> is up to date and easily discoverable.</p>
<p>One interesting problem occurs with default values; I have seen software where not specifying a property means something very different from specifying it as null/empty/etc.</p>
<p>The interaction of different properties can also be hard to follow; properties which only work when other properties are set (or not set) is one issue, and the other is how the values you specify interact with each other, such as with timeouts and retries.</p>
<p>If there are many configuration properties, trying to discern the right one to change is also a burden, and this gets even worse when there are many sources of configuration:  where is the appropriate place to set the value?  is something else overriding it?  do you even know where all possible places the configuration can come from are?</p>
<h3 id="changing-values-1">Changing Values</h3>
<p>This is pretty much the same as the Internal Issues Changing Values section; if I have configured something and it is working, but then at some point the default values of <em>something</em> change, and it stops working, I now have to spend a lot of effort figuring out which value change was the culprit, and possibly try and work out what the old value was so that I can put it back to how it was.</p>
<p>This can be especially difficult if the changelog only says &ldquo;changed the default value of $thingy to 17&rdquo; - what it was before is a mystery, but maybe you can figure it out by looking through the commits.  Assuming its opensource (or source available.)</p>
<p>What happens when a new feature is added?  Should it be disabled by default or enabled by default?  What if it suddenly starts doing something you don&rsquo;t want, or its configuration starts affecting your existing configuration?</p>
<h3 id="validation-1">Validation</h3>
<p>Like the previous validation section, we are trying to think of not only what values can go here but also what format they should be in.  Is the value specified in seconds?  Milliseconds?  Epoch?  or is it a string of &ldquo;3m20s&rdquo;?  Hopefully, the software will tell you the value is invalid, but it might just ignore invalid values, making you think you&rsquo;re setting something, but nothing is actually happening.</p>
<p>An experience I had somewhat recently with the <a href="https://kubernetes-sigs.github.io/aws-load-balancer-controller/">ALB Controller</a> was related to a configuration value.  We had the following set in an annotation, which worked fine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">alb.ingress.kubernetes.io/success-codes</span>: <span style="color:#ae81ff">200</span>, <span style="color:#ae81ff">204</span>
</span></span></code></pre></div><p>But someone decided that <code>204</code> was no longer a valid success-code, so removed the <code>, 204</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">alb.ingress.kubernetes.io/success-codes</span>: <span style="color:#ae81ff">200</span>
</span></span></code></pre></div><p>&hellip;which broke silently when deployed - the problem was that the ALB controller is expecting a string here, when the value changed it suddenly parsed as an integer.  What made this harder to pick up is that the deployment itself worked, but the ALB controller started throwing errors, and that wasn&rsquo;t noticed for a while.  The fix, by the way, was to add quotes around the value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">alb.ingress.kubernetes.io/success-codes</span>: <span style="color:#e6db74">&#34;200&#34;</span>
</span></span></code></pre></div><h3 id="testing-1">Testing</h3>
<p>How often do you test that configuration of software is correct?  I would hazzard a guess at &ldquo;not often&rdquo; - and when it is done, it tends to be just testing of the configuration values themselves; checking a timeout is set or not set for example.</p>
<p>What is harder to manage is to test the the given configuration has the desired effect on the software itself.  How do you go about testing that timeouts and retries work as expected?  or authentication parameters are having the desired effect?</p>
<p>This kind of testing is important too, especially when updating software; minor, or even patch versions of software can have breaking changes, and if you&rsquo;re not testing it still does what you want, how will you know that everything is configured correctly?</p>
<h2 id="suggestions-for-better-configuration">Suggestions for better configuration</h2>
<ol>
<li>Don&rsquo;t make something configurable unless it needs to be</li>
<li>Clearly specify what the default values are, what format values are in, and what the property actually does</li>
<li>Ideally, use a system that keeps the documentation for the property with the property in code.  It might stay in sync then.</li>
<li>If there are conventions, follow them.  This applies to all aspects: source of configuration, format, property names, and values.</li>
</ol>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>We haven&rsquo;t even gotten into the debate about the right configuration file language!</p>
<p>In a future post, I want to go over how these thoughts have affected how I design software, and the configuration for it, but this post is quite long enough already so I will wait for another time.</p>
]]></content:encoded></item><item><title>Semantic Configuration Validation: Earlier</title><link>https://andydote.co.uk/2018/09/08/semantic-configuration-validation-earlier/</link><pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/09/08/semantic-configuration-validation-earlier/</guid><description>After my previous post on Validating Your Configuration, one of my colleagues made an interesting point, paraphrasing:
I want to know if the configuration is valid earlier than that. At build time preferably. I don&amp;rsquo;t want my service to not start if part of it is invalid.
There are two points here, namely when to validate, and what to do with the results of validation.
Handling Validation Results If your configuration is invalid, you&amp;rsquo;d think the service should fail to start, as it might be configured in a dangerous manner.</description><content:encoded><![CDATA[<p>After my previous post on <a href="/2018/08/26/validate-configuration/">Validating Your Configuration</a>, one of my colleagues made an interesting point, paraphrasing:</p>
<blockquote>
<p>I want to know if the configuration is valid earlier than that.  At build time preferably.  I don&rsquo;t want my service to not start if part of it is invalid.</p>
</blockquote>
<p>There are two points here, namely when to validate, and what to do with the results of validation.</p>
<h2 id="handling-validation-results">Handling Validation Results</h2>
<p>If your configuration is invalid, you&rsquo;d think the service should fail to start, as it might be configured in a dangerous manner.  While this makes sense for some service, others might need to work differently.</p>
<p>Say you have an API which supports both writing and reading of a certain type of resource.  The read will return you a resource of some form, and the write side will trigger processing of a resource (and return you <a href="https://httpstatuses.com/202">a 202 Accepted, obviously</a>).</p>
<p>What happens if your configuration just affects the write side of the API? Should you prevent people from reading too?  Probably not, but again it depends on your domain as to what makes sense.</p>
<h2 id="validating-at-build-time">Validating at Build Time</h2>
<p>This is the far more interesting point (to me).  How can we modify our build to validate that the environment&rsquo;s configuration is valid?  We have the code to do the validation: we have automated tests, and we have a configuration validator class (in this example, implemented using <a href="https://github.com/JeremySkinner/FluentValidation">FluentValidation</a>).</p>
<p>Depending on where your master configuration is stored, the next step can get much harder.</p>
<h3 id="local-configuration">Local Configuration</h3>
<p>If your configuration is in the current repository (<a href="/2018/08/07/managing-consul-appsettings/">as it should be</a>) then it will be no problem to read.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConfigurationTests</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> IEnumerable&lt;<span style="color:#66d9ef">object</span>[]&gt; AvailableEnvironments =&gt; Enum
</span></span><span style="display:flex;"><span>        .GetValues(<span style="color:#66d9ef">typeof</span>(Environments))
</span></span><span style="display:flex;"><span>        .Cast&lt;Environments&gt;()
</span></span><span style="display:flex;"><span>        .Select(e =&gt; <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">object</span>[] { e });
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [Theory]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [MemberData(nameof(AvailableEnvironments))]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Environment_specific_configuration_is_valid(Environments environment)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> ConfigurationBuilder()
</span></span><span style="display:flex;"><span>            .AddJsonFile(<span style="color:#e6db74">&#34;config.json&#34;</span>)
</span></span><span style="display:flex;"><span>            .AddJsonFile(<span style="color:#e6db74">$&#34;config.{environment}.json&#34;</span>, optional: <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>            .Build()
</span></span><span style="display:flex;"><span>            .Get&lt;AppConfiguration&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> validator = <span style="color:#66d9ef">new</span> AppConfigurationValidator();
</span></span><span style="display:flex;"><span>        validator.ValidateAndThrow(config);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Given the following two configuration files, we can make it pass and fail:</p>
<p><code>config.json:</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Callback&#34;</span>: <span style="color:#e6db74">&#34;https://localhost&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Timeout&#34;</span>: <span style="color:#e6db74">&#34;00:00:30&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;MaxRetries&#34;</span>: <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>config.local.json:</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;MaxRetries&#34;</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="remote-configuration">Remote Configuration</h3>
<p>But what if your configuration is not in the local repository, or at least, not completely there?  For example, have a lot of configuration in Octopus Deploy, and would like to validate that at build time too.</p>
<p>Luckily Octopus has a Rest API (and <a href="https://www.nuget.org/packages/Octopus.Client/">acompanying client</a>)  which you can use to query the values.  All we need to do is replace the <code>AddJsonFile</code> calls with an <code>AddInMemoryCollection()</code> and populate a dictionary from somewhere:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[Theory]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">[MemberData(nameof(AvailableEnvironments))]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task Octopus_environment_configuration_is_valid(Environments environment)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> variables = <span style="color:#66d9ef">await</span> FetchVariablesFromOctopus(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;MyDeploymentProjectName&#34;</span>,
</span></span><span style="display:flex;"><span>        environment);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> ConfigurationBuilder()
</span></span><span style="display:flex;"><span>        .AddInMemoryCollection(variables)
</span></span><span style="display:flex;"><span>        .Build()
</span></span><span style="display:flex;"><span>        .Get&lt;AppConfiguration&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> validator = <span style="color:#66d9ef">new</span> AppConfigurationValidator();
</span></span><span style="display:flex;"><span>    validator.ValidateAndThrow(config);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Reading the variables from Octopus&rsquo; API requires a bit of work as you don&rsquo;t appear to be able to ask for all variables which would apply if you deployed to a specific environment, which forces you into building the logic yourself.  However, if you are just using Environment scoping, it shouldn&rsquo;t be too hard.</p>
<h3 id="time-delays">Time Delays</h3>
<p>Verifying the configuration at build time when your state is fetched from a remote store is not going to solve all your problems, as this little diagram illustrates:</p>
<p><img loading="lazy" src="versioning-time.png" alt="test pass, a user changes value, deployment happens, startup fails"  />
</p>
<p>You need to validate in both places: early on in your process, and on startup.  How you handle the configuration being invalid doesn&rsquo;t have to be the same in both places:</p>
<ul>
<li>In the build/test phase, fail the build</li>
<li>On startup, raise an alarm, but start if reasonable</li>
</ul>
<p>Again, how you handle the configuration errors when your application is starting is down to your domain, and what your application does.</p>
]]></content:encoded></item><item><title>Validate Your Configuration</title><link>https://andydote.co.uk/2018/08/26/validate-configuration/</link><pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/08/26/validate-configuration/</guid><description>As I have written many times before, your application&amp;rsquo;s configuration should be strongly typed and validated that it loads correctly at startup.
This means not only that the source values (typically all represented as strings) can be converted to the target types (int, Uri, TimeSpan etc) but that the values are semantically valid too.
For example, if you have a web.config file with the following AppSetting, and a configuration class to go with it:</description><content:encoded><![CDATA[<p>As I have <a href="/2016/12/06/strong-type-all-the-configurations/">written</a> many <a href="/2017/11/09/configuration-composition/">times</a> before, your application&rsquo;s configuration should be strongly typed and validated that it loads correctly at startup.</p>
<p>This means not only that the source values (typically all represented as strings) can be converted to the target types (<code>int</code>, <code>Uri</code>, <code>TimeSpan</code> etc) but that the values are <strong>semantically valid</strong> too.</p>
<p>For example, if you have a <code>web.config</code> file with the following <code>AppSetting</code>, and a configuration class to go with it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;configuration&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;appSettings&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;add</span> <span style="color:#a6e22e">key=</span><span style="color:#e6db74">&#34;Timeout&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;20&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/appSettings&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/configuration&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Configuration</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> TimeSpan Timeout { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can now load the configuration using <a href="https://github.com/pondidum/stronk">Stronk</a> (or Microsoft.Extensions.Configuration if you&rsquo;re on dotnet core), and inspect the contents of the <code>Timeout</code> property:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> StronkConfig().Build&lt;Configuration&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Console.WriteLine(config.Timeout); <span style="color:#75715e">// 20 days, 0 hours, 0 minutes, 0 seconds</span>
</span></span></code></pre></div><p>Oops.  <strong>A timeout of 20 days is probably a <em>little</em> on the high side!</strong>  The reason this happened is that to parse the string value we use <code>TimeSpan.Parse(value)</code>, which will interpret it as days if no other units are specified.</p>
<h2 id="how-to-validate">How to validate?</h2>
<p>There are several ways we could go about fixing this, from changing to use <code>TimeSpan.ParseExact</code>, but then we need to provide the format string from somewhere, or force people to use Stronk&rsquo;s own decision on format strings.</p>
<p>Instead, we can just write some validation logic ourselves.  If it is a simple configuration, then writing a few statements inline is probably fine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> StronkConfig()
</span></span><span style="display:flex;"><span>    .Validate.Using&lt;Configuration&gt;(c =&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (c.Timeout &lt; TimeSpan.FromSeconds(<span style="color:#ae81ff">60</span>) &amp;&amp; c.Timeout &gt; TimeSpan.Zero)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(c.Timeout), <span style="color:#e6db74">$&#34;Must be greater than 0, and less than 1 minute&#34;</span>);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    .Build&lt;Configuration&gt;();
</span></span></code></pre></div><p>But we can make it much clearer by using a validation library such as <a href="https://github.com/JeremySkinner/FluentValidation">FluentValidation</a>, to do the validation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> StronkConfig()
</span></span><span style="display:flex;"><span>    .Validate.Using&lt;Configuration&gt;(c =&gt; <span style="color:#66d9ef">new</span> ConfigurationValidator().ValidateAndThrow(c))
</span></span><span style="display:flex;"><span>    .Build&lt;Configuration&gt;();
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConfigurationValidator</span> : AbstractValidator&lt;Configuration&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> HashSet&lt;<span style="color:#66d9ef">string</span>&gt; ValidHosts = <span style="color:#66d9ef">new</span> HashSet&lt;<span style="color:#66d9ef">string</span>&gt;(
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">new</span>[] { <span style="color:#e6db74">&#34;localhost&#34;</span>, <span style="color:#e6db74">&#34;internal&#34;</span> },
</span></span><span style="display:flex;"><span>        StringComparer.OrdinalIgnoreCase);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ConfigurationValidator()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        RuleFor(x =&gt; x.Timeout)
</span></span><span style="display:flex;"><span>            .GreaterThan(TimeSpan.Zero)
</span></span><span style="display:flex;"><span>            .LessThan(TimeSpan.FromMinutes(<span style="color:#ae81ff">2</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        RuleFor(x =&gt; x.Callback)
</span></span><span style="display:flex;"><span>            .Must(url =&gt; url.Scheme == Uri.UriSchemeHttps)
</span></span><span style="display:flex;"><span>            .Must(url =&gt; ValidHosts.Contains(url.Host));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, not only are we checking the <code>Timeout</code> is in a valid range, but that our <code>Callback</code> is HTTPS and that it is going to a domain on an Allow-List.</p>
<h2 id="what-should-i-validate">What should I validate?</h2>
<p>Everything?  If you have properties controlling the number of threads an application uses, probably checking it&rsquo;s a positive number, and less than <code>x * Environment.ProcessorCount</code> (for some value of x) is probably a good idea.</p>
<p>If you are specifying callback URLs in the config file, checking they are in the right domain/scheme would be a good idea (e.g. must be https, must be in a domain allow-list).</p>
<p>How do you check your configuration isn&rsquo;t going to bite you when an assumption turns out to be wrong?</p>
]]></content:encoded></item><item><title>Strong Configuration Composition</title><link>https://andydote.co.uk/2017/11/09/configuration-composition/</link><pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/11/09/configuration-composition/</guid><description>It&amp;rsquo;s no secret I am a fan of strong typing - not only do I talk and blog about it a lot, but I also have a library called Stronk which provides strong typed configuration for non dotnet core projects.
The problem I come across often is large configurations. For example, given the following project structure (3 applications, all reference the Domain project):
DemoService `-- src |-- Domain | |-- Domain.</description><content:encoded><![CDATA[<p>It&rsquo;s no secret I am a fan of strong typing - not only do I talk and blog about it a lot, but I also have a library called <a href="https://github.com/pondidum/stronk">Stronk</a> which provides strong typed configuration for non dotnet core projects.</p>
<p>The problem I come across often is large configurations.  For example, given the following project structure (3 applications, all reference the Domain project):</p>
<pre tabindex="0"><code>DemoService
`-- src
    |-- Domain
    |   |-- Domain.csproj
    |   `-- IConfiguration.cs
    |-- QueueConsumer
    |   |-- app.config
    |   |-- QueueConsumerConfiguration.cs
    |   `-- QueueConsumer.csproj
    |-- RestApi
    |   |-- RestConfiguration.cs
    |   |-- RestApi.csproj
    |   `-- web.config
    `-- Worker
        |-- app.config
        |-- WorkerConfiguration.cs
        `-- Worker.csproj
</code></pre><p>The configuration defined in the domain will look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IConfiguration</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> ApplicationName { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> LogPath { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    Uri MetricsEndpoint { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Uri DocumentsEndpoint { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    Uri ArchivalEndpoint { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> RabbitMqUsername { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> RabbitMqPassword { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> RabbitMqVHost { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> BulkQueue { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> DirectQueue { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> NotificationsQueue { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Uri RabbitMqConnection { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> DatabaseConnection { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> CacheConnection { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There are a number of problems with this configuration:</p>
<p>First off, it lives in the <code>Domain</code> project, which kinda makes sense, as things in there need access to some of the properties - but none of them need to know the name of the Queue being listened to, or where the metrics are being written to.</p>
<p>Next, and also somewhat related to the first point, is that all the entry projects (<code>RestApi</code>, <code>QueueConsumer</code> and <code>Worker</code>) need to supply all the configuration values, and you can&rsquo;t tell at a glance which projects actually need which values.</p>
<p>Finally, classes which use this configuration are less externally discoverable.  For example, which properties does this need: <code>new DocumentDeduplicator(new Configuration())</code>? Probably the cache? Maybe the database? or possibly the DocumentsEndpoint?  Who knows without opening the class.</p>
<h2 id="the-solution">The Solution</h2>
<p>The key to solving this is the Interface Segregation Principal - the I in SOLID.  First we need to split the interface into logical parts, which will allow our consuming classes to only take in the configuration they require, rather than the whole thing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IRabbitConfiguration</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Uri RabbitMqConnection { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> RabbitMqUsername { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> RabbitMqPassword { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> RabbitMqVHost { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> BulkQueue { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> DirectQueue { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> NotificationsQueue { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IDeduplicationConfiguration</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Uri DocumentsEndpoint { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> CacheConnection { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IStorageConfiguration</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Uri ArchivalEndpoint { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> DatabaseConnection { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can also move the <code>IRabbitConfiguration</code> and <code>IDeduplicationConfiguration</code> out of the domain project, and into the <code>QueueConsumer</code> and <code>Worker</code> projects respectively, as they are only used by types in these projects:</p>
<pre tabindex="0"><code>DemoService
`-- src
    |-- Domain
    |   |-- Domain.csproj
    |   `-- IStorageConfiguration.cs
    |-- QueueConsumer
    |   |-- app.config
    |   |-- IRabbitConfiguration.cs
    |   |-- QueueConsumerConfiguration.cs
    |   `-- QueueConsumer.csproj
    |-- RestApi
    |   |-- RestConfiguration.cs
    |   |-- RestApi.csproj
    |   `-- web.config
    `-- Worker
        |-- app.config
        |-- IDeduplicationConfiguration.cs
        |-- WorkerConfiguration.cs
        `-- Worker.csproj
</code></pre><p>Next we can create some top-level configuration interfaces, which compose the relevant configuration interfaces for a project (e.g. the <code>RestApi</code> doesn&rsquo;t need <code>IDeduplicationConfiguration</code> or <code>IRabbitConfiguration</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IWorkerConfiguration</span> : IStorageConfiguration, IDeduplicationConfiguration
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> ApplicationName { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> LogPath { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    Uri MetricsEndpoint { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IRestConfiguration</span> : IStorageConfiguration
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> ApplicationName { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> LogPath { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    Uri MetricsEndpoint { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IQueueConsumerConfiguration</span> : IStorageConfiguration, IRabbitConfiguration
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> ApplicationName { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> LogPath { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    Uri MetricsEndpoint { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note how we have also not created a central interface for the application configuration - this is because the application configuration is specific to each entry project, and has no need to be passed on to the domain.</p>
<p>Finally, an actual configuration class can be implemented (in this case using <a href="https://github.com/pondidum/stronk">Stronk</a>, but if you are on dotnet core, the inbuilt configuration builder is fine):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">QueueConsumerConfiguration</span> : IQueueConsumerConfiguration
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> ApplicationName { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> LogPath { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    Uri MetricsEndpoint { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Uri ArchivalEndpoint { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> DatabaseConnection { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    Uri RabbitMqConnection { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> RabbitMqUsername { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> RabbitMqPassword { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> RabbitMqVHost { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> BulkQueue { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> DirectQueue { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> NotificationsQueue { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> QueueConsumerConfiguration()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.FromAppConfig();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And our startup class might look something like this (using <a href="http://structuremap.github.io/">StructureMap</a>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Startup</span> : IDisposable
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Container _container;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> IConsumer _consumer;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Startup(IQueueConsumerConfiguration config)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        ConfigureLogging(config);
</span></span><span style="display:flex;"><span>        ConfigureMetrics(config);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        _container = <span style="color:#66d9ef">new</span> Container(_ =&gt;
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            _.Scan(a =&gt; {
</span></span><span style="display:flex;"><span>                a.TheCallingAssembly();
</span></span><span style="display:flex;"><span>                a.LookForRegistries();
</span></span><span style="display:flex;"><span>            })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            _.For&lt;IQueueConsumerConfiguration&gt;().Use(config);
</span></span><span style="display:flex;"><span>            _.For&lt;IStorageConfiguration&gt;().Use(config);
</span></span><span style="display:flex;"><span>            _.For&lt;IRabbitConfiguration&gt;().Use(config);
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        _consumer = _container.GetInstance&lt;IConsumer&gt;();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task Start() =&gt; <span style="color:#66d9ef">await</span> _consumer.Start();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task Stop() =&gt; <span style="color:#66d9ef">await</span> _consumer.Stop();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> ConfigureLogging(IQueueConsumerConfiguration config) { <span style="color:#75715e">/* ... */</span> }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> ConfigureMetrics(IQueueConsumerConfiguration config) { <span style="color:#75715e">/* ... */</span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose() =&gt; _container.Dispose();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As our <code>Startup</code> takes in the top-level configuration interface, if we want to write a test which tests our entire system, it can be done with a single mocked configuration object:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[Fact]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task When_the_entire_system_is_run()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> config = Substitute.For&lt;IQueueConsumerConfiguration&gt;();
</span></span><span style="display:flex;"><span>    config.RabbitMqConnection.Returns(<span style="color:#66d9ef">new</span> Uri(<span style="color:#e6db74">&#34;localhost:5672&#34;</span>));
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// etc.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> startup = <span style="color:#66d9ef">new</span> Startup(config);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">await</span> startup.Start();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">await</span> startup.Stop();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="one-final-thing">One Final Thing</h2>
<p>Even if you have a microservice type project with only the one csproj, I would still recommend splitting your configuration into small interfaces, just due to the discoverability it provides.</p>
<p>How do you do configuration?</p>
]]></content:encoded></item><item><title>Strong Type All The Configurations</title><link>https://andydote.co.uk/2016/12/06/strong-type-all-the-configurations/</link><pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2016/12/06/strong-type-all-the-configurations/</guid><description>As anyone I work with can attest, I a have been prattling on about strong typing everything for quite a while. One of the places I feel people don&amp;rsquo;t utilise strong typing enough is in application configuration. This manifests in a number of problems in a codebase.
The Problems The first problem is when nothing at all is done about it, and you end up with code spattered with this:</description><content:encoded><![CDATA[<p>As anyone I work with can attest, I a have been prattling on about strong typing everything for quite a while.
One of the places I feel people don&rsquo;t utilise strong typing enough is in application configuration.  This manifests in a number of problems in a codebase.</p>
<h2 id="the-problems">The Problems</h2>
<p>The first problem is when nothing at all is done about it, and you end up with code spattered with this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> someUrl = <span style="color:#66d9ef">new</span> Uri(ConfigurationManager.AppSettings[<span style="color:#e6db74">&#34;RemoteService&#34;</span>]);
</span></span></code></pre></div><p>This itself causes a few problems:</p>
<ul>
<li><strong>Repeated:</strong> You have magic strings throughout your codebase</li>
<li><strong>Consistency:</strong> Was it <code>RemoteService</code> or <code>RemoteServiceUri</code>. Or was it in <code>ConnectionStrings</code> or <code>AppSettings</code>?</li>
<li><strong>Visibility:</strong> Can you tell which classes require on which (if any) configuration values?</li>
<li><strong>Typing:</strong> Was it actually a URL? or was it DNS entry?</li>
<li><strong>Late errors:</strong> You will only find out once that particular piece of code runs</li>
<li><strong>Tight Coupling:</strong> Tests won&rsquo;t help either, as they&rsquo;ll be reading your test&rsquo;s <code>app.config</code> instead&hellip;</li>
</ul>
<h2 id="solution-version-1">Solution: Version 1</h2>
<p>The first solution involves abstracting the <code>ConfigurationManager</code> behind a general interface, which can be injected into classes requiring configuration values.  The interface is usually along the following lines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">ISettings</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> GetString(<span style="color:#66d9ef">string</span> key);
</span></span><span style="display:flex;"><span>    Uri GetUri(<span style="color:#66d9ef">string</span> key);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// GetInt, GetShort, etc.</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And having an implementation which uses the <code>ConfigurationManager</code> directly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Settings</span> : ISettings
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> GetString(<span style="color:#66d9ef">string</span> key) =&gt; ConfigurationManager.AppSettings[key];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Uri GetUri(<span style="color:#66d9ef">string</span> key) =&gt; <span style="color:#66d9ef">new</span> Uri(ConfigurationManager.AppSettings[key]);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This solves one of the problems of direct usage of the <code>ConfigurationManager</code>, namely <strong>Tight Coupling</strong>.  By using an interface we can now use <a href="http://nsubstitute.github.io/">NSubstitute</a> or similar mocking library to disconnect tests from <code>app.config</code> and <code>web.config</code>.</p>
<p>It doesn&rsquo;t really solve the <strong>Typing</strong> issue however, as the casting is only done on fetching the configuration value, and so errors in casting still only happen when the code is executed.  It also doesn&rsquo;t really solve the <strong>Discoverability</strong> issue either - you can now tell if a class requires configuration values, but you cannot tell which values it requires from outside.</p>
<p>The other issues such as <strong>Repeatablility</strong>, <strong>Late Errors</strong> and <strong>Consistency</strong> are not addressed by this method at all.</p>
<h2 id="solution-version-2">Solution: Version 2</h2>
<p>My preferred method of solving all of these problems is to replace direct usage of <code>ConfigurationManager</code> with an interface &amp; class pair, but with the abstraction being application specific, rather than general.  For example, at application might have this as the interface:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IConfiguration</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> ApplicationName { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    Uri RemoteHost { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> TimeoutSeconds { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This would then be implemented by a concrete class:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Configuration</span> : IConfiguration
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> ApplicationName { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Uri RemoteHost { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> TimeoutSeconds { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Configuration()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        ApplicationName = ConfigurationManager.AppSetting[nameof(ApplicationName)];
</span></span><span style="display:flex;"><span>        RemoteHost = <span style="color:#66d9ef">new</span> Uri(ConfigurationManager.AppSetting[nameof(RemoteHost)]);
</span></span><span style="display:flex;"><span>        TimeoutSeconds = (<span style="color:#66d9ef">int</span>)ConfigurationManager.AppSetting[nameof(TimeoutSeconds)];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This method solves all of the first listed problems:</p>
<p><strong>Repeated</strong> and <strong>Consistency</strong> are solved, as the only repetition is the usage of configuration properties themselves.  <strong>Visibility</strong> is solved as you can now either use &ldquo;Find Usages&rdquo; on a property, or you can split your configuration <code>interface</code> to have a specific set of properties for each class which is going to need configuration.</p>
<p><strong>Typing</strong> and <strong>Late errors</strong> are solved as all properties are populated on the first creation of the class, and exceptions are thrown immediately if there are any type errors.</p>
<p><strong>Tight Coupling</strong> is also solved, as you can fake the entire <code>IConfiguration</code> interface for testing with, or just the properties required for a given test.</p>
<p>The only down side is the amount of writing needed to make the constructor, and having to do the same code in every application you write.</p>
<h2 id="solution-version-3">Solution: Version 3</h2>
<p>The third solution works exactly as the 2nd solution, but uses the <a href="https://www.nuget.org/packages/stronk">Stronk Nuget library</a> to populate the configuration object.  <strong>Stronk</strong> takes all the heavy lifting out of configuration reading, and works for most cases with zero extra configuration required.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IConfiguration</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> ApplicationName { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    Uri RemoteHost { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> TimeoutSeconds { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Configuration</span> : IConfiguration
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> ApplicationName { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Uri RemoteHost { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> TimeoutSeconds { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Configuration()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.FromAppConfig(); <span style="color:#75715e">//this.FromWebConfig() works too</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Stronk</strong> supports a lot of customisation.  For example, if you wanted to be able to handle populating properties of type <code>MailAddress</code>, you can add it like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Configuration()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> mailConverter = <span style="color:#66d9ef">new</span> LambdaValueConverter&lt;MailAddress&gt;(val =&gt; <span style="color:#66d9ef">new</span> MailAddress(val));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> options = <span style="color:#66d9ef">new</span> StronkOptions();
</span></span><span style="display:flex;"><span>    options.Add(mailConverter);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.FromAppConfig(options);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You can also replace (or supplement):</p>
<ul>
<li>How it detects which properties to populate</li>
<li>How to populate a property</li>
<li>How to pick a value from the configuration source for a given property</li>
<li>How to convert a value for a property</li>
<li>Where configuration is read from</li>
</ul>
<p>A few features to come soon:</p>
<ul>
<li>Additional types supported &ldquo;out of the box&rdquo; (such as <code>TimeSpan</code> and <code>DateTime</code>)</li>
<li>Exception policy controlling:
<ul>
<li>What happens on not being able to find a value in the configuration source</li>
<li>What happens on not being able to find a converter</li>
<li>What happens on a converter throwing an exception</li>
</ul>
</li>
</ul>
<p>I hope you find it useful.  <a href="https://github.com/Pondidum/Stronk/">Stronk&rsquo;s Source is available on Github</a>, and contributions are welcome :)</p>
]]></content:encoded></item></channel></rss>