<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>code on Andy Dote</title><link>https://andydote.co.uk/tags/code/</link><description>Recent content in code on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 16 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/code/rss.xml" rel="self" type="application/rss+xml"/><item><title>Against SemVer</title><link>https://andydote.co.uk/2018/12/16/against-semver/</link><pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/12/16/against-semver/</guid><description>Well, for Applications &amp;amp; Services at least. For libraries, SemVer is the way to go, assuming you can agree on what a breaking change is defined as.
But when it comes to Applications (or SaaS products, websites, etc.) SemVer starts to break down. The problem starts with the most obvious: What is a breaking change? How about a minor change?
What&amp;rsquo;s in a change? For example, if we were to change the UI of a web application, which caused no backend changes, from the user perspective it is probably a breaking change, but not from the developers perspective.</description></item><item><title>Stopping Caring...</title><link>https://andydote.co.uk/2018/12/08/stopping-caring/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/12/08/stopping-caring/</guid><description>&amp;hellip;about GitHub open source commit streak.
This is, I think, partially triggered by Marc Gravell&amp;rsquo;s post. I currently have had a GitHub commit streak going on 1878 days. The other night I realised, that I don&amp;rsquo;t care about it any more, and more so, I&amp;rsquo;m not sure why I did to start with.
I didn&amp;rsquo;t even mean to start doing it. I just noticed one day that I had done something every day for a couple of weeks, and vaguely wondered how long I could keep that up for.</description></item><item><title>Don't write Frameworks, write Libraries</title><link>https://andydote.co.uk/2017/04/16/dont-write-frameworks-write-libraries/</link><pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/04/16/dont-write-frameworks-write-libraries/</guid><description>Programmers have a fascination with writing frameworks for some reason. There are many problems with writing frameworks:
Opinions Frameworks are opinionated, and will follow their author&amp;rsquo;s opinions on how things should be done, such as application structure, configuration, and methodology. The problem this gives is that not everyone will agree with the author, or their framework&amp;rsquo;s opinions. Even if they really like part of how the framework works, they might not like another part, or might not be able to rewrite their application to take advantage of the framework.</description></item><item><title>Finally, I have used a Model View Controller!</title><link>https://andydote.co.uk/2009/05/18/finally-i-have-used-a-model-view-controller/</link><pubDate>Mon, 18 May 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/05/18/finally-i-have-used-a-model-view-controller/</guid><description>Today I actually managed to use a Model View Controller in an application. I have been looking for an opportunity to use one fore a while, and have been reading a lot about them (Jeremy Miller&amp;rsquo;s Build Your Own CAB Series has been a very good guide).
The type of MVC I like most (so far) is the Passive View type, where the View does almost nothing, and has no link to the Model:</description></item></channel></rss>