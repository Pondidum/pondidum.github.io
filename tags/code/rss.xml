<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>code on Andy Dote</title><link>https://andydote.co.uk/tags/code/</link><description>Recent content in code on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 16 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/code/rss.xml" rel="self" type="application/rss+xml"/><item><title>Against SemVer</title><link>https://andydote.co.uk/2018/12/16/against-semver/</link><pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/12/16/against-semver/</guid><description>Well, for Applications &amp;amp; Services at least. For libraries, SemVer is the way to go, assuming you can agree on what a breaking change is defined as.
But when it comes to Applications (or SaaS products, websites, etc.) SemVer starts to break down. The problem starts with the most obvious: What is a breaking change? How about a minor change?
What&amp;rsquo;s in a change? For example, if we were to change the UI of a web application, which caused no backend changes, from the user perspective it is probably a breaking change, but not from the developers perspective.</description><content:encoded><![CDATA[<p>Well, for Applications &amp; Services at least.  For libraries, SemVer is the way to go, assuming you can agree on what a breaking change is defined as.</p>
<p>But when it comes to Applications (or SaaS products, websites, etc.) SemVer starts to break down.  The problem starts with the most obvious:  What is a breaking change? How about a minor change?</p>
<h2 id="whats-in-a-change">What&rsquo;s in a change?</h2>
<p>For example, if we were to change the UI of a web application, which caused no backend changes, from the user perspective it is probably a breaking change, but not from the developers perspective.
What about changing a backend process, for example, the way the service is billed?  How about adding a new step in the middle of an existing process?</p>
<p>These are all hard questions to answer, and I imagine there are many many edge cases and things which are not clear as to what level of change they are.</p>
<h2 id="clash-of-the-versions">Clash of the Versions</h2>
<p>The next problem stems from the fact that we don&rsquo;t (often) do Trunk Based Development for applications.  We have a long-lived (1-2 weeks) feature branch, which might get pushed to a test environment multiple times as tasks are completed.  If we SemVer these deployments, when a bug fix happens on the master branch, we can end up with a version clash, and can&rsquo;t deploy.</p>
<p><img loading="lazy" src="semver-clash.png" alt="branching, showing a clash of SemVer by having concurrent branches"  />
</p>
<p>While this is a problem, we can solve it easily - we can use the <code>-pre</code> or <code>-beta</code> suffix for the feature branch, and then remove the suffix and increment the version number when the feature is fully deployed.  This, however, is adding a little more complexity to the process - mostly on the human side of things this time.</p>
<p>I would rather avoid the complexity (machine and human) entirely so instead opt for a different solution: Dates.</p>
<h2 id="how-about-a-date">How about a Date?</h2>
<p>Date stamps to the rescue! Our builds now use the following format:</p>
<pre tabindex="0"><code>&lt;year&gt;.&lt;month&gt;.&lt;day&gt;.&lt;build_number&gt;
</code></pre><p>We did consider using the time (represented as <code>.hhmm</code>) instead of the <code>build_number</code>, but it would have been possible to clash if two builds triggered at the same minute, and the <code>build_number</code> is guaranteed uniqueness.  By using an automatic format, we gain a few advantages:</p>
<ul>
<li>No confusion on whether a change is a major, minor, or patch</li>
<li>No clashes on multiple branches</li>
<li>No human input required (marking things as <code>pre</code> or <code>beta</code>)</li>
<li>Answers the &ldquo;when was this built&rdquo; question</li>
</ul>
<h2 id="what-about-the-libraries">What about the libraries?</h2>
<p>The libraries have a very different set of requirements, and one versioning scheme doesn&rsquo;t seem to fit both very well, so there is no point trying to force the matter.</p>
]]></content:encoded></item><item><title>Stopping Caring...</title><link>https://andydote.co.uk/2018/12/08/stopping-caring/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/12/08/stopping-caring/</guid><description>&amp;hellip;about GitHub open source commit streak.
This is, I think, partially triggered by Marc Gravell&amp;rsquo;s post. I currently have had a GitHub commit streak going on 1878 days. The other night I realised, that I don&amp;rsquo;t care about it any more, and more so, I&amp;rsquo;m not sure why I did to start with.
I didn&amp;rsquo;t even mean to start doing it. I just noticed one day that I had done something every day for a couple of weeks, and vaguely wondered how long I could keep that up for.</description><content:encoded><![CDATA[<p>&hellip;about GitHub open source commit streak.</p>
<p>This is, I think, partially triggered by <a href="https://blog.marcgravell.com/2018/12/a-thanksgiving-carol.html">Marc Gravell&rsquo;s post</a>.  I currently <del>have</del> had a GitHub commit streak going on 1878 days.  The other night I realised, that I don&rsquo;t care about it any more, and more so, I&rsquo;m not sure why I did to start with.</p>
<p>I didn&rsquo;t even mean to start doing it.  I just noticed one day that I had done something every day for a couple of weeks, and vaguely wondered how long I could keep that up for.  It turns out the answer is &ldquo;quite a while&rdquo;.  For the most part, it was easy to do - just a small commit a day, it only takes a few minutes right?  But more and more often, I noticed that it was having a negative effect on <em>what</em> I was writing.</p>
<p>For instance, I wanted to learn about <a href="https://www.nomadproject.io/">Nomad</a>, but had been putting it off, as it wouldn&rsquo;t involve making any public commits.  So each time I came to start, I couldn&rsquo;t until I had done a public commit, and once that commit had was done, so was my motivation.  Which meant learning Nomad didn&rsquo;t happen for a long time.</p>
<p>It also affected what I did with old repositories on GitHub -  I wanted to remove some which serve no useful purpose any more, but I couldn&rsquo;t do that either, as that would remove their commits from the streak.  Likewise, I have a new version of my <a href="https://github.com/Pondidum/12factor-demo">TwelveFactor</a> repository, but I really should remove the old version. But doing so would remove the commits from the streak too.  So, as you might have guessed, I haven&rsquo;t done that either.  Maybe soon.  I have a lot of writing to go with it too.</p>
<p>On the subject of writing, that also suffered.  It takes a lot of effort to sit down and start writing a post, but usually, the words flow pretty smoothly once I am going.  But knowing I need to spare some energy for the commit of the day makes it even harder to start writing, so I just haven&rsquo;t been.  There are a lot of drafts with bullet-point lists waiting though, so maybe they will begin to see the light of day soon.</p>
<p>The irony is not lost on me that making this post will increase the commit count (GitHub pages based blog), so I am not committing (or finishing) this post until at least a day has passed.</p>
<p>I decided on the 7th December 2018 not to make any commits.  After that had happened - the act of deciding mind you, not the day itself, I felt a lot better.  I do not need to do anything. I can go and finish the book a friend recommended me.  I can spend my evenings learning about things I want to.  Or just do nothing some evenings.</p>
<p>No more worrying about public commits.  It&rsquo;s just not worth it.</p>
]]></content:encoded></item><item><title>Don't write Frameworks, write Libraries</title><link>https://andydote.co.uk/2017/04/16/dont-write-frameworks-write-libraries/</link><pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2017/04/16/dont-write-frameworks-write-libraries/</guid><description>Programmers have a fascination with writing frameworks for some reason. There are many problems with writing frameworks:
Opinions Frameworks are opinionated, and will follow their author&amp;rsquo;s opinions on how things should be done, such as application structure, configuration, and methodology. The problem this gives is that not everyone will agree with the author, or their framework&amp;rsquo;s opinions. Even if they really like part of how the framework works, they might not like another part, or might not be able to rewrite their application to take advantage of the framework.</description><content:encoded><![CDATA[<p>Programmers have a fascination with writing frameworks for some reason.  There are many problems with writing frameworks:</p>
<h3 id="opinions">Opinions</h3>
<p>Frameworks are opinionated, and will follow their author&rsquo;s opinions on how things should be done, such as application structure, configuration, and methodology.  The problem this gives is that not everyone will agree with the author, or their framework&rsquo;s opinions.  Even if they really like part of how the framework works, they might not like another part, or might not be able to rewrite their application to take advantage of the framework.</p>
<h3 id="configurability">Configurability</h3>
<p>The level of configuration available in a framework is almost never correct.  Not only is there either too little or too much configuration options, but how the configuration is done can cause issues.  Some developers love conventions, other prefer explicit configuration.</p>
<h3 id="development">Development</h3>
<p>Frameworks suffer from the danger of not solving the right problem, or missing the problem due to how long it took to implement the framework.  This is compounded by <em>when</em> a framework is decided to be developed, which is often way before the general case is even recognised.  Writing a framework before writing your project is almost certain to end up with a framework which either isn&rsquo;t suitable for the project, or isn&rsquo;t suitable for any other projects.</p>
<h2 id="what-about-a-library-or-two">What about a library or two?</h2>
<p>If you want a higher chance at success, reduce your scope and write a library.</p>
<p>A library is usually a small unit of functionality, and does one thing and does it well (sound like microservices or Bounded Contexts much?).  This gives it a higher chance of success, as the opinions of the library are going to effect smaller portions of peoples applications.  It won&rsquo;t dictate their entire app structure.  They can opt in to using the libraries they like, rather than all the baggage which comes with a framework.</p>
<h2 id="but-i-really-want-to-write-a-framework">But I really want to write a framework</h2>
<p>Resist, if you can!  Perhaps a framework will evolve from your software, perhaps not.  What I have found to be a better path is to create libraries which work on their own, but also work well with each other.  This can make this more difficult, but it also give you the ability to release libraries as they are completed, rather than waiting for an entire framework to be &ldquo;done&rdquo;.</p>
<h2 id="some-examples">Some examples</h2>
<p>These are some libraries I have written which solve small problems in an isolated manner</p>
<ul>
<li><a href="https://github.com/pondidum/stronk">Stronk</a> - A library to populate strong typed configuration objects.</li>
<li><a href="https://github.com/pondidum/FileSystem">FileSystem</a> - Provides a FileSystem abstraction,  with decorators and an InMemory FileSystem implementation.</li>
<li><a href="https://github.com/pondidum/Finite">Finite</a> - a Finite State Machine library.</li>
<li><a href="https://github.com/pondidum/conifer">Conifer</a> - Strong typed, Convention based routing for WebAPI, also with route lookup abilities</li>
</ul>
<p>So why not write some libraries?</p>
]]></content:encoded></item><item><title>Finally, I have used a Model View Controller!</title><link>https://andydote.co.uk/2009/05/18/finally-i-have-used-a-model-view-controller/</link><pubDate>Mon, 18 May 2009 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2009/05/18/finally-i-have-used-a-model-view-controller/</guid><description>Today I actually managed to use a Model View Controller in an application. I have been looking for an opportunity to use one fore a while, and have been reading a lot about them (Jeremy Miller&amp;rsquo;s Build Your Own CAB Series has been a very good guide).
The type of MVC I like most (so far) is the Passive View type, where the View does almost nothing, and has no link to the Model:</description><content:encoded><![CDATA[<p>Today I actually managed to use a Model View Controller in an application.  I have been looking for an opportunity to use one fore a while, and have been reading a lot about them (Jeremy Miller&rsquo;s <a href="http://codebetter.com/blogs/jeremy.miller/archive/2007/07/25/the-build-your-own-cab-series-table-of-contents.aspx">Build Your Own CAB Series</a> has been a very good guide).</p>
<p>The type of MVC I like most (so far) is the <a href="http://martinfowler.com/eaaDev/PassiveScreen.html">Passive View</a> type, where the View does almost nothing, and has no link to the Model:</p>
<p><img loading="lazy" src="passive-view.png" alt="&amp;ldquo;Passive View&amp;rdquo; Model View Presenter"  />
<br />
Image Source: <a href="http://msdn.microsoft.com/en-us/library/cc304760.aspx">Microsoft</a></p>
<p>There are two main ways of wiring your View to the Presenter/Controller: Events and Interfaces.  The advantage of using an Interface is that they are easier to test (using <a href="http://hibernatingrhinos.com/oss/rhino-mocks">Rhino Mocks</a>), but as work does not do unit testing (I&rsquo;m working on it!), that didn&rsquo;t matter too much.  I used events in this case simply because I prefer them.</p>
<p>As we already have a data layer, and I was just designing a form to expose some functionality I didn&rsquo;t really use a Model either (unless a DAL counts, and I&rsquo;m not sure it does).</p>
<p>In the end my Controller and Form looked something like this (much snipped, but you get the idea):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vb" data-lang="vb"><span style="display:flex;"><span> <span style="color:#66d9ef">Public</span> <span style="color:#66d9ef">Class</span> <span style="color:#a6e22e">SearchController</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Private</span> _control <span style="color:#f92672">As</span> ISynchronizeInvoke
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Private</span> <span style="color:#66d9ef">Delegate</span> <span style="color:#66d9ef">Sub</span> <span style="color:#a6e22e">OnSearchDelegate</span>(<span style="color:#66d9ef">ByVal</span> sender <span style="color:#f92672">As</span> <span style="color:#66d9ef">Object</span>, <span style="color:#66d9ef">ByVal</span> e <span style="color:#f92672">As</span> SearchEventArgs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Public</span> <span style="color:#66d9ef">Event</span> SearchStarted(<span style="color:#66d9ef">ByVal</span> sender <span style="color:#f92672">As</span> <span style="color:#66d9ef">Object</span>, <span style="color:#66d9ef">ByVal</span> e <span style="color:#f92672">As</span> SearchEventArgs)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Public</span> <span style="color:#66d9ef">Event</span> SearchProgress(<span style="color:#66d9ef">ByVal</span> sender <span style="color:#f92672">As</span> <span style="color:#66d9ef">Object</span>, <span style="color:#66d9ef">ByVal</span> e <span style="color:#f92672">As</span> SearchEventArgs)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Public</span> <span style="color:#66d9ef">Event</span> SearchFinished(<span style="color:#66d9ef">ByVal</span> sender <span style="color:#f92672">As</span> <span style="color:#66d9ef">Object</span>, <span style="color:#66d9ef">ByVal</span> e <span style="color:#f92672">As</span> SearchEventArgs)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Public</span> <span style="color:#66d9ef">Sub</span> <span style="color:#a6e22e">New</span>(<span style="color:#66d9ef">ByVal</span> parent <span style="color:#f92672">As</span> ISynchronizeInvoke)
</span></span><span style="display:flex;"><span>        _control <span style="color:#f92672">=</span> parent
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">End</span> <span style="color:#66d9ef">Sub</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Private</span> <span style="color:#66d9ef">Sub</span> <span style="color:#a6e22e">OnSearchStarted</span>(<span style="color:#66d9ef">ByVal</span> sender <span style="color:#f92672">As</span> <span style="color:#66d9ef">Object</span>, <span style="color:#66d9ef">ByVal</span> e <span style="color:#f92672">As</span> SearchEventArgs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">If</span> _control.InvokeRequired <span style="color:#66d9ef">Then</span>
</span></span><span style="display:flex;"><span>            _control.Invoke(<span style="color:#66d9ef">New</span> OnSearchDelegate(<span style="color:#f92672">AddressOf</span> OnSearchStarted), <span style="color:#66d9ef">New</span> <span style="color:#66d9ef">Object</span>() {sender, e})
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">Else</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">RaiseEvent</span> SearchStarted(sender, e)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">End</span> <span style="color:#66d9ef">If</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">End</span> <span style="color:#66d9ef">Sub</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&#39;snip for other events...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Public</span> <span style="color:#66d9ef">Sub</span> <span style="color:#a6e22e">SetPhrase</span>(<span style="color:#66d9ef">ByVal</span> phrase <span style="color:#f92672">As</span> <span style="color:#66d9ef">String</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">&#39;...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">End</span> <span style="color:#66d9ef">Sub</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Public</span> <span style="color:#66d9ef">Sub</span> <span style="color:#a6e22e">Search</span>()
</span></span><span style="display:flex;"><span>        OnSearchStarted(<span style="color:#66d9ef">Me</span>, <span style="color:#66d9ef">New</span> SearchEventArgs())
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">&#39;...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">End</span> <span style="color:#66d9ef">Sub</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&#39;...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">End</span> <span style="color:#66d9ef">Class</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">Public</span> <span style="color:#66d9ef">Class</span> <span style="color:#a6e22e">frmSearch</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Private</span> _controller <span style="color:#f92672">as</span> <span style="color:#66d9ef">new</span> SearchController(<span style="color:#66d9ef">Me</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Private</span> <span style="color:#66d9ef">Sub</span> <span style="color:#a6e22e">btnSearch_Click</span>(<span style="color:#66d9ef">ByVal</span> sender <span style="color:#f92672">As</span> System.Object, <span style="color:#66d9ef">ByVal</span> e <span style="color:#f92672">As</span> System.EventArgs)
</span></span><span style="display:flex;"><span>        _controller.SetPhrase(txtInput.Text.Trim)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">End</span> <span style="color:#66d9ef">Sub</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">Private</span> <span style="color:#66d9ef">Sub</span> <span style="color:#a6e22e">controller_SearchStarted</span>(<span style="color:#66d9ef">ByVal</span> sender <span style="color:#f92672">As</span> <span style="color:#66d9ef">Object</span>, <span style="color:#66d9ef">ByVal</span> e <span style="color:#f92672">As</span> SearchEventArgs)
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">&#39;...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">End</span> <span style="color:#66d9ef">Sub</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&#39;...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">End</span> <span style="color:#66d9ef">Class</span>
</span></span></code></pre></div><p>Hopefully I will get the opportunity to use MVC/MVP more completely in the future.</p>
]]></content:encoded></item></channel></rss>