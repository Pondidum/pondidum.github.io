<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>validation on Andy Dote</title><link>https://andydote.co.uk/tags/validation/</link><description>Recent content in validation on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 08 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/validation/rss.xml" rel="self" type="application/rss+xml"/><item><title>Semantic Configuration Validation: Earlier</title><link>https://andydote.co.uk/2018/09/08/semantic-configuration-validation-earlier/</link><pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/09/08/semantic-configuration-validation-earlier/</guid><description>After my previous post on Validating Your Configuration, one of my colleagues made an interesting point, paraphrasing:
I want to know if the configuration is valid earlier than that. At build time preferably. I don&amp;rsquo;t want my service to not start if part of it is invalid.
There are two points here, namely when to validate, and what to do with the results of validation.
Handling Validation Results If your configuration is invalid, you&amp;rsquo;d think the service should fail to start, as it might be configured in a dangerous manner.</description><content:encoded><![CDATA[<p>After my previous post on <a href="/2018/08/26/validate-configuration/">Validating Your Configuration</a>, one of my colleagues made an interesting point, paraphrasing:</p>
<blockquote>
<p>I want to know if the configuration is valid earlier than that.  At build time preferably.  I don&rsquo;t want my service to not start if part of it is invalid.</p>
</blockquote>
<p>There are two points here, namely when to validate, and what to do with the results of validation.</p>
<h2 id="handling-validation-results">Handling Validation Results</h2>
<p>If your configuration is invalid, you&rsquo;d think the service should fail to start, as it might be configured in a dangerous manner.  While this makes sense for some service, others might need to work differently.</p>
<p>Say you have an API which supports both writing and reading of a certain type of resource.  The read will return you a resource of some form, and the write side will trigger processing of a resource (and return you <a href="https://httpstatuses.com/202">a 202 Accepted, obviously</a>).</p>
<p>What happens if your configuration just affects the write side of the API? Should you prevent people from reading too?  Probably not, but again it depends on your domain as to what makes sense.</p>
<h2 id="validating-at-build-time">Validating at Build Time</h2>
<p>This is the far more interesting point (to me).  How can we modify our build to validate that the environment&rsquo;s configuration is valid?  We have the code to do the validation: we have automated tests, and we have a configuration validator class (in this example, implemented using <a href="https://github.com/JeremySkinner/FluentValidation">FluentValidation</a>).</p>
<p>Depending on where your master configuration is stored, the next step can get much harder.</p>
<h3 id="local-configuration">Local Configuration</h3>
<p>If your configuration is in the current repository (<a href="/2018/08/07/managing-consul-appsettings/">as it should be</a>) then it will be no problem to read.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConfigurationTests</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> IEnumerable&lt;<span style="color:#66d9ef">object</span>[]&gt; AvailableEnvironments =&gt; Enum
</span></span><span style="display:flex;"><span>        .GetValues(<span style="color:#66d9ef">typeof</span>(Environments))
</span></span><span style="display:flex;"><span>        .Cast&lt;Environments&gt;()
</span></span><span style="display:flex;"><span>        .Select(e =&gt; <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">object</span>[] { e });
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [Theory]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [MemberData(nameof(AvailableEnvironments))]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Environment_specific_configuration_is_valid(Environments environment)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> ConfigurationBuilder()
</span></span><span style="display:flex;"><span>            .AddJsonFile(<span style="color:#e6db74">&#34;config.json&#34;</span>)
</span></span><span style="display:flex;"><span>            .AddJsonFile(<span style="color:#e6db74">$&#34;config.{environment}.json&#34;</span>, optional: <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>            .Build()
</span></span><span style="display:flex;"><span>            .Get&lt;AppConfiguration&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> validator = <span style="color:#66d9ef">new</span> AppConfigurationValidator();
</span></span><span style="display:flex;"><span>        validator.ValidateAndThrow(config);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Given the following two configuration files, we can make it pass and fail:</p>
<p><code>config.json:</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Callback&#34;</span>: <span style="color:#e6db74">&#34;https://localhost&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Timeout&#34;</span>: <span style="color:#e6db74">&#34;00:00:30&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;MaxRetries&#34;</span>: <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>config.local.json:</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;MaxRetries&#34;</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="remote-configuration">Remote Configuration</h3>
<p>But what if your configuration is not in the local repository, or at least, not completely there?  For example, have a lot of configuration in Octopus Deploy, and would like to validate that at build time too.</p>
<p>Luckily Octopus has a Rest API (and <a href="https://www.nuget.org/packages/Octopus.Client/">acompanying client</a>)  which you can use to query the values.  All we need to do is replace the <code>AddJsonFile</code> calls with an <code>AddInMemoryCollection()</code> and populate a dictionary from somewhere:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[Theory]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">[MemberData(nameof(AvailableEnvironments))]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task Octopus_environment_configuration_is_valid(Environments environment)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> variables = <span style="color:#66d9ef">await</span> FetchVariablesFromOctopus(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;MyDeploymentProjectName&#34;</span>,
</span></span><span style="display:flex;"><span>        environment);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> ConfigurationBuilder()
</span></span><span style="display:flex;"><span>        .AddInMemoryCollection(variables)
</span></span><span style="display:flex;"><span>        .Build()
</span></span><span style="display:flex;"><span>        .Get&lt;AppConfiguration&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> validator = <span style="color:#66d9ef">new</span> AppConfigurationValidator();
</span></span><span style="display:flex;"><span>    validator.ValidateAndThrow(config);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Reading the variables from Octopus&rsquo; API requires a bit of work as you don&rsquo;t appear to be able to ask for all variables which would apply if you deployed to a specific environment, which forces you into building the logic yourself.  However, if you are just using Environment scoping, it shouldn&rsquo;t be too hard.</p>
<h3 id="time-delays">Time Delays</h3>
<p>Verifying the configuration at build time when your state is fetched from a remote store is not going to solve all your problems, as this little diagram illustrates:</p>
<p><img loading="lazy" src="versioning-time.png" alt="test pass, a user changes value, deployment happens, startup fails"  />
</p>
<p>You need to validate in both places: early on in your process, and on startup.  How you handle the configuration being invalid doesn&rsquo;t have to be the same in both places:</p>
<ul>
<li>In the build/test phase, fail the build</li>
<li>On startup, raise an alarm, but start if reasonable</li>
</ul>
<p>Again, how you handle the configuration errors when your application is starting is down to your domain, and what your application does.</p>
]]></content:encoded></item><item><title>Validate Your Configuration</title><link>https://andydote.co.uk/2018/08/26/validate-configuration/</link><pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/08/26/validate-configuration/</guid><description>As I have written many times before, your application&amp;rsquo;s configuration should be strongly typed and validated that it loads correctly at startup.
This means not only that the source values (typically all represented as strings) can be converted to the target types (int, Uri, TimeSpan etc) but that the values are semantically valid too.
For example, if you have a web.config file with the following AppSetting, and a configuration class to go with it:</description><content:encoded><![CDATA[<p>As I have <a href="/2016/12/06/strong-type-all-the-configurations/">written</a> many <a href="/2017/11/09/configuration-composition/">times</a> before, your application&rsquo;s configuration should be strongly typed and validated that it loads correctly at startup.</p>
<p>This means not only that the source values (typically all represented as strings) can be converted to the target types (<code>int</code>, <code>Uri</code>, <code>TimeSpan</code> etc) but that the values are <strong>semantically valid</strong> too.</p>
<p>For example, if you have a <code>web.config</code> file with the following <code>AppSetting</code>, and a configuration class to go with it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;configuration&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;appSettings&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;add</span> <span style="color:#a6e22e">key=</span><span style="color:#e6db74">&#34;Timeout&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;20&#34;</span> <span style="color:#f92672">/&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/appSettings&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/configuration&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Configuration</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> TimeSpan Timeout { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can now load the configuration using <a href="https://github.com/pondidum/stronk">Stronk</a> (or Microsoft.Extensions.Configuration if you&rsquo;re on dotnet core), and inspect the contents of the <code>Timeout</code> property:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> StronkConfig().Build&lt;Configuration&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Console.WriteLine(config.Timeout); <span style="color:#75715e">// 20 days, 0 hours, 0 minutes, 0 seconds</span>
</span></span></code></pre></div><p>Oops.  <strong>A timeout of 20 days is probably a <em>little</em> on the high side!</strong>  The reason this happened is that to parse the string value we use <code>TimeSpan.Parse(value)</code>, which will interpret it as days if no other units are specified.</p>
<h2 id="how-to-validate">How to validate?</h2>
<p>There are several ways we could go about fixing this, from changing to use <code>TimeSpan.ParseExact</code>, but then we need to provide the format string from somewhere, or force people to use Stronk&rsquo;s own decision on format strings.</p>
<p>Instead, we can just write some validation logic ourselves.  If it is a simple configuration, then writing a few statements inline is probably fine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> StronkConfig()
</span></span><span style="display:flex;"><span>    .Validate.Using&lt;Configuration&gt;(c =&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (c.Timeout &lt; TimeSpan.FromSeconds(<span style="color:#ae81ff">60</span>) &amp;&amp; c.Timeout &gt; TimeSpan.Zero)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> ArgumentOutOfRangeException(nameof(c.Timeout), <span style="color:#e6db74">$&#34;Must be greater than 0, and less than 1 minute&#34;</span>);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    .Build&lt;Configuration&gt;();
</span></span></code></pre></div><p>But we can make it much clearer by using a validation library such as <a href="https://github.com/JeremySkinner/FluentValidation">FluentValidation</a>, to do the validation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> config = <span style="color:#66d9ef">new</span> StronkConfig()
</span></span><span style="display:flex;"><span>    .Validate.Using&lt;Configuration&gt;(c =&gt; <span style="color:#66d9ef">new</span> ConfigurationValidator().ValidateAndThrow(c))
</span></span><span style="display:flex;"><span>    .Build&lt;Configuration&gt;();
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConfigurationValidator</span> : AbstractValidator&lt;Configuration&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">readonly</span> HashSet&lt;<span style="color:#66d9ef">string</span>&gt; ValidHosts = <span style="color:#66d9ef">new</span> HashSet&lt;<span style="color:#66d9ef">string</span>&gt;(
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">new</span>[] { <span style="color:#e6db74">&#34;localhost&#34;</span>, <span style="color:#e6db74">&#34;internal&#34;</span> },
</span></span><span style="display:flex;"><span>        StringComparer.OrdinalIgnoreCase);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ConfigurationValidator()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        RuleFor(x =&gt; x.Timeout)
</span></span><span style="display:flex;"><span>            .GreaterThan(TimeSpan.Zero)
</span></span><span style="display:flex;"><span>            .LessThan(TimeSpan.FromMinutes(<span style="color:#ae81ff">2</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        RuleFor(x =&gt; x.Callback)
</span></span><span style="display:flex;"><span>            .Must(url =&gt; url.Scheme == Uri.UriSchemeHttps)
</span></span><span style="display:flex;"><span>            .Must(url =&gt; ValidHosts.Contains(url.Host));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, not only are we checking the <code>Timeout</code> is in a valid range, but that our <code>Callback</code> is HTTPS and that it is going to a domain on an Allow-List.</p>
<h2 id="what-should-i-validate">What should I validate?</h2>
<p>Everything?  If you have properties controlling the number of threads an application uses, probably checking it&rsquo;s a positive number, and less than <code>x * Environment.ProcessorCount</code> (for some value of x) is probably a good idea.</p>
<p>If you are specifying callback URLs in the config file, checking they are in the right domain/scheme would be a good idea (e.g. must be https, must be in a domain allow-list).</p>
<p>How do you check your configuration isn&rsquo;t going to bite you when an assumption turns out to be wrong?</p>
]]></content:encoded></item></channel></rss>