<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>microservices on Andy Dote</title><link>https://andydote.co.uk/tags/microservices/</link><description>Recent content in microservices on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 18 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/microservices/rss.xml" rel="self" type="application/rss+xml"/><item><title>Expand Contract for Databases and Services</title><link>https://andydote.co.uk/2023/05/18/expand-contract/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2023/05/18/expand-contract/</guid><description>I haven&amp;rsquo;t seen Expand-Contract written about in some years, and I think it is a great way of performing database schema migrations without the need for application downtime. I also realised that it also applies to microservices and service-to-service communication in general.
The Easy Example One of the two examples given is wanting to change how an address is stored in a database. The schema starts off looking like this:</description><content:encoded><![CDATA[<p>I haven&rsquo;t seen Expand-Contract written about in some years, and I think it is a great way of performing database schema migrations without the need for application downtime.  I also realised that it also applies to microservices and service-to-service communication in general.</p>
<h2 id="the-easy-example">The Easy Example</h2>
<p>One of the two examples given is wanting to change how an address is stored in a database.  The schema starts off looking like this:</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>address</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Reaktor</td>
<td>Läntinen Rantakatu 15, 20100, Turku, Finland</td>
</tr>
</tbody>
</table>
<p>The requirement is that the schema is changed to look like this:</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>street</th>
<th>postcode</th>
<th>town</th>
<th>country</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Reaktor</td>
<td>Läntinen Rantakatu 15</td>
<td>20100</td>
<td>Turku</td>
<td>Finland</td>
</tr>
</tbody>
</table>
<p>The way you would traditionally achieve this is with a migration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> buildings
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">column</span> street text,
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">column</span> postcode text, <span style="color:#75715e">-- postcodes can start with a 0, so store them as text
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">column</span> town text,
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">add</span> <span style="color:#66d9ef">column</span> country text
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">update</span> buildings <span style="color:#66d9ef">set</span>
</span></span><span style="display:flex;"><span>  street    <span style="color:#f92672">=</span> split_part(address, <span style="color:#e6db74">&#39;,&#39;</span>, <span style="color:#ae81ff">1</span>),
</span></span><span style="display:flex;"><span>  postcode  <span style="color:#f92672">=</span> split_part(address, <span style="color:#e6db74">&#39;,&#39;</span>, <span style="color:#ae81ff">2</span>),
</span></span><span style="display:flex;"><span>  town      <span style="color:#f92672">=</span> split_part(address, <span style="color:#e6db74">&#39;,&#39;</span>, <span style="color:#ae81ff">3</span>),
</span></span><span style="display:flex;"><span>  country   <span style="color:#f92672">=</span> split_part(address, <span style="color:#e6db74">&#39;,&#39;</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">where</span>
</span></span><span style="display:flex;"><span>  address <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">alter</span> <span style="color:#66d9ef">table</span> buildings
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">drop</span> <span style="color:#66d9ef">column</span> address
</span></span></code></pre></div><p>The problem with doing this is that the software using this table needs to be stopped while the update is happening; if the old version is running, the app will suddenly be trying to query a non-existing column.  If the new version is running, it will also be trying to query non-existing columns.</p>
<p>The process has to look like this:</p>
<ol>
<li>stop the old app</li>
<li>run the migration</li>
<li>start the new app</li>
</ol>
<p>Step 2 however can be long, especially if there is lots of data.  And what happens if you cannot have downtime for your service?</p>
<h2 id="the-expand-contract-way">The Expand Contract Way</h2>
<ol>
<li>add a new column to the table (nullable)</li>
<li>release new software
<ul>
<li>for reads, read both old and new columns; prefer data in new columns if it exists</li>
<li>for writes, write to new columns</li>
</ul>
</li>
<li>run a script to migrate any remaining data</li>
<li>release new software
<ul>
<li>only reads new columns</li>
<li>only writes new columns</li>
</ul>
</li>
<li>drop the old column</li>
</ol>
<p>This is more steps than the original method, but it means there is no downtime in your system.  Also, if you make step 2 write to both columns, the migration is easily reversible as no data is lost until the fourth step runs.
.</p>
<h2 id="what-about-apis--services">What about APIs?  Services?</h2>
<p>Expand Contract doesn&rsquo;t have to just be about services either.  For example, you have two services and have decided that part of service A should be migrated into service B, which has a similar system.  The process is broadly similar to the database example above but with service releases instead:</p>
<ol>
<li>Service B&rsquo;s data model is expanded</li>
<li>Service A is released:
<ul>
<li>for reads, read both it&rsquo;s own datastore and Service B.  Return result from B if available</li>
<li>for writes, write to it&rsquo;s own datastore and Service B</li>
</ul>
</li>
<li>Run a script/application to migrate the remaining data</li>
<li>Release Service A:
<ul>
<li>uses Service B for all operations</li>
</ul>
</li>
<li>Drop old data store tables</li>
</ol>
<p>As you can see, the process is broadly similar to when implementing a database change; the only difference is some coordination with the other service team.  The coordination is only to make sure their data model is ready; no need to release anything at the same time, and no downtime in either service is required.</p>
<h2 id="downsides">Downsides</h2>
<p>This may sound like a silver bullet, but as with all techniques, it has drawbacks.</p>
<p>The primary drawback is the extra steps required.  There are multiple releases, and data migrates lazily/on demand.  Then there is the extra step of migrating the remaining data, which is an additional effort.</p>
<p>The other drawback is a symptom of the first drawback: time.  It takes far longer to do expand-contract than to have a short downtime.  Depending on your application, short downtime might be the better choice to make.  For example, a queue processing service which doesn&rsquo;t have a synchronous API would probably be better choosing the downtime, assuming it can catch up with any messages which queue up during the downtime!</p>
]]></content:encoded></item><item><title>Service Mesh with Consul Connect (and Nomad)</title><link>https://andydote.co.uk/2020/05/04/service-mesh-consul-connect/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2020/05/04/service-mesh-consul-connect/</guid><description>When it comes to implementing a new feature in an application&amp;rsquo;s ecosystem, I don&amp;rsquo;t like spending my innovation tokens unless I have to, so I try not to add new tools to my infrastructure unless I really need them.
This same approach comes when I either want, need, or have been told, to implement a Service Mesh. This means I don&amp;rsquo;t instantly setup Istio. Not because it&amp;rsquo;s bad - far from it - but because it&amp;rsquo;s extra complexity I would rather avoid, unless I need it.</description><content:encoded><![CDATA[<p>When it comes to implementing a new feature in an application&rsquo;s ecosystem, I <a href="https://mcfunley.com/choose-boring-technology">don&rsquo;t like spending my innovation tokens</a> unless I have to, so I try not to add new tools to my infrastructure unless I <em>really</em> need them.</p>
<p>This same approach comes when I either want, need, or have been told, to implement a Service Mesh.  This means I don&rsquo;t instantly setup <a href="https://istio.io/">Istio</a>.  Not because it&rsquo;s bad - far from it - but because it&rsquo;s extra complexity I would rather avoid, unless I need it.</p>
<p>But what alternatives are there?</p>
<p>In most large systems I have been involved with <a href="https://www.consul.io">Consul</a> has been deployed;  usually for Service Discovery, <a href="/2018/09/06/consul-feature-toggles/">Feature Toggles</a>, it&rsquo;s key-value store, or distributed locking.  As Consul has Service Mesh functionality built in, why not use that?</p>
<p>So let&rsquo;s dive into setting up a <a href="https://www.consul.io/docs/connect/index.html">Consul Connect</a> based Service Mesh.</p>
<h2 id="implementing">Implementing</h2>
<p>The demo for this is made up of two parts (taken from HashiCorp&rsquo;s consul demo repo): a counter and a dashboard.  The counter listens for HTTP requests and will return the number of requests it&rsquo;s handled.  The dashboard polls the counter and displays the current count.</p>
<p>All the source code for the demo is in the <a href="https://github.com/Pondidum/consul-connect-nomad-demo">Consul Connect Example Repository</a>.</p>
<p>Clone the repository, and run the build script to create the apps:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/Pondidum/consul-connect-nomad-demo
</span></span><span style="display:flex;"><span>cd consul-connect-nomad-demo
</span></span><span style="display:flex;"><span>./apps/build.sh
</span></span></code></pre></div><h3 id="local-run">Local Run</h3>
<p>Run the apps locally to prove they work, in two separate terminals:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9001</span> ./apps/bin/counter
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9002</span> ./apps/bin/dashboard
</span></span></code></pre></div><p>Open <code>http://localhost:9002</code> to see the counter running.</p>
<h3 id="start-a-cluster">Start A Cluster</h3>
<p>Now we have established our apps actually start, we can create a small Consul cluster.  I am using my Hashibox to do this, so you&rsquo;ll need libvirt and Vagrant installed to do this.</p>
<p>Running <code>vagrant up</code> will spawn three machines, which will form a Consul cluster, which we can now experiment in.  Once it is up and running, we can manually register the two applications into Consul&rsquo;s service mesh to check that our in cluster communication works.</p>
<p>First, the counter service.  The script writes a service definition into consul, which, by specifying the <code>connect</code> stanza, indicates this service is to be included in the service mesh.  Once this is done, the counter is started (and sent to the background), and a consul connect proxy is started for this service:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl --request PUT --url http://localhost:8500/v1/agent/service/register <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --data <span style="color:#e6db74">&#39;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;name&#34;: &#34;counter&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;port&#34;: 9001,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;connect&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;sidecar_service&#34;: {}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  }&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9001</span> /vagrant/apps/bin/counter &amp;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>consul connect proxy -sidecar-for counter
</span></span></code></pre></div><p>We can run this script in a new terminal by running this command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant ssh one -c <span style="color:#e6db74">&#39;/vagrant/scripts/counter.sh&#39;</span>
</span></span></code></pre></div><p>Finally, we start the dashboard.  The script is very similar, in that we write a service definiton into consul, start the service and run a proxy.  The only notable difference is the service registation payload itself:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;port&#34;</span>: <span style="color:#ae81ff">9002</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;connect&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;sidecar_service&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;proxy&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;upstreams&#34;</span>: [
</span></span><span style="display:flex;"><span>          { <span style="color:#f92672">&#34;destination_name&#34;</span>: <span style="color:#e6db74">&#34;counter&#34;</span>, <span style="color:#f92672">&#34;local_bind_port&#34;</span>: <span style="color:#ae81ff">8080</span> }
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As before, it registers a service, and on what port it will be listening on, but in the <code>connect</code> stanza, we specify that we want to connect to the <code>counter</code>, and we want to talk to it on <code>localhost:8080</code>.</p>
<p>In a new terminal, you can run this script like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant ssh two -c <span style="color:#e6db74">&#39;/vagrant/scripts/dashboard.sh&#39;</span>
</span></span></code></pre></div><p>Now that both are up and running, you can open a browser to the dashboard and see it working: <code>http://two.karhu.xyz:9002</code>.  Once you are satisfied, you can stop the services by hitting <code>ctrl+c</code> in both terminals&hellip;or try running a second counter or dashboard on the third vagrant machine (<code>vagrant ssh three -c '/vagrant/scripts/dashboard.sh'</code>)</p>
<h3 id="nomad">Nomad</h3>
<p>Now that we have seen how to run the services manually let&rsquo;s see how easy it is to use the service mesh using <a href="https://nomadproject.io">Nomad</a>.</p>
<p>There are two nomad job definitions in the included project, so let&rsquo;s look at the counter&rsquo;s first:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">job</span> <span style="color:#e6db74">&#34;counter&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">datacenters</span> = [<span style="color:#e6db74">&#34;dc1&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">group</span> <span style="color:#e6db74">&#34;api&#34;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">count</span> = <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">network</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">mode</span> = <span style="color:#e6db74">&#34;bridge&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">service</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;count-api&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">port</span> = <span style="color:#e6db74">&#34;9001&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">connect</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">sidecar_service</span> {}
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">task</span> <span style="color:#e6db74">&#34;counter&#34;</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">driver</span> = <span style="color:#e6db74">&#34;exec&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">config</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">command</span> = <span style="color:#e6db74">&#34;/vagrant/apps/bin/counter&#34;</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">env</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">PORT</span> = <span style="color:#ae81ff">9001</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>network</code> stanza is set to <code>bridge</code> mode, which creates us an isolated network between all the services in the group only.  In our case, we will have a single <code>counter</code> service and the proxy.</p>
<p>The <code>service</code> stanza is replicating the same functionality we had by writing a service registration into Consul.  By specifying the <code>connect</code> part, Nomad knows that it also needs to start a proxy-based on the service stanza&rsquo;s settings, and will handle starting and stopping this proxy for us.</p>
<p>The <code>task &quot;counter&quot;</code> block uses the <code>exec</code> driver to run the counter app natively on the host, but <code>docker</code>, <code>java</code>, and others are available too.</p>
<p>To run this into our Nomad cluster, we can use the nomad CLI:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export NOMAD_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://one.karhu.xyz:4646&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nomad job run apps/counter/counter.nomad
</span></span></code></pre></div><p>The dashboard&rsquo;s Nomad job is very similar:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">job</span> <span style="color:#e6db74">&#34;dashboard&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">datacenters</span> = [<span style="color:#e6db74">&#34;dc1&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">group</span> <span style="color:#e6db74">&#34;dashboard&#34;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">network</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">mode</span> = <span style="color:#e6db74">&#34;bridge&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">port</span> <span style="color:#e6db74">&#34;http&#34;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">to</span>     = <span style="color:#ae81ff">9002</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">service</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;count-dashboard&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">port</span> = <span style="color:#ae81ff">9002</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">connect</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">sidecar_service</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">proxy</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">upstreams</span> {
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">destination_name</span> = <span style="color:#e6db74">&#34;count-api&#34;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">local_bind_port</span>  = <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">task</span> <span style="color:#e6db74">&#34;dashboard&#34;</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">driver</span> = <span style="color:#e6db74">&#34;exec&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">config</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">command</span> = <span style="color:#e6db74">&#34;/vagrant/apps/bin/dashboard&#34;</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">env</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">PORT</span> = <span style="color:#e6db74">&#34;${NOMAD_PORT_http}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">COUNTING_SERVICE_URL</span> = <span style="color:#e6db74">&#34;http://${NOMAD_UPSTREAM_ADDR_count_api}&#34;</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>network</code> block this time also specifies that we want to expose our service to the public.  As we don&rsquo;t have a <code>static = 9002</code> in the port definition, Nomad will assign one at random (this is better! You can avoid port clashes with multiple tasks on the same node), we do however specify that we will map to <code>9002</code>.  The rest of the file can use the Nomad variable <code>NOMAD_PORT_http</code> to get this port number, so we don&rsquo;t have to copy-paste the number everywhere.  Similarly, the <code>sidecar_service</code> stanza exposes a variable called <code>NOMAD_UPSTREAM_ADDR_&lt;destination_name&gt;</code>, so we can use that too for our dashboard task&rsquo;s environment variable values. This means we should only ever need to specify ports in 1 location in a Nomad file.</p>
<p>As with the counter, we can run the job using the CLI:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nomad job run apps/counter/dashboard.nomad
</span></span></code></pre></div><p>If we want to get the address and port the dashboard is actually running at, it is easiest to go through the UI, but you can also get the information from the console using the Nomad CLI and jq:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>allocation_id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>nomad alloc status -json | jq -r <span style="color:#e6db74">&#39;.[] | select(.JobID == &#34;dashboard&#34;) | .ID&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nomad alloc status -json <span style="color:#e6db74">&#34;</span>$allocation_id<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  | jq -r <span style="color:#e6db74">&#39;.AllocatedResources.Shared.Networks[0] | ( &#34;http://&#34; + .IP + &#34;:&#34; + (.DynamicPorts[] | select(.Label == &#34;http&#34;) | .Value | tostring))&#39;</span>
</span></span></code></pre></div><h2 id="wrapping-up">Wrapping Up</h2>
<p>With Consul Connect&rsquo;s supported APIs, there is great flexibility in how you can implement your service mesh; through definition files, through API requests, or through the container orchestrator directly.  Couple this with Consul already being in use in most systems I have been involved with, and hopefully you can see why it makes a great way of having a Service Mesh.</p>
]]></content:encoded></item><item><title>Feature Toggles: Reducing Coupling</title><link>https://andydote.co.uk/2019/06/11/feature-toggles-reducing-coupling/</link><pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/06/11/feature-toggles-reducing-coupling/</guid><description>One of the points I make in my Feature Toggles talk is that you shouldn&amp;rsquo;t be querying a toggle&amp;rsquo;s status all over your codebase. Ideally, each toggle gets checked in as few places as possible - preferably only one place. The advantage of doing this is that very little of your codebase needs to be coupled to the toggles (either the toggle itself or the library/system for managing toggles itself).</description><content:encoded><![CDATA[<p>One of the points I make in my <a href="https://www.youtube.com/watch?v=r7VI5x2XKXw">Feature Toggles talk</a> is that you shouldn&rsquo;t be querying a toggle&rsquo;s status all over your codebase.  Ideally, each toggle gets checked in as few places as possible - preferably only one place.  The advantage of doing this is that very little of your codebase needs to be coupled to the toggles (either the toggle itself or the library/system for managing toggles itself).</p>
<p>This post will go over several situations when that seems hard to do, namely: multiple services, multiple distinct areas of a codebase, and multiple times in a complex class or method.  As in the <a href="/2019/06/03/feature-toggles-branch-by-abstraction/">previous post</a> on this, we will be using <a href="https://www.martinfowler.com/bliki/BranchByAbstraction.html">Branch By Abstraction</a> to do most of the heavy lifting.</p>
<h2 id="multiple-services">Multiple Services</h2>
<p>Multiple services interacting with the same feature toggle is a problematic situation to deal with, especially if multiple teams own the different services.</p>
<p>One of the main issues with this is trying to coordinate the two (or more) services.  For example, if one team needs to switch off their implementation due to a problem, should the other services also get turned off too?  To compound on this problem, what happens if one system can react to the toggle change faster than the other?</p>
<p>Services changing configuration at different speeds can also cause issues with handling in-flight requests too: if the message format is different when the toggle is on, will the receiving system be able to process a message produced when the toggle was in one state but consumed in the other state?</p>
<p>We can solve some of this by using separate toggles for each service (and they are not allowed to query the other service&rsquo;s toggle state), and by writing the services so that they can handle both old format and new format requests at the same time.</p>
<p>For example, if we had a sending system which when the toggle is off will send this DTO:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurchaseOptions</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Address Address { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And when the toggle is enabled, it will send the following DTO instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurchaseOptions</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> BillingAddress Address { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> DeliveryAddress Address { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To make the receiving system handle this, we deserialize the request into a DTO which contains all possible versions of the address, and then use the best version based on our own toggle state:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurchaseOptionsRequest</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Address Address { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> BillingAddress Address { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> DeliveryAddress Address { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PurchaseController</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task&lt;PurchaseOptionsResponse&gt; Post(PurchaseOptionsRequest request)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (separateAddresses.Enabled)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> deliveryAddress = request.DeliveryAddress ?? request.Address;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> billingAddress = request.BillingAddress ?? request.Address;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            ConfigureDelivery(deliveryAddress);
</span></span><span style="display:flex;"><span>            CreateInvoice(billingAddress, deliveryAddress);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> address = request.Address ?? request.DeliveryAddress ?? request.BillingAddress;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            ConfigureDelivery(address)
</span></span><span style="display:flex;"><span>            CreateInvoice(address, address);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note how both sides of the toggle check read all three possible address fields, but try to use different fields first.  This means that no matter whether the sending service has it&rsquo;s toggle on or not, we will use the correct address.</p>
<h2 id="multiple-areas-of-the-codebase">Multiple Areas of the Codebase</h2>
<p>To continue using the address example, we might have a UI, Controller and Handler, which all need to act differently based on the same toggle:</p>
<ul>
<li>The UI needs to display either one or two address editors</li>
<li>The controller needs to have different validation logic for multiple addresses</li>
<li>The Command Handler will need to dispatch different values</li>
</ul>
<p>We can solve this all by utilising <a href="https://www.martinfowler.com/bliki/BranchByAbstraction.html">Branch By Abstraction</a> and Dependency Injection to make most of the codebase unaware that a feature toggle exists.  Even the implementations won&rsquo;t need to know about the toggles.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Startup</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> ConfigureContainer(ServiceRegistry services)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (separateAddresses.Enabled) {
</span></span><span style="display:flex;"><span>            services.Add&lt;IAddressEditor, MultiAddressEditor&gt;();
</span></span><span style="display:flex;"><span>            services.Add&lt;IRequestValidator, MultiAddressValidator&gt;();
</span></span><span style="display:flex;"><span>            services.Add&lt;IDeliveryHandler, MultiAddressDeliveryHandler&gt;();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            services.Add&lt;IAddressEditor, SingleAddressEditor&gt;();
</span></span><span style="display:flex;"><span>            services.Add&lt;IRequestValidator, SingleAddressValidator&gt;();
</span></span><span style="display:flex;"><span>            services.Add&lt;IDeliveryHandler, SingleAddressDeliveryHandler&gt;();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s look at how one of these might work.  The <code>IRequestValidator</code> has a definition like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IRequestValidator</span>&lt;TRequest&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IEnumerable&lt;<span style="color:#66d9ef">string</span>&gt; Validate(TRequest request);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There is a middleware in the API request pipeline which will pick the right validator out of the container, based on the request type being processed.  We implement two validators, once for the single address, and one for multiaddress:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SingleAddressValidator</span> : IRequestValidator&lt;SingleAddressRequest&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IEnumerable&lt;<span style="color:#66d9ef">string</span>&gt; Validate(SingleAddressRequest request)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//complex validation logic..</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (request.Address == <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;No Address specified&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (PostCode.Validate(request.Address.PostCode) == <span style="color:#66d9ef">false</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Invalid Postcode&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MultiAddressValidator</span> : IRequestValidator&lt;MultiAddressRequest&gt;
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IEnumerable&lt;<span style="color:#66d9ef">string</span>&gt; Validate(MultiAddressRequest request)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> billingMessages = ValidateAddress(request.BillingAddress);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (billingMessages.Any())
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> billingMessages;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (request.DifferentDeliveryAddress)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> ValidateAddress(request.DeliveryAddress);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The implementations themselves don&rsquo;t need to know about the state of the toggle, as the container and middleware take care of picking the right implementation to use.</p>
<h2 id="multiple-places-in-a-classmethod">Multiple Places in a Class/Method</h2>
<p>If you have a single method (or class) which needs to check the toggle state in multiple places, you can also use the same Branch by Abstraction technique as above, by creating a custom interface and pair of implementations, which contain all the functionality which changes.</p>
<p>For example, if we have a method for finding an offer for a customer&rsquo;s basket, which has a few separate checks that the toggle is enabled in it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> SuggestedBasket CreateOffer(CreateOfferCommand command)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (newFeature.Enabled) {
</span></span><span style="display:flex;"><span>        ExtraPreValidation(command).Throw();
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        StandardPreValidation(command).Throw();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> offer = SelectBestOffer(command.Items);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (offer == <span style="color:#66d9ef">null</span> &amp;&amp; newFeature.Enabled) {
</span></span><span style="display:flex;"><span>        offer = FindAlternativeOffer(command.Customer, command.Items);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> SuggestedBasket
</span></span><span style="display:flex;"><span>        .From(command)
</span></span><span style="display:flex;"><span>        .With(offer);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can extract an interface for this, and replace the toggle specific parts with calls to the interface instead:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">ICreateOfferStrategy</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    IThrowable PreValidate(CreateOfferCommand command);
</span></span><span style="display:flex;"><span>    Offer AlternativeOffer(CreateOfferCommand command, Offer existingOffer);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DefaultOfferStrategy</span> : ICreateOfferStrategy
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IThrowable PreValidate(CreateOfferCommand command)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> StandardPreValidation(command);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Offer AlternativeOffer(CreateOfferCommand command, Offer existingOffer)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> existingOffer;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DefaultOfferStrategy</span> : ICreateOfferStrategy
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> IThrowable PreValidate(CreateOfferCommand command)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> ExtraPreValidation(command);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Offer AlternativeOffer(CreateOfferCommand command, Offer existingOffer)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (existingOffer != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> existingOffer;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> TryFindAlternativeOffer(command.Customer, command.Items, offer);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OfferBuilder</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> ICreateOfferStrategy _strategy;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> OfferBuilder(ICreateOfferStrategy strategy)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        _strategy = strategy;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> SuggestedBasket CreateOffer(CreateOfferCommand command)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        _strategy.PreValidation(command).Throw();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> offer = SelectBestOffer(command.Items);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        offer = _strategy.AlternativeOffer(command, offer);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> SuggestedBasket
</span></span><span style="display:flex;"><span>            .From(command)
</span></span><span style="display:flex;"><span>            .With(offer);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now that we have done this, our <code>CreateOffer</code> method has shrunk dramatically and no longer needs to know about the toggle state, as like the rest of our DI examples, the toggle can be queried once in the startup of the service and the correct <code>ICreateOfferStrategy</code> implementation registered into the container.</p>
<h2 id="end">End</h2>
<p>Hopefully, this post will give a few insights into different ways of reducing the number of calls to your feature toggling library, and prevent you scattering lots of if statements around the codebase!</p>
]]></content:encoded></item><item><title>Feature Toggles: Branch by Abstraction</title><link>https://andydote.co.uk/2019/06/03/feature-toggles-branch-by-abstraction/</link><pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/06/03/feature-toggles-branch-by-abstraction/</guid><description>Recently, I was asked if I could provide an example of Branch By Abstraction when dealing with feature toggles. As this has come up a few times, I thought a blog post would be a good idea so I can refer others to it later too.
The Context As usual, this is some kind of backend (micro)service, and it will send email messages somehow. We will start with two implementations of message sending: the &amp;ldquo;current&amp;rdquo; version; which is synchronous, and a &amp;ldquo;new&amp;rdquo; version; which is async.</description><content:encoded><![CDATA[<p>Recently, I was asked if I could provide an example of Branch By Abstraction when dealing with feature toggles.  As this has come up a few times, I thought a blog post would be a good idea so I can refer others to it later too.</p>
<h2 id="the-context">The Context</h2>
<p>As usual, this is some kind of backend (micro)service, and it will send email messages somehow.  We will start with two implementations of message sending: the &ldquo;current&rdquo; version; which is synchronous, and a &ldquo;new&rdquo; version; which is async.</p>
<p>We&rsquo;ll do a bit of setup to show how feature toggling can be done in three ways for this feature:</p>
<ol>
<li>Static: Configured on startup</li>
<li>Dynamic: Check the toggle state on each send</li>
<li>Dynamic: Check the toggle for a given message</li>
</ol>
<h2 id="abstractions-and-implementations">Abstractions and Implementations</h2>
<p>We have an interface called <code>IMessageDispatcher</code> which defines a single <code>Send</code> method, which returns a <code>Task</code> (or <code>Promise</code>, <code>Future</code>, etc. depending on your language.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IMessageDispatcher</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    Task&lt;SendResult&gt; Send(Message message);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The two message sending implementations don&rsquo;t matter, but we need the types to show the other code examples.  Fill in the blanks if you want!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HttpMessageDispatcher</span> : IMessageDispatcher
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// ...</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">QueueMessageDispatcher</span> : IMessageDispatcher
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// ...</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="1-static-configuration">1. Static Configuration</h2>
<p>The word static in this context means that we check the feature toggle&rsquo;s state once on startup and pick an implementation.  We don&rsquo;t recheck the toggle state unless the service is restarted.</p>
<p>For instance, in an ASP.Net core application, you could change which service is registered into the container at startup like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> ConfigureServices(IServiceCollection services)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> toggleSource = <span style="color:#66d9ef">new</span> ToggleSource(<span style="color:#75715e">/* ... */</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (toggleSource.IsActive(Toggles.AsyncMessageDispatch))
</span></span><span style="display:flex;"><span>        services.AddTransient&lt;IMessageDispatcher, QueueMessageDispatcher&gt;();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        services.AddTransient&lt;IMessageDispatcher, HttpMessageDispatcher&gt;();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Which means any class which takes in an instance of <code>IMessageDispatcher</code> doesn&rsquo;t need to check the toggle state or worry about which implementation to use.</p>
<h2 id="2-dynamic-configuration">2. Dynamic Configuration</h2>
<p>We can build on this abstraction to enable more flexibility, if we want to be able to change the toggle state while the service is running, without needing to restart it.  To do this, we can implement another version of the <code>IMessageDispatcher</code> interface which will check the toggle state on each invocation of <code>Send()</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ToggleDispatcher</span> : IMessageDispatcher
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Func&lt;<span style="color:#66d9ef">bool</span>&gt; _isToggleActive;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> IMessageDispatcher _queueSender;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> IMessageDispatcher _httpSender;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> ToggleDispatcher(Func&lt;<span style="color:#66d9ef">bool</span>&gt; isToggleActive, IMessageDispatcher queueSender, IMessageDispatcher httpSender)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        _isToggleActive = isToggleActive;
</span></span><span style="display:flex;"><span>        _queueSender = queueSender;
</span></span><span style="display:flex;"><span>        _httpSender = httpSender;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Task&lt;SendResult&gt; Send(Message message)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> chosen = _isToggleActive()
</span></span><span style="display:flex;"><span>            ? _queueSender
</span></span><span style="display:flex;"><span>            : _httpSender;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> chosen.Send(message);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And in our startup class, we can change the service registration to use the new version.  Note how we are now registering the two concrete versions into the container so that they can be resolved later by the ToggleDispatcher registration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> ConfigureServices(IServiceCollection services)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> toggleSource = <span style="color:#66d9ef">new</span> ToggleSource(<span style="color:#75715e">/* ... */</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    services.AddTransient&lt;HttpMessageDispatcher&gt;();
</span></span><span style="display:flex;"><span>    services.AddTransient&lt;QueueMessageDispatcher&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    services.AddTransient&lt;IMessageDispatcher&gt;(context =&gt; <span style="color:#66d9ef">new</span> ToggleDispatcher(
</span></span><span style="display:flex;"><span>        () =&gt; toggleSource.IsActive(Toggles.AsyncMessageDispatch),
</span></span><span style="display:flex;"><span>        context.GetService&lt;QueueMessageDispatcher&gt;(),
</span></span><span style="display:flex;"><span>        context.GetService&lt;HttpMessageDispatcher&gt;())
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="3-dynamicer-configuration">3. Dynamic(er) Configuration</h2>
<p>We can take this another step further too, if we want to be able to have a phased rollout of this new <code>QueueMessageDispatcher</code>, for example, based on the sender address.  In this case, we can create another decorator which uses the individual message to make the decision.  The only difference to the original <code>ToggleDispatcher</code> is that the first argument now also provides a <code>Message</code> object:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MessageBasedToggleDispatcher</span> : IMessageDispatcher
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Func&lt;Message, <span style="color:#66d9ef">bool</span>&gt; _isToggleActive;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> IMessageDispatcher _queueSender;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> IMessageDispatcher _httpSender;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> MessageBasedToggleDispatcher(Func&lt;Message, <span style="color:#66d9ef">bool</span>&gt; isToggleActive, IMessageDispatcher queueSender, IMessageDispatcher httpSender)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        _isToggleActive = isToggleActive;
</span></span><span style="display:flex;"><span>        _queueSender = queueSender;
</span></span><span style="display:flex;"><span>        _httpSender = httpSender;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Task&lt;SendResult&gt; Send(Message message)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> chosen = _isToggleActive(message)
</span></span><span style="display:flex;"><span>            ? _queueSender
</span></span><span style="display:flex;"><span>            : _httpSender;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> chosen.Send(message);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The startup registration is modified to pass the message property we care about to the <code>ToggleSource</code>, with the <code>toggleSource.IsActive()</code> call being responsible for what to do with the key we have passed in.  Perhaps it does something like a consistent hash of the address, and if the value is above a certain threshold the toggle is active, or maybe it queries a whitelist of people who the toggle is enabled for.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> ConfigureServices(IServiceCollection services)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> toggleSource = <span style="color:#66d9ef">new</span> ToggleSource(<span style="color:#75715e">/* ... */</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    services.AddTransient&lt;HttpMessageDispatcher&gt;();
</span></span><span style="display:flex;"><span>    services.AddTransient&lt;QueueMessageDispatcher&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    services.AddTransient&lt;IMessageDispatcher&gt;(context =&gt; <span style="color:#66d9ef">new</span> MessageBasedToggleDispatcher(
</span></span><span style="display:flex;"><span>        message =&gt; toggleSource.IsActive(Toggles.AsyncMessageDispatch, message.SenderAddress),
</span></span><span style="display:flex;"><span>        context.GetService&lt;QueueMessageDispatcher&gt;(),
</span></span><span style="display:flex;"><span>        context.GetService&lt;HttpMessageDispatcher&gt;())
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>This method of branching is extremly flexible, as it allows us to use toggles to replace feature implementations, but also gives us lots of places where we can add other decorators to add functionality to the pipeline.  For example, we could add an auditing decorator or one which implements the outbox pattern - and the calling code which depends only on <code>IMessageDispatcher</code> doesn&rsquo;t need to care.</p>
]]></content:encoded></item><item><title>Testing Immutable Infrastructure</title><link>https://andydote.co.uk/2019/01/01/immutable-infra/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2019/01/01/immutable-infra/</guid><description>In my previous post, I glossed over one of the most important and useful parts of Immutable Infrastructure: Testability. There are many kinds of tests we can write for our infrastructure, but they should all be focused on the machine/service and maybe it&amp;rsquo;s nearest dependencies, not the entire system.
While this post focuses on testing a full machine (both locally in a VM, and remotely as an Amazon EC2 instance), it is also possible to do most of the same kind of tests against a Docker container.</description><content:encoded><![CDATA[<p>In my <a href="/2018/12/22/serilog-elk-jaeger/">previous post</a>, I glossed over one of the most important and useful parts of Immutable Infrastructure: Testability.  There are many kinds of tests we can write for our infrastructure, but they should all be focused on the machine/service and <em>maybe</em> it&rsquo;s nearest dependencies, <a href="https://medium.com/@copyconstruct/testing-microservices-the-sane-way-9bb31d158c16">not the entire system</a>.</p>
<p>While this post focuses on testing a full machine (both locally in a VM, and remotely as an Amazon EC2 instance), it is also possible to do most of the same kind of tests against a Docker container.  In fact, one of the tools used in this post supports building Docker containers as an output in parallel to the AMIs, so this can also assist in providing a migration path to/from Docker.</p>
<p>As an example, I will show how I built and tested a LogStash machine, including how to verify that the script to create the production machine is valid, that the machine itself has been provisioned correctly, and that the services inside work as expected.</p>
<p>I have <a href="https://github.com/Pondidum/immutable-infra-testing-demo">published all the source code</a> to GitHub.  The examples in this post are all taken from the repository but might have a few bits removed just for readability.  Check the full source out if you are interested!</p>
<h2 id="repository-structure-and-tools">Repository Structure and Tools</h2>
<p>When it comes to building anything that you will have lots of, consistency is key to making it manageable.  To that end, I have a small selection of tools that I use, and a repository structure I try and stick to.  They are the following:</p>
<p><strong><a href="https://www.vagrantup.com/">Vagrant</a></strong> - This is a tool for building and managing virtual machines.  It can be backed by many different <a href="https://www.vagrantup.com/docs/providers/">providers</a> such as Docker, HyperV and VirtualBox.  We&rsquo;ll use this to build a local Linux machine to develop and test LogStash in.  I use the HyperV provisioner, as that is what Docker For Windows also uses, and HyperV disables other virtualisation tools.</p>
<p><strong><a href="https://packer.io/">Packer</a></strong> - This tool provides a way to build machine images.  Where Vagrant builds running machines, Packer builds the base images for you to boot, and can build multiple different ones (in parallel) from one configuration.  We&rsquo;ll use this to create our AMIs (Amazon Machine Images.)</p>
<p><strong><a href="http://jestjs.io/">Jest</a></strong> - This is a testing framework written in (and for) NodeJS applications.  Whatever testing tool works best for your environment is what you should be using, but I use Jest as it introduces minimal dependencies, is cross-platform, and has some useful libraries for doing things like diffing json.</p>
<p>The repository structure is pretty simple:</p>
<ul>
<li>scripts/</li>
<li>src/</li>
<li>test/</li>
<li>build.sh</li>
<li>logstash.json</li>
<li>package.json</li>
<li>vagrantfile</li>
</ul>
<p>The <code>src</code> directory is where our application code will live.  If the application is compiled, the output goes to the <code>build</code> directory (which is not tracked in source-control.)  The <code>test</code> directory will contain all of our tests, and the <code>scripts</code> directory will contain everything needed for provisioning our machines.</p>
<p>We&rsquo;ll describe what the use of each of these files is as we go through the next section.</p>
<h2 id="local-development">Local Development</h2>
<p>To create our virtual machine locally, we will use <a href="https://www.vagrantup.com">Vagrant</a>.  To tell Vagrant how to build our machine, we need to create a <code>vagrantfile</code> in our repository, which will contain the machine details and provisioning steps.</p>
<p>The machine itself has a name, CPU count, and memory specified.  There is also a setting for Hyper-V which allows us to use a differencing disk, which reduces the startup time for the VM, and how much disk space it uses on the host machine.</p>
<p>For provisioning, we specify to run the relevant two files from the <code>scripts</code> directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">Vagrant</span><span style="color:#f92672">.</span>configure(<span style="color:#e6db74">&#34;2&#34;</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>config<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>box <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bento/ubuntu-16.04&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provider <span style="color:#e6db74">&#34;hyperv&#34;</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>hv<span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        hv<span style="color:#f92672">.</span>vmname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;LogStash&#34;</span>
</span></span><span style="display:flex;"><span>        hv<span style="color:#f92672">.</span>cpus <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        hv<span style="color:#f92672">.</span>memory <span style="color:#f92672">=</span> <span style="color:#ae81ff">2048</span>
</span></span><span style="display:flex;"><span>        hv<span style="color:#f92672">.</span>linked_clone <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provision <span style="color:#e6db74">&#34;shell&#34;</span>, <span style="color:#e6db74">path</span>: <span style="color:#e6db74">&#34;./scripts/provision.sh&#34;</span>
</span></span><span style="display:flex;"><span>    config<span style="color:#f92672">.</span>vm<span style="color:#f92672">.</span>provision <span style="color:#e6db74">&#34;shell&#34;</span>, <span style="color:#e6db74">path</span>: <span style="color:#e6db74">&#34;./scripts/vagrant.sh&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p>To keep things as similar as possible between our development machine and our output AMI, I keep as much of the setup script in one file: <code>scripts/provision.sh</code>.  In the case of our LogStash setup, this means installing Java, LogStash, some LogStash plugins, and enabling the service on reboots:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># add elastic&#39;s package repository</span>
</span></span><span style="display:flex;"><span>wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;deb https://artifacts.elastic.co/packages/6.x/apt stable main&#34;</span> | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
</span></span><span style="display:flex;"><span>sudo apt-get update
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># install openjdk and set environment variable</span>
</span></span><span style="display:flex;"><span>sudo apt-get install openjdk-8-jre -y
</span></span><span style="display:flex;"><span>JAVA<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>readlink -f <span style="color:#66d9ef">$(</span>which java<span style="color:#66d9ef">)</span> | sed <span style="color:#e6db74">&#34;s:bin/java::&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;JAVA_HOME=</span>$JAVA<span style="color:#e6db74">&#34;</span> | sudo tee --append /etc/environment
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#install logstash and plugins</span>
</span></span><span style="display:flex;"><span>sudo apt-get install logstash -y
</span></span><span style="display:flex;"><span>/usr/share/logstash/bin/logstash-plugin install logstash-filter-uuid
</span></span><span style="display:flex;"><span>/usr/share/logstash/bin/logstash-plugin install logstash-filter-prune
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo systemctl enable logstash.service
</span></span></code></pre></div><p>Vagrant will automatically mount it&rsquo;s working directory into the VM under the path <code>/vagrant</code>.  This means we can add a second provisioning script (<code>scripts/vagrant.sh</code>) to link the <code>/vagrant/src</code> directory to the LogStash configuration directory (<code>/etc/logstash/conf.d</code>), meaning we can edit the files on the host machine, and then restart LogStash to pick up the changes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>sudo rm -rf /etc/logstash/conf.d
</span></span><span style="display:flex;"><span>sudo ln -s /vagrant/src /etc/logstash/conf.d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo systemctl start logstash.service
</span></span></code></pre></div><p>Now that we have a <code>vagrantfile</code>, we can start the virtual machine with a single command.  Note, Hyper-V requires administrator privileges, so you need to run this command in an admin terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant up
</span></span></code></pre></div><p>After a while, your new LogStash machine will be up and running.  If you want to log into the machine and check files an processes etc., you can run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant ssh
</span></span></code></pre></div><p>An argument can also be provided to the <code>ssh</code> command to be executed inside the VM, which is how I usually trigger LogStash restarts (as it doesn&rsquo;t seem to detect when I save the config files in the <code>src</code> directory):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vagrant ssh -c <span style="color:#e6db74">&#39;sudo systemctl restart logstash&#39;</span>
</span></span></code></pre></div><h2 id="deployment">Deployment</h2>
<p>To create the deployable machine image, I use Packer.  The process is very similar to how Vagrant is used: select a base AMI, create a new EC2 machine, provision it, and save the result as a new AMI.</p>
<p>Packer is configured with a single json file, in this case, named <code>logstash.json</code>.  The file is split into four parts: <code>variables</code>, <code>builders</code>, <code>provisioners</code>, and <code>outputs</code>.  I won&rsquo;t include the <code>outputs</code> section as it&rsquo;s not needed when building AMIs.</p>
<h3 id="variables">Variables</h3>
<p>The <code>variables</code> property is for all configuration that you can pass to Packer.  Their values can come from Environment Variables, CLI parameters, Consul, Vault, <a href="https://www.packer.io/docs/templates/user-variables.html">and others</a>.  In the LogStash example, there are three variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;variables&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;aws_access_key&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;aws_secret_key&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;ami_users&#34;</span>: <span style="color:#e6db74">&#34;{{env `AMI_ACCOUNTS`}}&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>aws_access_key</code> and <code>aws_secret_key</code> are known names - unless we specify some value, they will automatically be read from your AWS config (in <code>~/.aws/</code>), or if running on EC2, from the EC2 machine profile.</p>
<p>The <code>ami_users</code> is a custom variable which will read the <code>AMI_ACCOUNTS</code> environment variable by default.  This particular one is used so that I can grant access to the resulting AMI to multiple AWS accounts, which is useful if you&rsquo;re running in an Organisation with multiple Accounts.  For example, if the AMI is built in a <code>common</code> account, and will be deployed into <code>dev</code>, <code>qa</code> and <code>prod</code> accounts, then you would populate the <code>AMI_ACCOUNTS</code> as a CSV of account IDs.</p>
<h3 id="builders">Builders</h3>
<p>Packer can build <a href="https://www.packer.io/docs/builders/index.html">many different kinds</a> of machine image, but for this, we only need one: <code>amazon-ebs</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;builders&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;amazon-ebs&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;access_key&#34;</span>: <span style="color:#e6db74">&#34;{{user `aws_access_key`}}&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;secret_key&#34;</span>: <span style="color:#e6db74">&#34;{{user `aws_secret_key`}}&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;region&#34;</span>: <span style="color:#e6db74">&#34;eu-west-1&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;instance_type&#34;</span>: <span style="color:#e6db74">&#34;t2.micro&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;source_ami_filter&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;filters&#34;</span>: {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;virtualization-type&#34;</span>: <span style="color:#e6db74">&#34;hvm&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;ubuntu/images/*ubuntu-xenial-16.04-amd64-server-*&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&#34;root-device-type&#34;</span>: <span style="color:#e6db74">&#34;ebs&#34;</span>
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;owners&#34;</span>: [<span style="color:#e6db74">&#34;099720109477&#34;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;most_recent&#34;</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;ssh_username&#34;</span>: <span style="color:#e6db74">&#34;ubuntu&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;ami_name&#34;</span>: <span style="color:#e6db74">&#34;logstash {{timestamp}}&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;ami_users&#34;</span>: <span style="color:#e6db74">&#34;{{user `ami_users`}}&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The two most interesting properties of this are <code>source_ami_filter</code> and <code>ami_users</code>.  The <code>source_ami_filter</code> works in a very similar manner to the AWS CLI&rsquo;s <code>describe-images</code> <code>--filters</code> parameter, albeit in a more readable format.  In this case, I am specifying that I want an <code>ubuntu-xenial</code> base, and I want it to be an official Canonical image, so specify their Account ID as the <code>owner</code>.  I also specify the <code>most_recent</code> property, as this filter will return all versions of this AMI which Canonical publish.</p>
<p>The <code>ami_users</code> is what lets me grant access to the AMI from other accounts (rather than just making it public).  The property&rsquo;s value should be an array, but Packer is smart enough to expand the CSV in the user variable into an array for us.</p>
<h3 id="provisioners">Provisioners</h3>
<p>The <code>provisioners</code> array items are executed in the order they are specified.  To set up the machine, I use the <code>shell</code> provisioner to create a temporary directory, then the <code>file</code> provisioner to upload the files in the <code>src</code> directory to that temporary directory.  Finally a second <code>shell</code> provisioner uploads and runs the <code>scripts/provision.sh</code> and <code>scripts/aws.sh</code> files.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;provisioners&#34;</span>: [
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;shell&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;inline&#34;</span>: <span style="color:#e6db74">&#34;mkdir -p /tmp/src&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;file&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;source&#34;</span>: <span style="color:#e6db74">&#34;./src/&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;destination&#34;</span>: <span style="color:#e6db74">&#34;/tmp/src&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;shell&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;scripts&#34;</span>: [<span style="color:#e6db74">&#34;./scripts/provision.sh&#34;</span>, <span style="color:#e6db74">&#34;./scripts/aws.sh&#34;</span>]
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>aws.sh</code> file is very small and does roughly the same thing as the <code>vagrant.sh</code> script, but rather than symlinking the <code>/vagrant</code> directory, it moves the uploaded <code>src</code> directory into the right location for LogStash:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>sudo rm /etc/logstash/conf.d/*
</span></span><span style="display:flex;"><span>sudo cp -r /tmp/src/* /etc/logstash/conf.d
</span></span></code></pre></div><p>Note that this doesn&rsquo;t start the LogStash service - this gets done by the UserData when we launch a new instance, as often we need to pass in additional configuration parameters, and don&rsquo;t want the service running until that has been done.</p>
<h3 id="running">Running</h3>
<p>To create the AMI, we need to invoke packer.  If I am running packer on a remote machine via SSH, I run it inside <code>tmux</code>, so that disconnects don&rsquo;t fail the process:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>packer build -var <span style="color:#e6db74">&#34;ami_users=111,222,333&#34;</span> logstash.json
</span></span></code></pre></div><p>After a while, Packer will finish, leaving you with an output which will include the new AMI ID:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">==</span>&gt; Builds finished. The artifacts of successful builds are:
</span></span><span style="display:flex;"><span>--&gt; amazon-ebs: AMIs were created:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>eu-west-1: ami-123123123
</span></span></code></pre></div><p>We&rsquo;ll get back to this output later when we create a build script that will also run our tests.  Before we get to that, however, let&rsquo;s look at how we can write tests which target both the local Vagrant machine and the AMI too.</p>
<h2 id="testing">Testing</h2>
<p>To test the machines, I am using <a href="https://jestjs.io">Jest</a>.  There isn&rsquo;t anything particularly interesting going on in the <code>package.json</code>, other than a few babel packages being installed so that I can use ES6 syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;scripts&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;watch&#34;</span>: <span style="color:#e6db74">&#34;jest --watch&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;test&#34;</span>: <span style="color:#e6db74">&#34;jest &#34;</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;devDependencies&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;babel-core&#34;</span>: <span style="color:#e6db74">&#34;^6.26.3&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;babel-jest&#34;</span>: <span style="color:#e6db74">&#34;^23.6.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;babel-preset-env&#34;</span>: <span style="color:#e6db74">&#34;^1.7.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;jest&#34;</span>: <span style="color:#e6db74">&#34;^23.6.0&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;regenerator-runtime&#34;</span>: <span style="color:#e6db74">&#34;^0.13.1&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="packer-configuration-testing">Packer Configuration Testing</h3>
<p>There are a number of tests we can do to make sure our Packer configuration is valid before running it.  This includes things like checking the base AMI is from a whitelisted source (such as our accounts, Amazon and Canonical).  The test has to handle the possibility of multiple builders, and that some builders might not have a <code>source_ami_filter</code>.  It also handles if no owner has been specified at all, which we also consider a &ldquo;bad thing&rdquo;:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ourAccounts</span> <span style="color:#f92672">=</span> [ <span style="color:#e6db74">&#34;111111&#34;</span>, <span style="color:#e6db74">&#34;222222&#34;</span>, <span style="color:#e6db74">&#34;333333&#34;</span>, <span style="color:#e6db74">&#34;444444&#34;</span> ];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">otherOwners</span> <span style="color:#f92672">=</span> [ <span style="color:#e6db74">&#34;amazon&#34;</span>, <span style="color:#e6db74">&#34;099720109477&#34;</span> <span style="color:#75715e">/*canonical*/</span> ];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;ami builder&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should be based on a whitelisted owner&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">allOwners</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ourAccounts</span>.<span style="color:#a6e22e">concat</span>(<span style="color:#a6e22e">otherOwners</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">invalidOwners</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">owners</span> =&gt; <span style="color:#a6e22e">owners</span>.<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">owner</span> =&gt; <span style="color:#f92672">!</span><span style="color:#a6e22e">allOwners</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#a6e22e">owner</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">amisWithInvalidOwners</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">packer</span>.<span style="color:#a6e22e">builders</span>
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">builder</span> =&gt; <span style="color:#a6e22e">builder</span>.<span style="color:#a6e22e">source_ami_filter</span>)
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">builder</span> =&gt; ({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">builderName</span>(<span style="color:#a6e22e">builder</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">invalidOwners</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">invalidOwners</span>(<span style="color:#a6e22e">builder</span>.<span style="color:#a6e22e">source_ami_filter</span>.<span style="color:#a6e22e">owners</span> <span style="color:#f92672">||</span> [ <span style="color:#e6db74">&#34;NO OWNER SPECIFIED&#34;</span> ])
</span></span><span style="display:flex;"><span>      }))
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">builders</span> =&gt; <span style="color:#a6e22e">builders</span>.<span style="color:#a6e22e">invalidOwners</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">amisWithInvalidOwners</span>).<span style="color:#a6e22e">toEqual</span>([]);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>I also test that certain variables (<code>ami_users</code>) have been defined, and have been used in the right place:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;variables&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should have a variable for who can use the ami&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">packer</span>.<span style="color:#a6e22e">variables</span>).<span style="color:#a6e22e">toHaveProperty</span>(<span style="color:#e6db74">&#34;ami_users&#34;</span>);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should read ami_users from AMI_ACCOUNTS&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">packer</span>.<span style="color:#a6e22e">variables</span>.<span style="color:#a6e22e">ami_users</span>).<span style="color:#a6e22e">toMatch</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">/{{\s*env\s*`AMI_ACCOUNTS`\s*}}/</span>
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;ami builder&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should set the ami_user&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">invalidUsers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">packer</span>.<span style="color:#a6e22e">builders</span>
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">builder</span> =&gt; ({
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">builderName</span>(<span style="color:#a6e22e">builder</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">users</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">builder</span>.<span style="color:#a6e22e">ami_users</span> <span style="color:#f92672">||</span> <span style="color:#e6db74">&#34;NO USERS SPECIFIED&#34;</span>
</span></span><span style="display:flex;"><span>      }))
</span></span><span style="display:flex;"><span>      .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">ami</span> =&gt; <span style="color:#f92672">!</span><span style="color:#a6e22e">ami</span>.<span style="color:#a6e22e">users</span>.<span style="color:#a6e22e">match</span>(<span style="color:#e6db74">/{{\s*user\s*`ami_users`\s*}}/</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">invalidUsers</span>).<span style="color:#a6e22e">toEqual</span>([]);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>Other tests you might want to add are that the base AMI is under a certain age, or that your AMI has certain tags included, or that it is named in a specific manner.</p>
<h3 id="machine-testing">Machine Testing</h3>
<p>Machine testing is for checking that our provisioning worked successfully.  This is very useful, as subtle bugs can creep in when you don&rsquo;t verify what happens.</p>
<p>For example, a machine I built copied configuration directory to a target location but was missing the <code>-r</code> flag, so when I later added a subdirectory, the machine failed as the referenced files didn&rsquo;t exist.</p>
<p>So that the tests work with both the Vagrant and Packer built versions, we take in their address and key paths from the environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">spawnSync</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;child_process&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">createConnection</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;net&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// figure out where to look these up
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">host</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">LOGSTASH_ADDRESS</span>; <span style="color:#75715e">// e.g. &#34;172.27.48.28&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">keyPath</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">LOGSTASH_KEYPATH</span>; <span style="color:#75715e">// &#34;.vagrant/machines/default/hyperv/private_key&#34;;
</span></span></span></code></pre></div><p>We also define two helper methods: one to check if a TCP port is open, and one which uses SSH to execute a command and read the response in the machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">execute</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">command</span> =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">args</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">`vagrant@</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">host</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>, <span style="color:#e6db74">`-i`</span>, <span style="color:#a6e22e">keyPath</span>, <span style="color:#a6e22e">command</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ssh</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">spawnSync</span>(<span style="color:#e6db74">&#34;ssh&#34;</span>, <span style="color:#a6e22e">args</span>, { <span style="color:#a6e22e">encoding</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;utf8&#34;</span> });
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">lines</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ssh</span>.<span style="color:#a6e22e">stdout</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#34;\n&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">lines</span>[<span style="color:#a6e22e">lines</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;&#34;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">lines</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">lines</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">lines</span>;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">testPort</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">port</span> =&gt; <span style="color:#66d9ef">new</span> Promise((<span style="color:#a6e22e">resolve</span>, <span style="color:#a6e22e">reject</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">client</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">createConnection</span>({ <span style="color:#a6e22e">host</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">host</span>, <span style="color:#a6e22e">port</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">port</span> });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span> =&gt; <span style="color:#a6e22e">reject</span>(<span style="color:#a6e22e">err</span>));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;connect&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">end</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">resolve</span>();
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>We can then add some tests which check the files were written to the right place, that port <code>5044</code> is open, and port <code>9600</code> is closed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;the machine&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should have the correct configuration&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">files</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">execute</span>(<span style="color:#e6db74">&#34;find /etc/logstash/conf.d/* -type f&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">files</span>).<span style="color:#a6e22e">toEqual</span>([
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;/etc/logstash/conf.d/beats.conf&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;/etc/logstash/conf.d/patterns/custom.txt&#34;</span>
</span></span><span style="display:flex;"><span>    ]);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should be listening on 5044 for beats&#34;</span>, () =&gt; <span style="color:#a6e22e">testPort</span>(<span style="color:#ae81ff">5044</span>));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">it</span>(<span style="color:#e6db74">&#34;should not be listening on 9600&#34;</span>, () =&gt; <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">testPort</span>(<span style="color:#ae81ff">9600</span>)).<span style="color:#a6e22e">rejects</span>.<span style="color:#a6e22e">toThrow</span>(<span style="color:#e6db74">&#34;ECONNREFUSED&#34;</span>));
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p>Of course, as we can execute any command inside the machine, we can check pretty much anything:</p>
<ul>
<li><code>tail</code> the LogStash log and see if it&rsquo;s got the right contents</li>
<li>check if the service is started</li>
<li>check the service is enabled on boot</li>
<li>check the environment variables been written to the right files</li>
</ul>
<h3 id="application-testing">Application Testing</h3>
<p>There are two styles of Application Testing: white-box and black-box.  White-box will be tests run on the application inside the machine, using minimal external dependencies (preferably none at all), and Black-box will be run on the application from outside the machine, either using direct dependencies, or fakes.</p>
<p>It&rsquo;s worth noting that both white-box and black-box tests are <strong>slow</strong>, mostly down to how slow LogStash is at starting up, although only giving it 1 CPU and 2Gb of RAM probably doesn&rsquo;t help.</p>
<h4 id="whitebox-testing-logstash">Whitebox Testing LogStash</h4>
<p>To white-box test LogStash, I use a technique partially based on the <a href="https://github.com/agolo/logstash-test-runner">Agolo LogStash Test Runner</a>.  The process for the tests is to run LogStash interactively (rather than as a service), send it a single event, record the output events, and compare them to an expected output.</p>
<p>The test cases are kept in separate folders, with two files.  First is the input file, imaginatively called <code>input.log</code>, which will contain one json encoded event per line.  The format needs to match what the result of FileBeat sending an event to LogStash would be.  In this case, it means a few extra fields, and a <code>message</code> property containing a string of json.  Formatted for readability, the object looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;@timestamp&#34;</span>: <span style="color:#e6db74">&#34;2018-12-27T14:08:24.753Z&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;beat&#34;</span>: { <span style="color:#f92672">&#34;hostname&#34;</span>: <span style="color:#e6db74">&#34;Spectre&#34;</span>, <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Spectre&#34;</span>, <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;5.3.0&#34;</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;fields&#34;</span>: { <span style="color:#f92672">&#34;environment&#34;</span>: <span style="color:#e6db74">&#34;local&#34;</span>, <span style="color:#f92672">&#34;log_type&#34;</span>: <span style="color:#e6db74">&#34;application&#34;</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;input_type&#34;</span>: <span style="color:#e6db74">&#34;log&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;{\&#34;Timestamp\&#34;: \&#34;2018-12-18T17:06:27.7112297+02:00\&#34;,\&#34;Level\&#34;: \&#34;Information\&#34;,\&#34;MessageTemplate\&#34;: \&#34;This is the {count} message\&#34;,\&#34;Properties\&#34;: {\&#34;count\&#34;: 4,\&#34;SourceContext\&#34;: \&#34;LogLines.GetOpenPurchasesHandler\&#34;,\&#34;ApplicationName\&#34;: \&#34;FileBeatTest\&#34;,\&#34;CorrelationId\&#34;: \&#34;8f341e8e-6b9c-4ebf-816d-d89c014bad90\&#34;,\&#34;TimedOperationElapsedInMs\&#34;: 1000}}&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;offset&#34;</span>: <span style="color:#ae81ff">318</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;source&#34;</span>: <span style="color:#e6db74">&#34;D:\\tmp\\logs\\single.log&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;applicationlog&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I also define an <code>output.log</code>, which contains the expected result(s), again one json encoded event per line.  The example pipeline in the repository will emit two events for a given input, so this file contains two lines of json (again, newlines added for readability here):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;source&#34;</span>: <span style="color:#e6db74">&#34;D:\\tmp\\logs\\single.log&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;@version&#34;</span>: <span style="color:#e6db74">&#34;1&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;fields&#34;</span>: { <span style="color:#f92672">&#34;log_type&#34;</span>: <span style="color:#e6db74">&#34;application&#34;</span>, <span style="color:#f92672">&#34;environment&#34;</span>: <span style="color:#e6db74">&#34;local&#34;</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;@timestamp&#34;</span>: <span style="color:#e6db74">&#34;2018-12-18T15:06:27.711Z&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;offset&#34;</span>: <span style="color:#ae81ff">318</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;ApplicationName&#34;</span>: <span style="color:#e6db74">&#34;FileBeatTest&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;host&#34;</span>: <span style="color:#e6db74">&#34;ubuntu-16&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;applicationlog&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;CorrelationId&#34;</span>: <span style="color:#e6db74">&#34;8f341e8e-6b9c-4ebf-816d-d89c014bad90&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;MessageTemplate&#34;</span>: <span style="color:#e6db74">&#34;This is the {count} message&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Level&#34;</span>: <span style="color:#e6db74">&#34;Information&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Context&#34;</span>: <span style="color:#e6db74">&#34;LogLines.GetOpenPurchasesHandler&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;TimeElapsed&#34;</span>: <span style="color:#ae81ff">1000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;Properties&#34;</span>: { <span style="color:#f92672">&#34;count&#34;</span>: <span style="color:#ae81ff">4</span> }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;duration&#34;</span>: <span style="color:#ae81ff">1000000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;timestamp&#34;</span>: <span style="color:#ae81ff">1545145586711000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;&lt;generated&gt;&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;traceid&#34;</span>: <span style="color:#e6db74">&#34;8f341e8e6b9c4ebf816dd89c014bad90&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;LogLines.GetOpenPurchasesHandler&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;localEndpoint&#34;</span>: { <span style="color:#f92672">&#34;serviceName&#34;</span>: <span style="color:#e6db74">&#34;FileBeatTest&#34;</span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To enable sending the lines directly to LogStash (rather than needing to use FileBeat), we define an <code>input.conf</code> file, which configures LogStash to read json from stdin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-conf" data-lang="conf"><span style="display:flex;"><span>input {
</span></span><span style="display:flex;"><span>  stdin { codec <span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">&gt;</span> <span style="color:#e6db74">&#34;json_lines&#34;</span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And an <code>ouput.conf</code> file which configures LogStash to write the output as json lines a known file path:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-conf" data-lang="conf"><span style="display:flex;"><span>output {
</span></span><span style="display:flex;"><span>  file {
</span></span><span style="display:flex;"><span>    path <span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">&gt;</span> <span style="color:#e6db74">&#34;/tmp/test/output.log&#34;</span>
</span></span><span style="display:flex;"><span>    codec <span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">&gt;</span> <span style="color:#e6db74">&#34;json_lines&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The tests need to be run inside the machine itself, so I created a script in the <code>./scripts</code> directory which will do all the work, and can be run by the <code>execute</code> method in a Jest test.  The script stops the LogStash service, copies the current configuration from the <code>./src</code> directory and the replacement <code>input.conf</code> and <code>output.conf</code> files to a temporary location, and then runs LogStash once per test case, copying the result file to the test case&rsquo;s directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>sudo systemctl stop logstash
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>temp_path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/tmp/test&#34;</span>
</span></span><span style="display:flex;"><span>test_source<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/vagrant/test/acceptance&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo rm -rf <span style="color:#e6db74">&#34;</span>$temp_path<span style="color:#e6db74">/*&#34;</span>
</span></span><span style="display:flex;"><span>sudo mkdir -p $temp_path
</span></span><span style="display:flex;"><span>sudo cp -r /vagrant/src/* $temp_path
</span></span><span style="display:flex;"><span>sudo cp $test_source/*.conf $temp_path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>find $test_source/* -type d | <span style="color:#66d9ef">while</span> read test_path; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Running </span><span style="color:#66d9ef">$(</span>basename $test_path<span style="color:#66d9ef">)</span><span style="color:#e6db74"> tests...&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sudo /usr/share/logstash/bin/logstash <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        <span style="color:#e6db74">&#34;--path.settings&#34;</span> <span style="color:#e6db74">&#34;/etc/logstash&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        <span style="color:#e6db74">&#34;--path.config&#34;</span> <span style="color:#e6db74">&#34;</span>$temp_path<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        &lt; <span style="color:#e6db74">&#34;</span>$test_path<span style="color:#e6db74">/input.log&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sudo touch <span style="color:#e6db74">&#34;</span>$temp_path<span style="color:#e6db74">/output.log&#34;</span>   <span style="color:#75715e"># create it if it doesn&#39;t exist (dropped logs etc.)</span>
</span></span><span style="display:flex;"><span>    sudo rm -f <span style="color:#e6db74">&#34;</span>$test_path<span style="color:#e6db74">/result.log&#34;</span>
</span></span><span style="display:flex;"><span>    sudo mv <span style="color:#e6db74">&#34;</span>$temp_path<span style="color:#e6db74">/output.log&#34;</span> <span style="color:#e6db74">&#34;</span>$test_path<span style="color:#e6db74">/result.log&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>basename $test_path<span style="color:#66d9ef">)</span><span style="color:#e6db74"> tests done&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo systemctl start logstash
</span></span></code></pre></div><p>To execute this, we use the <code>beforeAll</code> function to run it once - we also pass in <code>Number.MAX_SAFE_INTEGER</code> as by default <code>beforeAll</code> will time out after 5 seconds, and the <code>test.sh</code> is <strong>slow as hell</strong> (as LogStash takes ages to start up).</p>
<p>Once the <code>test.sh</code> script has finished running, we load each test&rsquo;s <code>output.log</code> and <code>result.log</code> files, parse each line as json, compare the objects, and print out the delta if the objects are not considered equal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">source</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./test/acceptance&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">isDirectory</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span> =&gt; <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">lstatSync</span>(<span style="color:#a6e22e">p</span>).<span style="color:#a6e22e">isDirectory</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">cases</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fs</span>
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">readdirSync</span>(<span style="color:#a6e22e">source</span>)
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">name</span> =&gt; <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">source</span>, <span style="color:#a6e22e">name</span>))
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">isDirectory</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">describe</span>(<span style="color:#e6db74">&#34;logstash&#34;</span>, () =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">beforeAll</span>(
</span></span><span style="display:flex;"><span>    () =&gt; <span style="color:#a6e22e">execute</span>(<span style="color:#e6db74">&#34;/vagrant/scripts/test.sh&#34;</span>),
</span></span><span style="display:flex;"><span>    Number.<span style="color:#a6e22e">MAX_SAFE_INTEGER</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">test</span>.<span style="color:#a6e22e">each</span>(<span style="color:#a6e22e">cases</span>)(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#a6e22e">directoryPath</span> =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">expected</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">readFile</span>(<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">directoryPath</span>, <span style="color:#e6db74">&#34;output.log&#34;</span>));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">actual</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">readFile</span>(<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">directoryPath</span>, <span style="color:#e6db74">&#34;result.log&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">diffpatch</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DiffPatcher</span>({
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">propertyFilter</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">context</span>) =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">name</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;id&#34;</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">left</span>.<span style="color:#a6e22e">id</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;&lt;generated&gt;&#34;</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">delta</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">diffpatch</span>.<span style="color:#a6e22e">diff</span>(<span style="color:#a6e22e">expected</span>, <span style="color:#a6e22e">actual</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">output</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">formatters</span>.<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">format</span>(<span style="color:#a6e22e">delta</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">output</span>.<span style="color:#a6e22e">length</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">output</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">expect</span>(<span style="color:#a6e22e">output</span>.<span style="color:#a6e22e">length</span>).<span style="color:#a6e22e">toBe</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  });
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><h4 id="blackbox-testing-logstash">Blackbox Testing LogStash</h4>
<p>As the machine has ports open for FileBeat and will send it&rsquo;s output to ElasticSearch, we can set up a fake HTTP server, send some log events via FileBeat to the VM and check we receive the right HTTP calls to our fake server.</p>
<p>While looking on how to do this, I came across the <a href="https://www.npmjs.com/package/lumberjack-protocol">lumberjack-protocol</a> package on NPM, but unfortunately, it only supports lumberjack v1, and FileBeat and LogStash are now using v2, so you would have to use a local copy of filebeat to do the sending.</p>
<p>Due to the complexity of implementing this, and the diminished return on investment (the other tests should be sufficient), I have skipped creating the Blackbox tests for the time being.</p>
<h2 id="ami-testing">AMI Testing</h2>
<p>The final phase!  Now that we are reasonably sure everything works locally, we need to build our AMI and test that everything works there too, as it would be a shame to update an Auto Scale Group with the new image which doesn&rsquo;t work!</p>
<p>All that needs to happen to run the tests against an EC2 instance is to set the three environment variables we used with Vagrant, to values for communicating with the EC2 instance. To do this, we&rsquo;ll need the EC2 IP Address, the username for SSH, and the private key for SSH authentication.</p>
<p>The first thing our build script needs to do is create the AMI.  This is done in the same way as <a href="#running">mentioned earlier</a>, but with the slight difference of also piping the output to <code>tee</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>packer_log<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>packer build logstash.json | tee /dev/tty<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>ami_id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#34;</span>$packer_log<span style="color:#e6db74">&#34;</span> | tail -n <span style="color:#ae81ff">1</span> | sed <span style="color:#e6db74">&#39;s/.*\(ami.*\)/\1/&#39;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>By using <code>tee</code>, we can pipe the build log from Packer to both the real terminal (<code>/dev/tty</code>), and to a variable called <code>packer_log</code>.  The script then takes the last line and uses some regex to grab the AMI ID.</p>
<p>Next up, the script uses the AWS CLI to launch an EC2 instance based on the AMI, and store it&rsquo;s IP Address and Instance ID:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>json<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws ec2 run-instances <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --image-id <span style="color:#e6db74">&#34;</span>$ami_id<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --instance-type t2.small <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --key-name <span style="color:#e6db74">&#34;</span>$keypair_name<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region eu-west-1 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --subnet-id <span style="color:#e6db74">&#34;</span>$subnet_id<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --security-group-ids <span style="color:#e6db74">&#34;</span>$security_group_id<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --tag-specifications <span style="color:#e6db74">&#39;ResourceType=instance,Tags=[{Key=Name,Value=logstash-verification}]&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --user-data <span style="color:#e6db74">&#34;</span>$userdata<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>instance_id<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#34;</span>$json<span style="color:#e6db74">&#34;</span> | jq -r .Instances<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>.InstanceId<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>private_ip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo <span style="color:#e6db74">&#34;</span>$json<span style="color:#e6db74">&#34;</span> | jq -r .Instances<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>.PrivateIpAddress<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>The IP Address is then used to set up the environment variables which the node test scripts use to locate the machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>LOGSTASH_ADDRESS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$private_ip<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>LOGSTASH_SSH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ubuntu&#34;</span>
</span></span><span style="display:flex;"><span>LOGSTASH_KEYPATH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;~/.ssh/id_rsa&#34;</span> build ou
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>npm run test
</span></span></code></pre></div><p>Finally, the script uses the Instance ID to terminate the instance:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws ec2 terminate-instances <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --instance-ids <span style="color:#e6db74">&#34;</span>$instance_id<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><h2 id="wrapping-up">Wrapping Up</h2>
<p>Hopefully, this (rather long) post is a useful introduction (!) to how I tackle testing Immutable Infrastructure.  All of these techniques for testing the machine and application can be used for testing things like Docker containers too (and handily, Packer can be used to create Docker containers also).</p>
<p>As mentioned earlier <a href="https://github.com/Pondidum/immutable-infra-testing-demo">The Repository is available here</a>.</p>
]]></content:encoded></item><item><title>Code-free tracing with LogStash and Jaeger</title><link>https://andydote.co.uk/2018/12/22/serilog-elk-jaeger/</link><pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/12/22/serilog-elk-jaeger/</guid><description>I wanted to show request charts (similar to the network tab in firefox) for requests across our microservices but wanted to do so in the least invasive way possible.
We already use LogStash to collect logs from multiple hosts (via FileBeat) and forward them on to ElasticSearch, so perhaps I can do something to also output from LogStash to a tracing service.
There are a number of tracing services available (AppDash, Jaeger, Zipkin), but unfortunately LogStash doesn&amp;rsquo;t have plugins for any of them or for OpenTracing.</description><content:encoded><![CDATA[<p>I wanted to show request charts (similar to the network tab in firefox) for requests across our microservices but wanted to do so in the least invasive way possible.</p>
<p><img loading="lazy" src="firefox-network-timeline.png" alt="Firefox network timeline"  />
</p>
<p>We already use <a href="https://www.elastic.co/products/logstash">LogStash</a> to collect logs from multiple hosts (via <a href="https://www.elastic.co/products/beats/filebeat">FileBeat</a>) and forward them on to <a href="https://www.elastic.co/products/elasticsearch">ElasticSearch</a>, so perhaps I can do something to also output from LogStash to a tracing service.</p>
<p><img loading="lazy" src="logstash-jaeger.png" alt="app to filebeat to logstash to elasticsearch and opentracing"  />
</p>
<p>There are a number of tracing services available (<a href="https://github.com/sourcegraph/appdash">AppDash</a>, <a href="https://www.jaegertracing.io/">Jaeger</a>, <a href="https://zipkin.io/">Zipkin</a>), but unfortunately LogStash doesn&rsquo;t have plugins for any of them or for <a href="https://opentracing.io/">OpenTracing</a>.  I picked Jaeger, as it seemed to be the easiest to get up and running, and also had a &ldquo;Zipkin compatible&rdquo; API too if you didn&rsquo;t want to use the Jaeger one.</p>
<p>Setting up and running Jaeger in a production environment is way out of scope for this post, but for testing, I am just using the all-in-one Docker container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run -d --nameron jaeger <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -e COLLECTOR_ZIPKIN_HTTP_PORT<span style="color:#f92672">=</span><span style="color:#ae81ff">9411</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 5775:5775/udp <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 6831:6831/udp <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 6832:6832/udp <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 5778:5778 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 16686:16686 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 14268:14268 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 9411:9411 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  jaegertracing/all-in-one
</span></span></code></pre></div><p>The tracing APIs work in roughly the same way:  all traces have the same <code>traceid</code>, and are sub-divided into spans.  Spans have a unique id and can have a parent (span) id set.  The trouble with sending data from LogStash is that I don&rsquo;t have any parent IDs available. Well, at least without going and adding it to all our applications, and I&rsquo;m not sure how I would want to propagate it correctly either.</p>
<p>So the first question is: can I push multiple spans without any parent IDs, and have it plot them as I would expect.</p>
<h2 id="is-spanparentid-required">Is span.parentid required?</h2>
<p>As the HTTP API documentation seems to be non-existent (other than &ldquo;there is one!&rdquo;), and most of the other docs mention the Thrift API, I decided to use that to test the theory.  The <a href="https://github.com/jaegertracing/jaeger-client-csharp">Jaeger C# client</a> library has a nice API to use, but I wanted to manually specify things (e.g. <code>traceid</code>, <code>spanid</code>, etc.) and the API has no way to do that, as pretty much everything is marked as <code>internal</code>.</p>
<p>Instead, I cloned the client repository, and added a test (which had access to all the internals I wanted):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Scratch</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> HttpSender _sender;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> Tracer _tracer;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> TraceId _id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Scratch(ITestOutputHelper output)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        _sender = <span style="color:#66d9ef">new</span> HttpSender(<span style="color:#e6db74">&#34;http://localhost:14268/api/traces&#34;</span>);
</span></span><span style="display:flex;"><span>        _tracer = <span style="color:#66d9ef">new</span> Tracer.Builder(<span style="color:#e6db74">&#34;FirstService&#34;</span>).Build();
</span></span><span style="display:flex;"><span>        _id = TraceId.NewUniqueId(<span style="color:#66d9ef">false</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        output.WriteLine(_id.ToString());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">    [Fact]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task Send()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> start = DateTime.UtcNow;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start, start.AddSeconds(<span style="color:#ae81ff">5</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start, start.AddSeconds(<span style="color:#ae81ff">3</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start.AddSeconds(<span style="color:#ae81ff">5</span>), start.AddSeconds(<span style="color:#ae81ff">10</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start.AddSeconds(<span style="color:#ae81ff">10</span>), start.AddSeconds(<span style="color:#ae81ff">20</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> Create(start, start.AddSeconds(<span style="color:#ae81ff">20</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> _sender.FlushAsync(CancellationToken.None);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">async</span> Task Create(DateTime start, DateTimeOffset finish)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> context = <span style="color:#66d9ef">new</span> SpanContext(_id, SpanId.NewUniqueId(), <span style="color:#66d9ef">new</span> SpanId(<span style="color:#ae81ff">0</span>), SpanContextFlags.None);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">var</span> span = <span style="color:#66d9ef">new</span> Span(_tracer, <span style="color:#e6db74">&#34;test&#34;</span>, context, start, <span style="color:#66d9ef">new</span> Dictionary&lt;<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">object</span>&gt;(), <span style="color:#66d9ef">null</span>);
</span></span><span style="display:flex;"><span>        span.Finish(finish);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> _sender.AppendAsync(span, CancellationToken.None);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The graph rendered how I hoped, proving that I don&rsquo;t need to set the span&rsquo;s <code>parentid</code> for everything with the same <code>traceid</code> to work correctly!</p>
<h2 id="how-to-generate-a-consistent-traceid">How to generate a consistent TraceID?</h2>
<p>All our services pass along or generate a <code>correlationID</code> for each request, so my idea here was to do some conversion to put it in the <code>traceid</code>, which is an <code>int64</code>.  Our <code>correlationID</code>s are guids, which internally is an <code>int128</code>, so I figured I would take the least significant 8 bytes and use that.  This can be done in C# like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> correlationID = Guid.NewGuid();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> traceID = <span style="color:#66d9ef">new</span> TraceId(BitConverter.ToInt64(correlationID.ToByteArray(), <span style="color:#ae81ff">8</span>));
</span></span></code></pre></div><p>I noticed, however, that the <code>TraceID</code> structure in the Jaeger client can take two values: <code>int64 low</code> and <code>int64 high</code>, so I can use the entire <code>correlationid</code>.</p>
<h2 id="how-to-ship-from-logstash">How to ship from LogStash?</h2>
<p>After reading through the LogStash <a href="https://www.elastic.co/guide/en/logstash/current/output-plugins.html">Output Plugins docs</a> it looked like there were three possible ways to ship the events to Jaeger: writing a command line app; invoked through either <code>exec</code> or <code>pipe</code>, writing a LogStash plugin, or doing something with the <code>http</code> output.</p>
<h3 id="cli-adaptor">CLI adaptor</h3>
<p>The idea of this method would be to write a CLI app which takes an event from LogStash and then sends it to Jaeger using the Thrift API.  The app itself could be invoked using the <code>exec</code> or <code>pipe</code> outputs.  I didn&rsquo;t want to use this method for a few reasons:</p>
<p><strong>Development:</strong> The Jaeger client has things I need hidden from the public surface, such as being able to specify the <code>traceid</code>, rather than generating a new one each time, so I would either have to reimplement the classes I need, use reflection to instantiate things, or try opening Pull Requests to expose more internals of the library.</p>
<p><strong>Maintenance:</strong> I&rsquo;d rather not have yet another thing to maintain if I can avoid it, not to mention all the additional things like repository location, build agents, etc.</p>
<p><strong>Deployment:</strong> Our LogStash box is a plain Ubuntu box with nothing other than Java and LogStash installed on it.  As I would probably end up using C# to write the app, I&rsquo;d need to add even more dependencies.</p>
<p><strong>Throughput:</strong> Jaeger (and the others) support sending traces in batches for better efficiency.  Writing an app which supported that would involve writing the batching and caching, and the likelihood is I would mess it up, and increase the chances of lost messages.</p>
<h3 id="logstash-plugin">LogStash plugin</h3>
<p>Basically has the same problems as above, with the addition of me needing to learn enough about Java to build something reliable, and as this is a test and no one else in my team really knows Java either, so I ruled this out.</p>
<h3 id="http">Http?</h3>
<p>The Jaeger collector process can also expose a Zipkin compatible API, and while the documentation for that API is also terrible, I was able to find a <a href="https://github.com/openzipkin/zipkin/issues/1499">Pull Request on Github</a> with some structure defined.  I figured I could do most of this directly with LogStash&rsquo;s configuration DSL, assuming I can: generate a uuid (<code>logstash-filter-uuid</code> plugin), and remove all extra stuff from the post body (<code>logstash-filter-prune</code>).</p>
<h2 id="building-the-logstash-message">Building the LogStash message</h2>
<p>The first step of my configuration is based on what we need to do to <a href="https://github.com/serilog/serilog">Serilog</a> messages to make them a bit nicer in Kibana:</p>
<h3 id="pre-processing">Pre-processing</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>json {
</span></span><span style="display:flex;"><span>    source <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;message&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>date {
</span></span><span style="display:flex;"><span>    match <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;Timestamp&#34;</span>, <span style="color:#e6db74">&#34;ISO8601&#34;</span>, <span style="color:#e6db74">&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSSSSSZZ&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    target <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;@timestamp&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    rename <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;[Properties][ApplicationName]&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;ApplicationName&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;[Properties][CorrelationId]&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;CorrelationId&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;[Properties][SourceContext]&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;Context&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;[Properties][TimedOperationElapsedInMs]&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;TimeElapsed&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The <code>json</code> block tells LogStash that everything in the <code>message</code> property is a json object, rather than a string.</p>
<p>The <code>date</code> block extracts the time the message was recorded by the application and writes it to the special <code>@timestamp</code> field.  This is a good idea as due to queuing, and processing times, the time the message was written and the time it was processed by LogStash will be different.</p>
<p>Lastly, the <code>mutate</code> block is moving a bunch of fields out of the message properties, and up to the top level of the object.  We query by things like <code>ApplicationName</code> a lot, and it&rsquo;s nice not to have to write <code>Properties.ApplicationName:blahblah</code> all the time.</p>
<h3 id="splitting">Splitting</h3>
<p>Our messages contain a lot of data which for the purposes of tracing, we just don&rsquo;t care about.  Not only is it a waste of bandwidth to send all the data to Jaeger, but also there could be clashing fields, and if we ever decide to use a hosted version of Jaeger, I don&rsquo;t want to be sending them all the data either.</p>
<p>So how do we remove everything from the message, but still keep it in the message for the other outputs?</p>
<p>LogStash has an interesting filter called <code>clone</code>.  What it does is copy the message as many times as you specify, and then runs the remaining part of the pipeline once per message, including the original message.  In code, this just looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>clone {
</span></span><span style="display:flex;"><span>    clones <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;jaeger&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If we wanted to split the message more times, we can just add more types to the <code>clones</code> array; there will be one extra message produced for each entry in the array, which will also be added to the message as the <code>type</code> property so we can filter on it later.</p>
<p>We don&rsquo;t want to send the <code>type</code> field itself to Jaeger (or ElasticSeach), so we move it from the message to the <code>@metadata</code> object, which doesn&rsquo;t get passed to outputs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    rename <span style="color:#f92672">=&gt;</span> { <span style="color:#e6db74">&#34;type&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;[@metadata][type]&#34;</span> }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To handle the messages differently, we can just use an <code>if</code> statement on the <code>@metadata.type</code> property:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span>@metadata<span style="color:#f92672">][</span>type<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;jaeger&#34;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># do stuff to the jaeger message</span>
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># process the original message</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="building-the-http-payload">Building the Http Payload</h3>
<p>The hardest part of getting this to work was handling the dates.  Jaeger specifies that timestamps should come in <strong>micro</strong>seconds since epoch, and duration should be in microseconds also.  We need to use the <code>ruby</code> filter so we can run some code to do this, rather than using an inbuilt filter primitive.</p>
<p>The <code>duration</code> is easy enough, as we report <code>TimeElapsed</code> in milliseconds:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;duration&#39;, (event.get(&#39;TimeElapsed&#39;) * 1000).floor)&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To handle the timestamp we need to convert it to epoch milliseconds.  We can get the fractional seconds since the epoch by calling <a href="https://ruby-doc.org/core-1.9.3/Time.html#method-i-to_f"><code>to_f</code></a> on the <code>@timestamp</code> field, and then multiply by <code>1000</code> a couple of times to express it as microseconds.  We also <code>floor</code> it to remove the leftover fraction:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;timestamp&#39;, (event.get(&#39;@timestamp&#39;).to_f * 1000 * 1000).floor)&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This on its own will work, but it <strong>won&rsquo;t be right</strong>.  We report log entries when an operation completes, which means our timestamp is the finish of the event, not the start.  To solve this, we subtract the duration off the timestamp:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;timestamp&#39;, (event.get(&#39;@timestamp&#39;).to_f * 1000 * 1000).floor - event.get(&#39;duration&#39;))&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Next, we need to create our span id.  We need to generate a random id, consisting of letters and numbers, so the easiest way is to generate a <code>uuid</code>, and then tweak it to fit the Jaeger/Zipkin format.  To do that we need to install the <code>logstash-filter-uuid</code> plugin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/usr/share/logstash/bin/logstash-plugin install logstash-filter-uuid
</span></span></code></pre></div><p>There are a few things we need to do to generate a valid span id (for Jaeger):</p>
<ol>
<li>generate a uuid</li>
<li>remove the dashes</li>
<li>make it lowercase</li>
<li>trim it to 16 chars</li>
</ol>
<p>We use four filters to achieve this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>uuid {
</span></span><span style="display:flex;"><span>    target <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;id&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    lowercase <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;(^.{1,16}).*$&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\1</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The reason we specify the <code>mutate</code> twice is that order of the same operation (<code>gsub</code> in this case) is not guaranteed within a <code>mutate</code> block.</p>
<p>Next up we need to tweak the <code>traceid</code> from a guid to a uuid:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    lowercase <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;traceid&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Next, we can populate some other context into the message, by renaming the other fields we want.  I discovered most of the fields and their formats from a combination of the <a href="https://github.com/jaegertracing/jaeger-idl/blob/master/thrift/zipkincore.thrift">thrift dtos</a> and the <a href="https://github.com/openzipkin/zipkin/issues/1499">this pull request</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    rename <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;CorrelationId&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;traceid&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Context&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;name&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;ApplicationName&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;[localEndpoint][serviceName]&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Finally, we want to trim all the other properties from our message, which we can do by using the <code>logstash-filter-prune</code> plugin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>prune {
</span></span><span style="display:flex;"><span>    whitelist_names <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;duration&#34;</span>, <span style="color:#e6db74">&#34;localEndpoint&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    remove_field <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;@timestamp&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We have to explicitly remove the <code>@timestamp</code> property as the prune plugin seems to ignore it (it also ignores the <code>@metadata</code> property).</p>
<p>The complete filter code can be made a little more efficient by combining several of the <code>mutate</code> blocks, provided we keep things in the right order, as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;duration&#39;, (event.get(&#39;TimeElapsed&#39;) * 1000).floor)&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ruby {
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;event.set(&#39;timestamp&#39;, (event.get(&#39;@timestamp&#39;).to_f * 1000 * 1000).floor - event.get(&#39;duration&#39;))&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>uuid {
</span></span><span style="display:flex;"><span>    target <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;id&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    rename <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;CorrelationId&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;traceid&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Context&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;name&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;ApplicationName&#34;</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;[localEndpoint][serviceName]&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    remove_field <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;@timestamp&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    lowercase <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;id&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mutate {
</span></span><span style="display:flex;"><span>    gsub <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;(^.{1,16}).*$&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\1</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prune {
</span></span><span style="display:flex;"><span>    whitelist_names <span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;id&#34;</span>, <span style="color:#e6db74">&#34;traceid&#34;</span>, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;timestamp&#34;</span>, <span style="color:#e6db74">&#34;duration&#34;</span>, <span style="color:#e6db74">&#34;localEndpoint&#34;</span> <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="publishing-to-jaeger">Publishing to Jaeger</h3>
<p>When publishing to the Jaeger API, you have to send it an array of json objects.  To achieve this in the <code>http</code> output plugin, we can enable the <code>format =&gt; json_batch</code>, which will cause the HTTP client to buffer some events and then send them all at once.  So more efficiency, and no extra code on our part.</p>
<p>To help make testing easier, I publish to two different HTTP endpoints: the Jaeger docker container running on my host machine, and to a <a href="http://requestloggerbin.herokuapp.com/">Request Logger Bin</a>; where I can inspect the response if something is reported as a failure by Jaeger, and replay it (via the <a href="https://insomnia.rest/">Insomnia</a> REST client) and check error messages returned from Jaeger.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>output {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span>@metadata<span style="color:#f92672">][</span>type<span style="color:#f92672">]</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;jaeger&#34;</span> {
</span></span><span style="display:flex;"><span>        http {
</span></span><span style="display:flex;"><span>            url <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http://192.168.0.115:9411/api/v2/spans&#34;</span>
</span></span><span style="display:flex;"><span>            format <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;json_batch&#34;</span>
</span></span><span style="display:flex;"><span>            http_method <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;post&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        http {
</span></span><span style="display:flex;"><span>            url <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;http://requestloggerbin.herokuapp.com/bin/ff3da5b2-ec57-4611-ada8-b360ab38830c&#34;</span>
</span></span><span style="display:flex;"><span>            format <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;json_batch&#34;</span>
</span></span><span style="display:flex;"><span>            http_method <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;post&#34;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># normal message handling: elasticsearch etc.</span>
</span></span><span style="display:flex;"><span>        stdout { codec <span style="color:#f92672">=&gt;</span> rubydebug }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I also used LogStash&rsquo;s log output by tailing the log file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>tail -f /var/log/logstash/logstash-plain.log
</span></span></code></pre></div><p>Eventually, I had a working LogStash configuration and can view application traces in Jaeger.</p>
<h2 id="problems">Problems</h2>
<p>One thing I cannot figure out how to do is sending the <code>tags</code> property to Jaeger.  The Zipkin (and OpenTracing) APIs specify tags to be an object, e.g.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;traceid&#34;</span>: <span style="color:#e6db74">&#34;1ee98d32185e41faba146c151ce8e27d&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;8377a6dae87947d7&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;timestamp&#34;</span>: <span style="color:#ae81ff">1545321238784000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;duration&#34;</span>: <span style="color:#ae81ff">409000</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;localEndpoint&#34;</span>: { <span style="color:#f92672">&#34;serviceName&#34;</span>: <span style="color:#e6db74">&#34;PersonInformationService&#34;</span> },
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;SomeOperation&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;tags&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;CorrelationID&#34;</span>: <span style="color:#e6db74">&#34;1ee98d32-185e-41fa-ba14-6c151ce8e27d&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;db.name&#34;</span>: <span style="color:#e6db74">&#34;test-blahblah&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>But LogStash wants the <code>tags</code> property to be an array of strings, and even using the <code>remove_field</code> on <code>tags</code> and then manually populating it doesn&rsquo;t work.  Currently, I don&rsquo;t <em>need</em> anything in the tags, but it would be nice to have it working.  I should ask on the Elastic forums perhaps.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>This post turned out to be a lot longer than I was expecting, but hopefully, it was interesting.  Next time I&rsquo;ll try and go through how I do testing of immutable infrastructure, as well as local development of the base images.</p>
]]></content:encoded></item><item><title>Microservices or Components</title><link>https://andydote.co.uk/2018/10/28/microservices-or-components/</link><pubDate>Sun, 28 Oct 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/10/28/microservices-or-components/</guid><description>One of the reasons people list for using MicroServices is that it helps enforce separation of concerns. This is usually achieved by adding a network boundary between the services. While this is useful, it&amp;rsquo;s not without costs; namely that you&amp;rsquo;ve added a set of new failure modes: the network. We can achieve the same separation of concerns within the same codebase if we put our minds to it. In fact, this is what Simon Brown calls a Modular Monolith, and DHH calls the Majestic Monolith.</description><content:encoded><![CDATA[<p>One of the reasons people list for using MicroServices is that it helps enforce separation of concerns.  This is usually achieved by adding a network boundary between the services.  While this is useful, it&rsquo;s not without costs; namely that you&rsquo;ve added a set of new failure modes: the network. We can achieve the same separation of concerns within the same codebase if we put our minds to it.  In fact, this is what <a href="https://www.simonbrown.je/">Simon Brown</a> calls a <a href="https://www.codingthearchitecture.com/presentations/sa2015-modular-monoliths">Modular Monolith</a>, and <a href="https://twitter.com/dhh">DHH</a> calls the <a href="https://m.signalvnoise.com/the-majestic-monolith-29166d022228">Majestic Monolith</a>.</p>
<p>We recently needed to expand an existing service to have some new functionality.  The current process looks something like this, where the user has done something which will eventually return them a URL which can be clicked to get to a web page to see the results.</p>
<p><img loading="lazy" src="microservice-existing.png" alt="api call does some work, returns a result_url which points to a web interface"  />
</p>
<p>The new process is an additional authentication challenge which the user will need to complete before they can get to the final results page.  The new process looks like this:</p>
<p><img loading="lazy" src="microservice-challenge.png" alt="api call does work, makes a request to challenge API, passing the result_url as an argument.  The challenge-response returns a challenge_url, which is returned to the user instead of the return_url"  />
</p>
<h2 id="design-decisions">Design Decisions</h2>
<p>Currently, the challenge functionality will only be used by this one service, but there is a high probability that we will need it for other services in the future too.  At this point we have a decision to make: do we keep this functionality in-process, or make a separate microservice for it?</p>
<h3 id="time-to-live">Time To Live</h3>
<p>The first trade-off is time:  it is slightly quicker to make it in-process, but if we do want to use this from somewhere else later, we&rsquo;ll need to extract it; which is more work.  The key here is &ldquo;if&rdquo; - we don&rsquo;t know for sure that other services will need this exact functionality.</p>
<p>If we keep the new API and UI within the existing API and UI projects, we can also make some code reuse: there is a data store, data access tooling, permissions, styles that can be reused.  Also, all of our infrastructure such as logging and monitoring is already in place, which will save us some time too.</p>
<h3 id="api-risk">API Risk</h3>
<p>We want to avoid deploying a service which then needs to undergo a lot of rework in the future if the second and third users of it have slightly different requirements.  If we build it as a separate service now, will we be sure we are making something which is generic and reusable by other services?  Typically you only get the answer to this question after the second or third usage, so it seems unlikely that we would get our API design perfect on the first attempt.</p>
<h3 id="technical-risks">Technical Risks</h3>
<p>If we are to go the separate service route, we are introducing new failure modes to the existing API.  What if the challenge API is down? What if the request times out? Are we using HTTP or a Message Broker to communicate with it?</p>
<p>If we keep the service in-process to start with we can eliminate all of these concerns.  Luckily, we tend to have very thin controllers and make use of <a href="https://github.com/jbogard/MediatR">Mediatr</a>, so the actual implementation of how the remote call is made can be hidden in the message handler to a certain extent.</p>
<h3 id="technical-decisions">Technical Decisions</h3>
<p>As alluded to in the Time To Live point, we can reuse the existing data store and data access code, but this is a tradeoff in itself: what if the current storage tech is not quite ideal for the new requirements?</p>
<p>If the current service makes use of a complex Entity Framework model, but the new service is so simple that Dapper makes more sense, do we introduce the new dependency or not?  What if we wanted to migrate away from one datastore to another (e.g. removing all MongoDB usage in favour of Postgres), but this is already using Mongo?  We&rsquo;d be increasing our dependency on a datastore we are explicitly trying to migrate away from.</p>
<p>All this assumes we want to write the service in the same programming language as the existing service!  In our case we do but it&rsquo;s worth considering if you have multiple languages in use already.</p>
<p>Finally on the data storefront, if we decide to extract this as a separate service later, we will have to take into account data migrations, and how we can handle that with little if any, downtime.</p>
<h2 id="the-decision">The Decision</h2>
<p>After weighing up all these points (and a few others), we decided to keep the service inside the existing services.  The Challenge API will live in its own area in the current API, and likewise, the Challenge UI will live in its own area in the existing UI.</p>
<p>How do we go about keeping it all separated though?</p>
<ul>
<li><strong>Communication</strong> we discuss all changes we want to make anyway, so the first line of defence to preventing the code becoming tightly coupled are these discussions.</li>
<li><strong>Pull Requests</strong> someone will notice you are doing something which is reducing the separation, and a discussion about how to avoid this will happen.</li>
<li><strong>Naming Conventions</strong> the Challenge API shares no naming of properties with the existing API.  For example, the current API passes in a <code>results_url</code> and <code>results_id</code>, but the Challenge API stores and refers to these as the <code>redirect_url</code> and <code>external_id</code>.</li>
<li><strong>Readme</strong> it&rsquo;ll go into the repository&rsquo;s readme file, along with any other notes which developers will find useful.  The sequence diagrams we drew (with much more detail) will also go in here.</li>
</ul>
<h2 id="technical-debt">Technical Debt?</h2>
<p>The final question on this decision is &ldquo;Isn&rsquo;t this technical debt we are introducing?&rdquo;.  The answer I feel is &ldquo;no&rdquo;, it feels much closer to applying the YAGNI Principle (You Ain&rsquo;t Gonna Need It).  While there is work in the backlog which can use a Challenge API at the moment, that doesn&rsquo;t necessarily mean it will still be there next week, or if it will be pushed further back or changed later.</p>
<p>In the end, the meeting where we came up with this and drew things on the whiteboard together was productive, and likely much shorter than it took me to write all this down.  We were able to resist the &ldquo;cool hip microservice&rdquo; trend and come up with a design which is pretty contained and composable with other systems in the future.</p>
<p>If after all this discussion we decided to go the MicroService route, I would still be happy with the decision, as we would have all this material to look back on and justify our choice, rather than waving our hands about and shouting &ldquo;but microservices&rdquo; loudly.</p>
<p>How do you go about designing systems?  Microservice all the things? Monolith all the things? Or something in between which makes the most sense for the situation at hand?</p>
]]></content:encoded></item><item><title>Feature Toggles with Consul</title><link>https://andydote.co.uk/2018/09/06/consul-feature-toggles/</link><pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/09/06/consul-feature-toggles/</guid><description>Feature Toggles are a great way of helping to deliver working software, although there are a few things which could go wrong. See my talk Feature Toggles: The Good, The Bad and The Ugly for some interesting stories and insights on it!
I was talking with a colleague the other day about how you could go about implementing Feature Toggles in a centralised manner into an existing system, preferably with a little overhead as possible.</description><content:encoded><![CDATA[<p>Feature Toggles are a great way of helping to deliver working software, although there are a few things which could go wrong.  See my talk <a href="https://www.youtube.com/watch?v=r7VI5x2XKXw">Feature Toggles: The Good, The Bad and The Ugly</a> for some interesting stories and insights on it!</p>
<p>I was talking with a colleague the other day about how you could go about implementing Feature Toggles in a centralised manner into an existing system, preferably with a little overhead as possible.  The most obvious answer is to use a SAAS solution such as <a href="https://launchdarkly.com/">LauchDarkly</a>, but what if you either don&rsquo;t want to or can&rsquo;t use a SAAS solution?</p>
<p>What if we already are using Consul for things such as service discovery, could we use the key-value store as a basic Feature Toggle service?  It has a few advantages:</p>
<ul>
<li>Consul is already in place, so there is no extra infrastructure required and no additional costs</li>
<li>Low stopping cost - If we decide we don&rsquo;t want to use Consul, or not to use Toggles at all, we can stop</li>
<li>Low learning curve - we know how to use Consul already</li>
<li>Security - we can make use of Consul&rsquo;s <a href="https://www.consul.io/docs/guides/acl.html#key-value-rules">ACL</a> to allow services to only read, and operators to write Feature Toggles.</li>
</ul>
<p>There are also some downsides to consider too:</p>
<ul>
<li>We&rsquo;d effectively be reinventing the wheel</li>
<li>There won&rsquo;t be any &ldquo;value protection&rdquo; on the settings (nothing stopping us putting an int into a field which will be parsed as a guid for example)</li>
<li>No statistics - we won&rsquo;t be able to tell if a value is used still</li>
<li>No fine-grained control - unless we build some extra hierarchies, everyone gets the same value for a given key</li>
</ul>
<p>So what would our system look like?</p>
<p><img loading="lazy" src="consul-feature-toggles.png" alt="write to consul kv store, results distributed to other consul instances"  />
</p>
<p>It&rsquo;s pretty straightforward.  We already have a Consul Cluster, and then there are several machines with Consul clients running on them, as well as a Container Host with Consul too.</p>
<p>Any configuration written to a Consul node is replicated to all other nodes, so our user can write values to any node to get it to the rest of the cluster.</p>
<p>As mentioned earlier, we can use the <a href="https://www.consul.io/docs/guides/acl.html#key-value-rules">ACL</a> system to lock things down.  Our services will have a read-only role, and our updating user will have a writeable role.</p>
<h2 id="what-next">What Next?</h2>
<p>Assuming this system covers enough of what we want to do, the next steps might be to make some incremental improvements in functionality, although again I would suggest looking into not reinventing the wheel&hellip;</p>
<h3 id="statistics">Statistics</h3>
<p>While we can&rsquo;t use Consul to collect statistics on what keys are being read, we could provide this functionality by making a small client library which would log the queries and send them somewhere for aggregation.</p>
<p>Most microservice environments have centralised logging or monitoring (and if they don&rsquo;t, they really should), so we can use this to record toggle usage.</p>
<p>This information would be useful to have in the same place you set the feature toggles, which brings us nicely onto the next enhancement.</p>
<h3 id="user-interface">User Interface</h3>
<p>A simple static website could be used to read all the Toggles and their relevant states and statistics and provide a way of setting them.  The UI could further be expanded to give some type safety, such as extra data indicating what type a given key&rsquo;s value should be.</p>
<h3 id="fine-grained-values">FIne Grained Values</h3>
<p>Currently, everyone has the same value for a given key, but the system could be expanded to be more fine-grained.  Rather than storing a feature toggle in the current form:</p>
<pre tabindex="0"><code>/kv/toggles/fast-rendering =&gt; true
</code></pre><p>We could add another level which would indicate a grouping:</p>
<pre tabindex="0"><code>/kv/toggles/fast-rendering/early-access =&gt; true
/kv/toggles/fast-rendering/others =&gt; false
</code></pre><p>At this point though, you are starting to add a lot of complexity.  Think about whether you are solving the right problem! Choose where you are spending your <a href="http://mcfunley.com/choose-boring-technology">Innovation Tokens</a>.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Should you do this? Maybe. Probably not.  I don&rsquo;t know your system and what infrastructure you have available, so I don&rsquo;t want to give any blanket recommendations.</p>
<p>I will, however, suggest that if you are starting out with Feature Toggles, <strong>go for something simple first</strong>.  My current team&rsquo;s first use of a Feature Toggle was just a setting in the <code>web.config</code>, and we just changed the value of it when we wanted the new functionality to come on.</p>
<p>See what works for you, and if you start needing something more complicated than just simple key-value toggles, have a look into an existing system.</p>
]]></content:encoded></item><item><title>Managing AppSettings in Consul</title><link>https://andydote.co.uk/2018/08/07/managing-consul-appsettings/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/08/07/managing-consul-appsettings/</guid><description>Consul is a great utility to make running your microservice architecture very simple. Amongst other things, it provides Service Discovery, Health Checks, and Configuration. In this post, we are going to be looking at Configuration; not specifically how to read from Consul, but about how we put configuration data into Consul in the first place.
The usual flow for an application using Consul for configuration is as follows:
App Starts Fetches configuration from Consul Configures itself Registers in Consul for Service Discovery Ready Step 2 is very straightforward - you query the local instance of Consul&amp;rsquo;s HTTP API, and read the response into your configuration object (If you&amp;rsquo;re using Microsoft&amp;rsquo;s Configuration libraries on dotnet core, you can use the Consul.</description><content:encoded><![CDATA[<p><a href="https://www.consul.io/">Consul</a> is a great utility to make running your microservice architecture very simple.  Amongst other things, it provides Service Discovery, Health Checks, and Configuration.  In this post, we are going to be looking at Configuration; not specifically how to read from Consul, but about how we put configuration data into Consul in the first place.</p>
<p>The usual flow for an application using Consul for configuration is as follows:</p>
<ol>
<li>App Starts</li>
<li>Fetches configuration from Consul</li>
<li>Configures itself</li>
<li>Registers in Consul for Service Discovery</li>
<li>Ready</li>
</ol>
<p>Step 2 is very straightforward - you query the local instance of Consul&rsquo;s HTTP API, and read the response into your configuration object (If you&rsquo;re using Microsoft&rsquo;s Configuration libraries on dotnet core, you can use <a href="https://www.nuget.org/packages/Consul.Microsoft.Extensions.Configuration/">the Consul.Microsoft.Extensions.Configuration NuGet package</a>).</p>
<p>The question is though, how does the configuration get into Consul in the first place? Obviously, we don&rsquo;t want this to be a manual process, and as Consul&rsquo;s HTTP API supports writing too, it doesn&rsquo;t have to be!  But where is the master copy of the configuration data stored?  Where it should be! In the repository with your code for the application.</p>
<p><img loading="lazy" src="repository-with-config.png" alt="repository structure, config.json, config.test.json and config.prod.json in the root"  />
</p>
<p>By default, all your configuration values should be going into the base configuration (<code>config.json</code>), and only use the environment specific versions (e.g. <code>config.test.json</code> and <code>config.prod.json</code>) when a value needs to differ in some environments.</p>
<h2 id="why-store-config-in-the-repository">Why store config in the repository?</h2>
<p>There are many reasons for putting your configuration into a repository alongside the code it relates to, mostly around answering these questions:</p>
<ul>
<li>When did this key&rsquo;s value change?</li>
<li>Why did this key&rsquo;s value change?</li>
<li>Who changed this (do they have more context for why)?</li>
<li>What values has this key been over time?</li>
<li>How often is this key changing?</li>
</ul>
<p>If a value is changing often with reasons (commit messages) such as &ldquo;scale the thing due to increased traffic&rdquo; and &ldquo;scale the thing back down now it&rsquo;s quiet&rdquo; that starts to tell you that you should be implementing some kind of autoscaling.</p>
<p>If you find out a key is set incorrectly, you can find out how long it&rsquo;s been wrong, and maybe discover that the value is not &ldquo;wrong&rdquo; but &ldquo;not right anymore&rdquo;.</p>
<p>The final piece of this is that you know the value in production will match the value specified - there are no operators accidentally adding a 0 to the end of the number of threads to run etc.</p>
<h2 id="deployment">Deployment</h2>
<p>Now we just need to get the configuration from the file, and into Consul whenever it changes.  As I use <a href="https://terraform.io/">Terraform</a> for deploying changes, I just need to update it to write to Consul also.</p>
<p><img loading="lazy" src="deployment-pipeline-consul.png" alt="deployment pipeline - git to AppVeyor to Terraform.  Terraform writes to consul and updates ECS cluster"  />
</p>
<p>Terraform supports <a href="https://www.terraform.io/docs/providers/consul/r/key_prefix.html">writing to Consul</a> out of the box, however, Terraform can&rsquo;t directly read parse json files, but we can use the <a href="https://www.terraform.io/docs/providers/external/index.html"><code>external</code></a> provider to get around that limitation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmake" data-lang="cmake"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">data</span> <span style="color:#960050;background-color:#1e0010">&#34;external&#34;</span> <span style="color:#960050;background-color:#1e0010">&#34;config_file&#34;</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">program</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">[&#34;cat&#34;,</span> <span style="color:#960050;background-color:#1e0010">&#34;config.json&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#960050;background-color:#1e0010">&#34;consul_key_prefix&#34;</span> <span style="color:#960050;background-color:#1e0010">&#34;appsettings&#34;</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">path_prefix</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;appsettings/testapp/&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">subkeys</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&#34;${data.external.config_file.result}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}
</span></span></span></code></pre></div><p>If we want to take things a step further, and use our environment specific overrides files, we just need to use the <a href="https://stedolan.github.io/jq/">JQ command line tool</a> to merge the two json files, which can be done like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jq -s <span style="color:#e6db74">&#39;.[0] * .[1]&#39;</span> config.json config.test.json
</span></span></code></pre></div><p>Unfortunately, the <code>external</code> provider has a very specific syntax to how it is called, and we can&rsquo;t just specify the jq command directly.  So it needs to go into another file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>jq -s <span style="color:#e6db74">&#39;.[0] * .[1]&#39;</span> <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Finally, we can update the <code>external</code> block to use the new script.  You could replace the second file with a merged string containing the current environment (e.g. <code>&quot;config.${var.environment}.json&quot;</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cmake" data-lang="cmake"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">data</span> <span style="color:#960050;background-color:#1e0010">&#34;external&#34;</span> <span style="color:#960050;background-color:#1e0010">&#34;config_file&#34;</span> <span style="color:#960050;background-color:#1e0010">{
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#960050;background-color:#1e0010">program</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">[&#34;bash&#34;,</span> <span style="color:#960050;background-color:#1e0010">&#34;mergeconfigs.sh&#34;,</span> <span style="color:#960050;background-color:#1e0010">&#34;config.json&#34;,</span> <span style="color:#960050;background-color:#1e0010">&#34;config.test.json&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}
</span></span></span></code></pre></div><p>The complete version of this is <a href="https://github.com/Pondidum/Terraform-Demos/tree/master/manage-consul-keys">here in my Terraform Demos repository</a> on GitHub.</p>
<h2 id="what-next">What next?</h2>
<p>Have a go managing your settings as part of your deployment pipeline!  Depending on what tools you are using, you might need to implement your own HTTP posts to the Consul API, but the advantages of automating this task far outweigh the cost of writing some <code>curl</code> commands in my opinion!</p>
]]></content:encoded></item><item><title>Locking Vault Down with Policies</title><link>https://andydote.co.uk/2018/06/23/vault-locking-it-down-with-policies/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/06/23/vault-locking-it-down-with-policies/</guid><description>The final part of my Vault miniseries focuses on permissioning, which is provided by Vault&amp;rsquo;s Policies.
As everything in Vault is represented as a path, the policies DSL (Domain Specific Language) just needs to apply permissions to paths to lock things down. For example, to allow all operations on the cubbyhole secret engine, we would define this policy:
path &amp;#34;cubbyhole/*&amp;#34; { capabilities = [&amp;#34;create&amp;#34;, &amp;#34;read&amp;#34;, &amp;#34;update&amp;#34;, &amp;#34;delete&amp;#34;, &amp;#34;list&amp;#34;] } Vault comes with a default policy which allows token operations (such as looking up its own token info, releasing and renewing tokens), and cubbyhole access.</description><content:encoded><![CDATA[<p>The final part of my Vault miniseries focuses on permissioning, which is provided by Vault&rsquo;s <a href="https://www.vaultproject.io/docs/concepts/policies.html">Policies</a>.</p>
<p>As everything in Vault is represented as a path, the policies DSL (Domain Specific Language) just needs to apply permissions to paths to lock things down.  For example, to allow all operations on the <code>cubbyhole</code> secret engine, we would define this policy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;cubbyhole/*&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;create&#34;</span>, <span style="color:#e6db74">&#34;read&#34;</span>, <span style="color:#e6db74">&#34;update&#34;</span>, <span style="color:#e6db74">&#34;delete&#34;</span>, <span style="color:#e6db74">&#34;list&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Vault comes with a default policy which allows token operations (such as looking up its own token info, releasing and renewing tokens), and cubbyhole access.</p>
<p>Let&rsquo;s combine the last two posts (<a href="2018/06/17/secret-management-vault-postgres-connection/">Managing Postgres Connection Strings with Vault</a> and <a href="/2018/06/22/vault-secure-communication/">Secure Communication with Vault</a>) and create a Policy which will allow the use of generated database credentials.  If you want more details on the how/why of the set up phase, see those two posts.</p>
<h2 id="setup">Setup</h2>
<p>First, we&rsquo;ll create two containers which will get removed on exit - a Postgres one and a Vault one.  Vault is being started in <code>dev</code> mode, so we don&rsquo;t need to worry about init and unsealing it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run --rm -d -p 5432:5432 -e <span style="color:#e6db74">&#39;POSTGRES_PASSWORD=postgres&#39;</span> postgres:alpine
</span></span><span style="display:flex;"><span>docker run --rm -d -p 8200:8200 --cap-add<span style="color:#f92672">=</span>IPC_LOCK -e VAULT_DEV_ROOT_TOKEN_ID<span style="color:#f92672">=</span>vault vault
</span></span></code></pre></div><p>Next, we&rsquo;ll create our Postgres user account which Vault will use to create temporary credentials:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>psql --username postgres --dbname postgres
</span></span><span style="display:flex;"><span>psql&gt; create role VaultAdmin with Login password <span style="color:#e6db74">&#39;vault&#39;</span> CreateRole;
</span></span><span style="display:flex;"><span>psql&gt; grant connect on database postgres to vaultadmin;
</span></span></code></pre></div><p>Let&rsquo;s also configure the environment to talk to Vault as an administrator, and enable the two Vault plugins we&rsquo;ll need:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:8200&#34;</span>
</span></span><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vault&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault auth enable approle
</span></span><span style="display:flex;"><span>vault secrets enable database
</span></span></code></pre></div><p>We&rsquo;ll also set up our database secret engine, and configure database roll creation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault write database/config/postgres_demo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    plugin_name<span style="color:#f92672">=</span>postgresql-database-plugin <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    allowed_roles<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;default&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    connection_url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;postgresql://{{username}}:{{password}}@10.0.75.1:5432/postgres?sslmode=disable&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    username<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;VaultAdmin&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vault&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>vault write database/roles/reader <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    db_name<span style="color:#f92672">=</span>postgres_demo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    creation_statements<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;CREATE ROLE \&#34;{{name}}\&#34; WITH LOGIN PASSWORD &#39;{{password}}&#39; VALID UNTIL &#39;{{expiration}}&#39;; \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        GRANT SELECT ON ALL TABLES IN SCHEMA public TO \&#34;{{name}}\&#34;;&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    default_ttl<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10m&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    max_ttl<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1h&#34;</span>
</span></span></code></pre></div><h2 id="creating-a-policy">Creating a Policy</h2>
<p>First, we need to create the policy.  This can be supplied inline on the command line, but reading from a file means it can be source-controlled, and you something readable too!</p>
<p>While the filename doesn&rsquo;t need to match the policy name, it helps make it a bit clearer if it does match, so we&rsquo;ll call this file <code>postgres-connector.hcl</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># vault read database/creds/reader</span>
</span></span><span style="display:flex;"><span>path <span style="color:#e6db74">&#34;database/creds/reader&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    capabilities <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;read&#34;</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>We can then register this policy into Vault.  The <code>write</code> documentation indicates that you need to prefix the file path with <code>@</code>, but that doesn&rsquo;t work for me:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault policy write postgres-connector postgres-connector.hcl
</span></span></code></pre></div><h2 id="setup-approles">Setup AppRoles</h2>
<p>As before, we&rsquo;ll create a <code>demo_app</code> role for our application to use to get a token.  However this time, we&rsquo;ll specify the <code>policies</code> field, and pass it in both <code>default</code> and our custom <code>postgres-connector</code> role.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault write auth/approle/role/demo_app <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    policies<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;postgres-connector,default&#34;</span>
</span></span></code></pre></div><p>When we generate our client token using the <code>secret_id</code> and <code>role_id</code>, we&rsquo;ll get a token which can create database credentials, as well as access the cubbyhole.</p>
<p>The final part of being an <strong>admin</strong> user for this is to generate and save the <code>secret_id</code> and <code>role_id</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault write -f -field<span style="color:#f92672">=</span>secret_id auth/approle/role/demo_app/secret-id
</span></span><span style="display:flex;"><span>vault read -field<span style="color:#f92672">=</span>role_id auth/approle/role/demo_app/role-id
</span></span></code></pre></div><h2 id="creating-a-token-and-accessing-the-database">Creating a Token and Accessing the Database</h2>
<p>Opening a new command line window, we need to generate our client token.  Take the two id&rsquo;s output from the admin window, and use them in the following code block:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:8200&#34;</span>
</span></span><span style="display:flex;"><span>SECRET_ID<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e"># from the &#39;admin&#39; window!</span>
</span></span><span style="display:flex;"><span>ROLE_ID<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#75715e"># from the &#39;admin&#39; window!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl -X POST --data <span style="color:#e6db74">&#34;{ \&#34;role_id\&#34;:\&#34;</span>$ROLE_ID<span style="color:#e6db74">\&#34;, \&#34;secret_id\&#34;:\&#34;</span>$SECRET_ID<span style="color:#e6db74">\&#34; }&#34;</span> $VAULT_ADDR/v1/auth/approle/login | jq  -r .auth.client_token<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Now we have a client token, we can generate a database connection:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault read database/creds/reader
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Key                Value</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ---                -----</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># lease_id           database/creds/reader/dc2ae2b6-c709-0e2f-49a6-36b45aa84490</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># lease_duration     10m</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># lease_renewable    true</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># password           A1a-1kAiN0gqU07BE39N</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># username           v-approle-reader-incldNFPhixc1Kj25Rar-1529764057</span>
</span></span></code></pre></div><p>Which can also be renewed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault lease renew database/creds/reader/dc2ae2b6-c709-0e2f-49a6-36b45aa84490
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Key                Value</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ---                -----</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># lease_id           database/creds/reader/dc2ae2b6-c709-0e2f-49a6-36b45aa84490</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># lease_duration     10m</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># lease_renewable    true</span>
</span></span></code></pre></div><p>However, if we try to write to the database roles, we get an error:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault write database/roles/what dbname<span style="color:#f92672">=</span>postgres_demo
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Error writing data to database/roles/what: Error making API request.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># URL: PUT http://localhost:8200/v1/database/roles/what</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Code: 403. Errors:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># * permission denied</span>
</span></span></code></pre></div><h2 id="summary">Summary</h2>
<p>It is also a good idea to have separate fine-grained policies, which can then be grouped up against separate AppRoles, allowing each AppRole to have just the permissions it needs.  For example, you could have the following Policies:</p>
<ul>
<li>postgres-connection</li>
<li>postgres-admin</li>
<li>rabbitmq-connection</li>
<li>kafka-consumer</li>
</ul>
<p>You would then have several AppRoles defined which could use different Policies:</p>
<ul>
<li>App1: rabbitmq-connection, postgres-connection</li>
<li>App2: kafka-consumer, rabbitmq-connection</li>
<li>App3: postgres-admin</li>
</ul>
<p>Which helps encourage you to have separate AppRoles for each of your applications!</p>
<p>Finally, the Vault website has a <a href="https://www.vaultproject.io/guides/secret-mgmt/dynamic-secrets.html">guide</a> on how to do this too&hellip;which I only found after writing this!  At least what I wrote seems to match up with their guide pretty well, other than I also use <code>AppRole</code> authentication (and so should you!)</p>
]]></content:encoded></item><item><title>Secure Communication with Vault</title><link>https://andydote.co.uk/2018/06/22/vault-secure-communication/</link><pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/06/22/vault-secure-communication/</guid><description>I think Vault by Hashicorp is a great product - I particularly love how you can do dynamic secret generation (e.g for database connections). But how do you validate that the application requesting the secret is allowed to perform that action? How do you know it&amp;rsquo;s not someone or something impersonating your application?
While musing this at an airport the other day, my colleague Patrik sent me a link to a StackOverflow post about this very question</description><content:encoded><![CDATA[<p>I think <a href="https://vaultproject.io">Vault by Hashicorp</a> is a great product - I particularly love how you can do dynamic secret generation (e.g <a href="/2018/06/17/secret-management-vault-postgres-connection">for database connections</a>).  But how do you validate that the application requesting the secret is allowed to perform that action?  How do you know it&rsquo;s not someone or something impersonating your application?</p>
<p>While musing this at an airport the other day, my colleague <a href="https://twitter.com/PatrikHerrgard">Patrik</a> sent me a link to a StackOverflow post <a href="https://stackoverflow.com/questions/46583873/hashicorp-vault-client-best-practise">about this very question</a></p>
<p>The summary is this:</p>
<ol>
<li>Use an AppRole rather than a plain token</li>
<li>Bake the RoleID into your application</li>
<li>Provide a SecretID from the environment</li>
<li>Combine both to get a token from Vault on startup</li>
<li>Periodically renew said token.</li>
</ol>
<p>Or, in picture form:</p>
<p><img loading="lazy" src="vault-flow.png" alt="vault token flow"  />
</p>
<p>So let&rsquo;s see how we can go about doing this.</p>
<h2 id="0-setup-vault">0. Setup Vault</h2>
<p>This time we will use Vault in dev mode, which means that it starts unsealed, and we can specify the root token as something simple. On the downside, there is no persistence; restarting the container gives you a blank slate.  If you would prefer to use Vault with persistent storage, see <a href="/2018/06/17/secret-management-vault-postgres-connection">Section 2 of the previous post</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -d --rm <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --name vault_demo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --cap-add<span style="color:#f92672">=</span>IPC_LOCK <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -e VAULT_DEV_ROOT_TOKEN_ID<span style="color:#f92672">=</span>vault <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -p 8200:8200 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    vault
</span></span></code></pre></div><p>As in the previous article, we&rsquo;ll export the <code>VAULT_TOKEN</code> and <code>VAULT_ADDR</code> variables so we can use the Vault CLI:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:8200&#34;</span>
</span></span><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vault&#34;</span>
</span></span></code></pre></div><p>For our last setup step, we need to enable the <code>AppRole</code> auth method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault auth enable approle
</span></span></code></pre></div><h2 id="1-create-a-role">1. Create A Role</h2>
<p>Creating a role has <a href="https://www.vaultproject.io/api/auth/approle/index.html#create-new-approle">many parameters</a> you can specify, but for our <code>demo_app</code> role, we are going to skip most of them, just providing <code>token_ttl</code> and <code>token_max_ttl</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault write auth/approle/role/demo_app <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    token_ttl<span style="color:#f92672">=</span>20m <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    token_max_ttl<span style="color:#f92672">=</span>1h
</span></span></code></pre></div><h2 id="2-request-a-secret-id">2. Request A Secret ID</h2>
<p>Vault has two modes of working, called Push and Pull.  Push mode is when you generate the <code>secret_id</code> yourself and store it against the role.  Pull mode is when you request Vault to generate the <code>secret_id</code> against the role and return it to you.  I favour the Pull model, as it is one less thing to worry about (how to generate a secure <code>secret_id</code>.)</p>
<p>We have to specify the <code>-force</code> (shorthand <code>-f</code>) as we are writing a secret which has no key-value pairs, and as we are using the CLI, I have specified <code>-field=secret_id</code> which changes the command to only output the <code>secret_id</code>&rsquo;s value, rather than the whole object.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export SECRET_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>vault write -f -field<span style="color:#f92672">=</span>secret_id auth/approle/role/demo_app/secret-id<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo $SECRET_ID
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 119439b3-4eec-5e5b-ce85-c1d00f046234</span>
</span></span></code></pre></div><h2 id="3-write-secret-id-to-environment">3. Write Secret ID to Environment</h2>
<p>This step would be done by another process, such as <a href="https://www.terraform.io/">Terraform</a> when provisioning your environment, or <a href="https://www.spinnaker.io/">Spinnaker</a> when deploying your containers.</p>
<p>As we are just using the CLI, we can pretend that <code>$SECRET_ID</code> represents the value stored in the environment.</p>
<h2 id="4-fetch-role-id">4. Fetch Role ID</h2>
<p>Next, assuming the role of the developer writing an app, we need fetch the <code>role_id</code>, for our <code>demo_app</code> role.  As with fetching the <code>secret_id</code>, we specify the <code>-field=role_id</code> so we only get that part of the response printed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault read -field<span style="color:#f92672">=</span>role_id auth/approle/role/demo_app/role-id
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 723d66af-3ddd-91c0-7b35-1ee51a30c5b8</span>
</span></span></code></pre></div><h2 id="5-embed-role-id-in-code">5. Embed Role ID in Code</h2>
<p>We&rsquo;re on the CLI, and have saved the <code>role_id</code> into the <code>$ROLE_ID</code> variable, so nothing more to do here!</p>
<p>Let&rsquo;s create a simple C# Console app to demo this with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dotnet new console --name VaultDemo
</span></span><span style="display:flex;"><span>dotnet new sln --name VaultDemo
</span></span><span style="display:flex;"><span>dotnet sln add VaultDemo/VaultDemo.csproj
</span></span><span style="display:flex;"><span>dotnet add VaultDemo/VaultDemo.csproj package VaultSharp
</span></span></code></pre></div><p>We also installed the <code>VaultSharp</code> NuGet package, which takes care of doing the client token fetching for you - but we will go through what this is doing internally later!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Program</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">string</span> RoleID = <span style="color:#e6db74">&#34;723d66af-3ddd-91c0-7b35-1ee51a30c5b8&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">async</span> Task Main(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> auth = <span style="color:#66d9ef">new</span> AppRoleAuthenticationInfo(
</span></span><span style="display:flex;"><span>      RoleID,
</span></span><span style="display:flex;"><span>      Environment.GetEnvironmentVariable(<span style="color:#e6db74">&#34;SECRET_ID&#34;</span>)
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> client = VaultClientFactory.CreateVaultClient(
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">new</span> Uri(<span style="color:#e6db74">&#34;http://localhost:8200&#34;</span>),
</span></span><span style="display:flex;"><span>      auth
</span></span><span style="display:flex;"><span>    );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">await</span> client.CubbyholeWriteSecretAsync(<span style="color:#e6db74">&#34;test/path&#34;</span>, <span style="color:#66d9ef">new</span> Dictionary&lt;<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">object</span>&gt;
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      { <span style="color:#e6db74">&#34;Name&#34;</span>, <span style="color:#e6db74">&#34;I&#39;m a secret Name!&#34;</span> }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> secrets = <span style="color:#66d9ef">await</span> client.CubbyholeReadSecretAsync(<span style="color:#e6db74">&#34;test/path&#34;</span>);
</span></span><span style="display:flex;"><span>    Console.WriteLine(secrets.Data[<span style="color:#e6db74">&#34;Name&#34;</span>]);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="6-deploy">6. Deploy!</h2>
<p>As we&rsquo;re running locally, nothing to do here, but if you want, imagine that you created a docker container or baked an AMI and deployed it to the cloud or something!</p>
<h2 id="7-run--on-start">7. Run / On Start</h2>
<p>As we&rsquo;ve already saved the <code>SECRET_ID</code> into an environment variable, we can just run the application:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dotnet run --project VaultDemo/VaultDemo.csproj
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; I&#39;m a secret Name!</span>
</span></span></code></pre></div><h2 id="so-what-did-the-application-do">So what did the application do?</h2>
<p>When run, the application used both the <code>role_id</code> from the constant and the <code>secret_id</code> environment variable to call Vault&rsquo;s <a href="https://www.vaultproject.io/api/auth/approle/index.html#login-with-approle">Login</a> method.  An equivalent <code>curl</code> command would be this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -X POST <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --data <span style="color:#e6db74">&#39;{ &#34;role_id&#34;:&#34;723d66af-3ddd-91c0-7b35-1ee51a30c5b8&#34;, &#34;secret_id&#34;:&#34;119439b3-4eec-5e5b-ce85-c1d00f046234&#34; }&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    http://localhost:8200/v1/auth/approle/login
</span></span></code></pre></div><p>This will spit out a single line of json, but if you have <a href="https://stedolan.github.io/jq/">jq</a> in your path, you can prettify the output by appending <code>| jq .</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;request_id&#34;</span>: <span style="color:#e6db74">&#34;37c0e057-6fab-1873-3ec0-affaace26e76&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;lease_id&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;renewable&#34;</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;lease_duration&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;data&#34;</span>: <span style="color:#66d9ef">null</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;wrap_info&#34;</span>: <span style="color:#66d9ef">null</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;warnings&#34;</span>: <span style="color:#66d9ef">null</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;auth&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;client_token&#34;</span>: <span style="color:#e6db74">&#34;c14f5806-aff2-61b6-42c2-8920c8049b6c&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;accessor&#34;</span>: <span style="color:#e6db74">&#34;aef3d4f4-d279-bcda-8d9c-2a3de6344975&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;policies&#34;</span>: [
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;default&#34;</span>
</span></span><span style="display:flex;"><span>    ],
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;metadata&#34;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#34;role_name&#34;</span>: <span style="color:#e6db74">&#34;demo_app&#34;</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;lease_duration&#34;</span>: <span style="color:#ae81ff">1200</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;renewable&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;entity_id&#34;</span>: <span style="color:#e6db74">&#34;34b1094b-28d4-1fb0-b8f6-73ad28d80332&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The line we care about is <code>client_token</code> in the <code>auth</code> section.  The value is used to authenticate subsequent requests to Vault.</p>
<p>For instance, in the C# app we used the <a href="https://www.vaultproject.io/api/secret/cubbyhole/index.html">CubbyHole</a> backend to store a <code>Name</code>.  The equivalent curl commands would be:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;c14f5806-aff2-61b6-42c2-8920c8049b6c&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># vault write cubbyhole/test/path name=&#34;Another manual secret&#34;</span>
</span></span><span style="display:flex;"><span>curl -X POST <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --header <span style="color:#e6db74">&#34;X-Vault-Token: </span>$VAULT_TOKEN<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --data <span style="color:#e6db74">&#39;{ &#34;Name&#34;: &#34;Another manual secret&#34; }&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    http://localhost:8200/v1/cubbyhole/test/path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># vault list cubbyhole/test/path</span>
</span></span><span style="display:flex;"><span>curl -X GET <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --header <span style="color:#e6db74">&#34;X-Vault-Token: </span>$VAULT_TOKEN<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    http://localhost:8200/v1/cubbyhole/test/path
</span></span></code></pre></div><p>So why use the client library if it&rsquo;s just HTTP calls?  Simple - by using <code>VaultSharp</code> (or equivalent) we get token auto renewal handled for us, along with working APIs; no more guessing and head-scratching while trying to work out the proper HTTP call to make!</p>
<h2 id="what-next">What Next?</h2>
<p>Read up on what you can do with Roles - such as limiting token and secret lifetimes, usage counts, etc.</p>
<p>Next article will probably cover Vault&rsquo;s <a href="https://www.vaultproject.io/docs/concepts/policies.html">Policies</a>.</p>
]]></content:encoded></item><item><title>Managing Postgres Connection Strings with Vault</title><link>https://andydote.co.uk/2018/06/17/secret-management-vault-postgres-connection/</link><pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2018/06/17/secret-management-vault-postgres-connection/</guid><description>One of the points I made in my recent NDC talk on 12 Factor microservices, was that you shouldn&amp;rsquo;t be storing sensitive data, such as API keys, usernames, passwords etc. in the environment variables.
Don&amp;rsquo;t Store Sensitive Data in the Environment
My reasoning is that when you were accessing Environment Variables in Heroku&amp;rsquo;s platform, you were actually accessing some (probably) secure key-value store, rather than actual environment variables.
While you can use something like Consul&amp;rsquo;s key-value store for this, it&amp;rsquo;s not much better as it still stores all the values in plaintext, and has no auditing or logging.</description><content:encoded><![CDATA[<p>One of the points I made in my recent NDC talk on 12 Factor microservices, was that you shouldn&rsquo;t be storing sensitive data, such as API keys, usernames, passwords etc. in the environment variables.</p>
<blockquote>
<p>Don&rsquo;t Store Sensitive Data in the Environment</p>
</blockquote>
<p>My reasoning is that when you were accessing Environment Variables in Heroku&rsquo;s platform, you were actually accessing some (probably) secure key-value store, rather than actual environment variables.</p>
<p>While you can use something like Consul&rsquo;s key-value store for this, it&rsquo;s not much better as it still stores all the values in plaintext, and has no auditing or logging.</p>
<h2 id="enter-vault">Enter Vault</h2>
<p>Vault is a secure secret management application, which not only can store static values, but also generate credentials on the fly, and automatically expire them after usage or after a time period.  We&rsquo;re going to look at setting up Vault to generate Postgres connection strings.</p>
<h2 id="what-youll-need">What you&rsquo;ll need</h2>
<ol>
<li>Docker, as we&rsquo;ll be running both Vault and Postgres in containers</li>
<li>A SQL client (for a GUI, I recommend <a href="https://dbeaver.io/">DBeaver</a>, for CLI <a href="https://www.postgresql.org/download/">PSQL</a> included in the Postgres download is fine.)</li>
<li>The <a href="https://www.vaultproject.io/downloads.html">Vault executable</a></li>
</ol>
<h2 id="what-well-do">What we&rsquo;ll do</h2>
<ol>
<li>Setup Postgres and create a SQL user for Vault to use</li>
<li>Setup Vault</li>
<li>Setup Vault&rsquo;s database functionality</li>
<li>Fetch and renew credentials from Vault.</li>
</ol>
<h2 id="1-setup-a-postgres-container">1. Setup a Postgres container</h2>
<p>When running on my local machine, I like to use the Alpine variant of the <a href="https://hub.docker.com/_/postgres/">official Postgres</a> container, as it&rsquo;s pretty small, and does everything I&rsquo;ve needed so far.</p>
<p>We&rsquo;ll run a copy of the image, configure it to listen on the default port, and use the super secure password of <code>postgres</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -d <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --name postgres_demo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -p 5432:5432 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  -e <span style="color:#e6db74">&#39;POSTGRES_PASSWORD=postgres&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  postgres:alpine
</span></span></code></pre></div><p>Next up, we need to create a user for Vault to use when generating credentials.  You can execute this SQL in any SQL editor which can connect to postgres, or use the PSQL command line interface:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>psql --username postgres --dbname postgres   <span style="color:#75715e"># it will prompt for password</span>
</span></span><span style="display:flex;"><span>psql&gt; create role VaultAdmin with Login password <span style="color:#e6db74">&#39;vault&#39;</span> CreateRole;
</span></span><span style="display:flex;"><span>psql&gt; grant connect on database postgres to vaultadmin;
</span></span></code></pre></div><p>You can verify this has worked by running another instance of psql as the new user:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>psql --username VaultAdmin --dbname postgres   <span style="color:#75715e"># it will prompt for password</span>
</span></span></code></pre></div><h2 id="2-setting-up-the-vault-container">2. Setting up the Vault container</h2>
<p>The official Vault container image will by default run in <code>dev</code> mode, which means it will startup unsealed, and will use whatever token you specify for authentication.  However, it won&rsquo;t persist any information across container restarts, which is a bit irritating, so instead, we will run it in server mode, and configure file storage to give us (semi) persistent storage.</p>
<p>The configuration, when written out and appropriately formatted, looks as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>backend <span style="color:#e6db74">&#34;file&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/vault/file&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>listener <span style="color:#e6db74">&#34;tcp&#34;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    address <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0.0.0.0:8200&#34;</span>
</span></span><span style="display:flex;"><span>    tls_disable <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>ui <span style="color:#f92672">=</span> true
</span></span></code></pre></div><p>We are binding the listener to all interfaces on the container, disabling SSL (don&rsquo;t do this in production environments!) and enabling the UI.  To pass this through to the container, we can set the <code>VAULT_LOCAL_CONFIG</code> environment variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker run <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -d <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --name vault_demo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --cap-add<span style="color:#f92672">=</span>IPC_LOCK <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -p 8200:8200 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -e <span style="color:#e6db74">&#39;VAULT_LOCAL_CONFIG=backend &#34;file&#34; { path = &#34;/vault/file&#34; } listener &#34;tcp&#34; { address = &#34;0.0.0.0:8200&#34; tls_disable = 1 } ui = true&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    vault server
</span></span></code></pre></div><p>When we use the Vault CLI to interact with a Vault server, it want&rsquo;s to use TLS, but as we are running without TLS, we need to override this default.  Luckily it&rsquo;s just a case of setting the <code>VAULT_ADDR</code> environment variable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_ADDR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:8200&#34;</span>
</span></span></code></pre></div><p>You can run <code>vault status</code> to check you can communicate with the container successfully.</p>
<p>Before we can start configuring secret engines in Vault, it needs initialising.  By default, the <code>init</code> command will generate five key shares, of which you will need any three to unseal Vault.  The reason for Key Shares is so that you can distribute the keys to different people so that no one person has access to unseal Vault on their own.  While this is great for production, for experimenting locally, one key is enough.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault operator init -key-shares<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -key-threshold<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>The output will amongst other things give you two lines, one with the Unseal Key, and one with the Initial Root Token:</p>
<blockquote>
<p>Unseal Key 1: sk+C4xJihsMaa+DCBHHgoGVozz+dMC4Kd/ijX8oMcrQ=
Initial Root Token: addaaeed-d387-5eab-128d-60d6e92b0757</p>
</blockquote>
<p>We&rsquo;ll need the Unseal key to unseal Vault so we can configure it and generate secrets, and the Root Token so we can authenticate with Vault itself.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> vault operator unseal <span style="color:#e6db74">&#34;sk+C4xJihsMaa+DCBHHgoGVozz+dMC4Kd/ijX8oMcrQ=&#34;</span>
</span></span></code></pre></div><p>To make life a bit easier, we can also set an environment variable with our token so that we don&rsquo;t have to specify it on all the subsequent requests:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export VAULT_TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;addaaeed-d387-5eab-128d-60d6e92b0757&#34;</span>
</span></span></code></pre></div><h2 id="3-configure-vaults-database-secret-engine">3. Configure Vault&rsquo;s Database Secret Engine</h2>
<p>First off we need to enable the database secret engine.  This engine supports many different databases, such as Postgres, MSSQL, Mysql, MongoDB and Cassandra amongst others.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault secrets enable database
</span></span></code></pre></div><p>Next, we need to configure how vault will connect to the database.  You will need to substitute the IPAddress in the connection string for your docker host IP (in my case, the network is called <code>DockerNAT</code>, and my machine&rsquo;s IP is <code>10.0.75.1</code>, yours will probably be different.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault write database/config/postgres_demo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    plugin_name<span style="color:#f92672">=</span>postgresql-database-plugin <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    allowed_roles<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;*&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    connection_url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;postgresql://{{username}}:{{password}}@10.0.75.1:5432/postgres?sslmode=disable&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    username<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;VaultAdmin&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vault&#34;</span>
</span></span></code></pre></div><p>To explain more of the command:  We can limit what roles can be granted by this database backend by specifying a CSV of roles (which we will define next).  In our case, however, we are using the allow anything wildcard (<code>*</code>).</p>
<p>Next, we need to define a role which our applications can request.  In this case, I am creating a role which only allows reading of data, so it&rsquo;s named <code>reader</code>.  We also specify the <code>default_ttl</code> which controls how long the user is valid for, and the <code>max_ttl</code> which specifies for how long we can renew a user&rsquo;s lease.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault write database/roles/reader <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    db_name<span style="color:#f92672">=</span>postgres_demo <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    creation_statements<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;CREATE ROLE \&#34;{{name}}\&#34; WITH LOGIN PASSWORD &#39;{{password}}&#39; VALID UNTIL &#39;{{expiration}}&#39;; \
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        GRANT SELECT ON ALL TABLES IN SCHEMA public TO \&#34;{{name}}\&#34;;&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    default_ttl<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10m&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    max_ttl<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1h&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault read database/creds/reader
</span></span><span style="display:flex;"><span>&gt; Key                Value
</span></span><span style="display:flex;"><span>&gt; ---                -----
</span></span><span style="display:flex;"><span>&gt; lease_id           database/creds/reader/15cf95eb-a2eb-c5ba-5111-8c0c48ae30a6
</span></span><span style="display:flex;"><span>&gt; lease_duration     10m
</span></span><span style="display:flex;"><span>&gt; lease_renewable    true
</span></span><span style="display:flex;"><span>&gt; password           A1a-3gkMQpmoh3gbj2aM
</span></span><span style="display:flex;"><span>&gt; username           v-root-reader-tgl6FSXHZaC5LZOK4q0u-1529138525
</span></span></code></pre></div><p>We can now use the username and password to connect to postgres, but only for 10 minutes, after which, the user will be deleted (Note, Vault sets the expiry of the user in Postgres, but will also remove the user when it expires.)</p>
<p>Verify the user can connect using PSQL again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>psql --username v-root-reader-tgl6FSXHZaC5LZOK4q0u-1529138525 --dbname postgres
</span></span></code></pre></div><p>If we want to keep using our credentials, we can run the renew command passing in the <code>lease_id</code>, which will increase the current lease timeout by the value of <code>default_ttl</code>.  You can provide the <code>-increment</code> value to request a different duration extension in seconds, but you cannot go further than the <code>max_ttl</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vault lease renew database/creds/reader/15cf95eb-a2eb-c5ba-5111-8c0c48ae30a6
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>vault lease renew database/creds/reader/15cf95eb-a2eb-c5ba-5111-8c0c48ae30a6 -increment <span style="color:#ae81ff">360</span>
</span></span></code></pre></div><h2 id="done">Done!</h2>
<p>There are a lot more options and things you can do with Vault, but hopefully, this will give you an idea of how to start out.</p>
]]></content:encoded></item><item><title>Preventing MicroService Boilerplate</title><link>https://andydote.co.uk/2016/07/17/preventing-microservice-boilerplate/</link><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2016/07/17/preventing-microservice-boilerplate/</guid><description>One of the downsides to microservices I have found is that I end up repeating the same blocks of code over and over for each service. Not only that, but the project setup is repetitive, as all the services use the Single Project Service and Console method.
What do we do in every service? Initialise Serilog. Add a Serilog sink to ElasticSearch for Kibana (but only in non-local config.) Hook/Unhook the AppDomain.</description><content:encoded><![CDATA[<p>One of the downsides to microservices I have found is that I end up repeating the same blocks of code over and over for each service.  Not only that, but the project setup is repetitive, as all the services use the <a href="/2015/08/30/single-project-service-and-console/">Single Project Service and Console</a> method.</p>
<h1 id="what-do-we-do-in-every-service">What do we do in every service?</h1>
<ul>
<li>Initialise Serilog.</li>
<li>Add a Serilog sink to ElasticSearch for Kibana (but only in non-local config.)</li>
<li>Hook/Unhook the <code>AppDomain.Current.UnhandledException</code> handler.</li>
<li>Register/UnRegister with Consul.</li>
<li>Setup StructureMap, if using an IOC Container.</li>
<li>Run as a Console if the <code>Environment.UserInteractive</code> flag is true.</li>
<li>Run as a Service otherwise</li>
</ul>
<p>The only task with potential to have variance each time is the setting up of StructureMap, the rest are almost identical every time.</p>
<h1 id="how-to-solve-all-this-repetition">How to solve all this repetition?</h1>
<p>To rectify this, I created a nuget project which encapsulates all of this logic, and allows us to create a Console project with the following startup:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Main(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	ServiceHost.Run&lt;Startup&gt;(<span style="color:#e6db74">&#34;TestService&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This requires one class implementing the <code>IStartup</code> interface, and there are some optional interfaces which can be implemented too:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Startup</span> : IStartup, IDisposable
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> Startup()
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		Console.WriteLine(<span style="color:#e6db74">&#34;starting up&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Execute(ServiceArgs service)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		File.AppendAllLines(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, <span style="color:#e6db74">&#34;log.txt&#34;</span>), <span style="color:#66d9ef">new</span>[] { <span style="color:#e6db74">&#34;boot!&#34;</span> });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">while</span> (service.CancelRequested == <span style="color:#66d9ef">false</span>)
</span></span><span style="display:flex;"><span>			Thread.Sleep(<span style="color:#ae81ff">500</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> Dispose()
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		Console.WriteLine(<span style="color:#e6db74">&#34;shutting down&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Optionally, the project can implement two interfaces to control Consul and ElasticSearch configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Config</span> : ILogConfig, IConsulRegistration
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">bool</span> EnableKibana { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> Uri LoggingEndpoint { <span style="color:#66d9ef">get</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> CatalogRegistration CreateRegistration()
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> CatalogRegistration() { Service = <span style="color:#66d9ef">new</span> AgentService
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			Address = <span style="color:#e6db74">&#34;http://localhost&#34;</span>,
</span></span><span style="display:flex;"><span>			Port = <span style="color:#ae81ff">8005</span>,
</span></span><span style="display:flex;"><span>			Service = <span style="color:#e6db74">&#34;TestService&#34;</span>
</span></span><span style="display:flex;"><span>		}};
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> CatalogDeregistration CreateDeregistration()
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> CatalogDeregistration { ServiceID = <span style="color:#e6db74">&#34;TestService&#34;</span> };
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>By implementing these interfaces, the <code>ServiceHost</code> class can use StructureMap to find the implementations (if any) at run time.</p>
<p>Talking of StructureMap, if we wish to configure the container in the host application, all we need to do is create a class which inherits <code>Registry</code>, and the ServiceHost&rsquo;s StructureMap configuration will find it.</p>
<h1 id="how-do-we-support-other-tools">How do we support other tools?</h1>
<p>Well we could implment some kind of stage configuration steps, so your startup might change to look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Main(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	ServiceHost.Stages(<span style="color:#66d9ef">new</span> LoggingStage(), <span style="color:#66d9ef">new</span> ConsulStage(), <span style="color:#66d9ef">new</span> SuperAwesomeThingStage());
</span></span><span style="display:flex;"><span>	ServiceHost.Run&lt;Startup&gt;(<span style="color:#e6db74">&#34;TestService&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The reason I haven&rsquo;t done this is that on the whole, we tend to use the same tools for each job in every service; StructureMap for IOC, Serilog for logging, Consul for discovery.  So rather than having to write some boilerplate for every service (e.g. specifying all the stages), I just bake the options in to <code>ServiceHost</code> directly.</p>
<p>This means that if you want your own version of this library with different tooling support, you need to write it yourself.  As a starting point, I have the code for the <a href="https://github.com/pondidum/ServiceContainer"><code>ServiceContainer</code> project up on Github</a>.</p>
<p>It is not difficult to create new stages for the pipeline - all the different tasks the <code>ServiceHost</code> can perform are implemented in a pseudo Russian-Doll model - they inherit <code>Stage</code>, which looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Stage</span> : IDisposable
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> IContainer Container { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">set</span>; }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">void</span> Execute();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">void</span> Dispose();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Anything you want to your stage to do before the <code>IStartup.Execute()</code> call is made is done in <code>Execute()</code>, similarly anything to be done afterwards is in <code>Dispose()</code>.  For example, the <code>ConsulStage</code> is implemented like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConsulStage</span> : Stage
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> Execute()
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> registration = Container.TryGetInstance&lt;IConsulRegistration&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (registration != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">var</span> client = <span style="color:#66d9ef">new</span> ConsulClient();
</span></span><span style="display:flex;"><span>			client.Catalog.Register(registration.CreateRegistration());
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> Dispose()
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> registration = Container.TryGetInstance&lt;IConsulRegistration&gt;();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> (registration != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">var</span> client = <span style="color:#66d9ef">new</span> ConsulClient();
</span></span><span style="display:flex;"><span>			client.Catalog.Deregister(registration.CreateDeregistration());
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Finally you just need to add the stage to the <code>ServiceWrapper</code> constructor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> ServiceWrapper(<span style="color:#66d9ef">string</span> name, Type entryPoint)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// snip...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	_stages = <span style="color:#66d9ef">new</span> Stage[]
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">new</span> LoggingStage(name),
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">new</span> ConsulStage()
</span></span><span style="display:flex;"><span>	};
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="get-started">Get started!</h1>
<p>That&rsquo;s all there is to it!  Hopefully this gives you a good starting point for de-boilerplating your microservices :)</p>
]]></content:encoded></item><item><title>Database Integrations for MicroServices</title><link>https://andydote.co.uk/2016/06/09/database-integrations-for-microservices/</link><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2016/06/09/database-integrations-for-microservices/</guid><description>This is a follow up post after seeing Michal Franc&amp;rsquo;s NDC talk on migrating from Monolithic architectures.
One point raised was that Database Integration points are a terrible idea - and I wholeheartedly agree. However, there can be a number of situations where a Database Integration is the best or only way to achieve the end goal. This can be either technical; say a tool does not support API querying (looking at you SSRS), or cultural; the other team either don&amp;rsquo;t have the willingness, time, or power to learn how to query an API.</description><content:encoded><![CDATA[<p>This is a follow up post after seeing <a href="https://twitter.com/francmichal">Michal Franc</a>&rsquo;s NDC talk on migrating from Monolithic architectures.</p>
<p>One point raised was that Database Integration points are a terrible idea - and I wholeheartedly agree.  However, there can be a number of situations where a Database Integration is the best or only way to achieve the end goal.  This can be either technical; say a tool does not support API querying (looking at you SSRS), or cultural; the other team either don&rsquo;t have the willingness, time, or power to learn how to query an API.</p>
<p>One common situation is a reporting team, who either cannot query an API (e.g. they are stuck using SSRS), or don&rsquo;t want/have time to learn how to query an API.</p>
<p>There are two ways which can make a Database Integration an altogether less painful prospect, both with a common starting point: A separate login to the Database, with only readonly access to a very small set of tables and views.</p>
<p>Views can be used to create a representation of the service&rsquo;s data in a manner which makes sense to external systems, for example de-normalising tables, or converting integer based enumerations into their string counterparts.</p>
<p>Tables can be used to expose a transformed version of the service&rsquo;s data, for example a readmodel from an event stream.</p>
<h2 id="event-sourcing-source-data">Event Sourcing source data</h2>
<p>For example, one of our services uses Event Sourcing.  It uses projections to construct readmodels as events are stored (we use the <a href="https://www.nuget.org/packages/ledger">Ledger</a> library, and a SqlServer backend for this.)  To provide a Database Integeration point, we have a second set of projections which populate a set of tables specifically for external querying.</p>
<p>If the following event was committed to the store:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;eventType&#34;</span>: <span style="color:#e6db74">&#34;phoneNumberAdded&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;aggregateID&#34;</span>: <span style="color:#ae81ff">231231</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;number&#34;</span>: <span style="color:#e6db74">&#34;01230 232323&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;home&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The readmodel table, which is just two columns: <code>id:int</code> and <code>json:varchar(max)</code>, would get updated to look like this:</p>
<pre tabindex="0"><code>id      | json
--------+-------------------------------------------------
231231  | {
            &#34;id&#34;: 231231,
            &#34;name&#34;: &#34;Andy Dote&#34;,
            &#34;phones&#34;: [
              { &#34;type&#34;: &#34;mobile&#34;, &#34;number&#34;: &#34;0712345646&#34; },
              { &#34;type&#34;: &#34;home&#34;, &#34;number&#34;: &#34;01230 232323&#34; }
            ]
          }
</code></pre><p>The external integration table, which is a denormalised view of the data would get updated to look like this:</p>
<pre tabindex="0"><code>id      | name      | home_phone    | mobile_phone
--------+-----------+---------------+----------------------
231231  | Andy Dote | 01230 232 323 | 07123 456 456
</code></pre><h3 id="non-sql-systems">Non-SQL Systems</h3>
<p>While I have not needed to implement this yet, there is a plan for how to do it:  a simple regular job which will pull the data from the service&rsquo;s main store, transform it, and insert it into the SQL store.</p>
<h3 id="relational-systems">Relational Systems</h3>
<p>A relational system can be done in a number of ways:</p>
<ul>
<li>In the same manner as the Non-SQL system: with a periodical job</li>
<li>In a similar manner to the Event Sourced system: Updating a second table at the same time as the primary tables</li>
<li>Using SQL triggers: on insert, add a row to the integration table etc.</li>
</ul>
<p>I wouldn&rsquo;t recommend the 3rd option, as you will start ending up with more and more logic living in larger and larger triggers.
The important point on all these methods is that the Integration tables are separate from the main tables: you do not want to expose your internal implementation to external consumers.</p>
]]></content:encoded></item><item><title>Running pre-compiled microservices in Docker with Mono</title><link>https://andydote.co.uk/2015/09/15/pre-compiled-microservices/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/09/15/pre-compiled-microservices/</guid><description>Last time we went through creating a Dockerfile for a microservice, with the service being compiled on creation of the container image, using xbuild.
However we might not want to compile the application to create the container image, and use an existing version (e.g. one created by a build server.)
Our original Dockerfile was this:
FROM mono:3.10-onbuild RUN apt-get update &amp;amp;&amp;amp; apt-get install mono-4.0-service -y CMD [ &amp;#34;mono-service&amp;#34;, &amp;#34;./MicroServiceDemo.exe&amp;#34;, &amp;#34;--no-daemon&amp;#34; ] EXPOSE 12345 We only need to make a few modifications to use a pre-compiled application:</description><content:encoded><![CDATA[<p>Last time we went through <a href="/2015/09/05/running-microservices-in-docker-with-mono.html">creating a Dockerfile for a microservice</a>, with the service being compiled on creation of the container image, using xbuild.</p>
<p>However we might not want to compile the application to create the container image, and use an existing version (e.g. one created by a build server.)</p>
<p>Our original Dockerfile was this:</p>
<pre tabindex="0"><code>FROM mono:3.10-onbuild
RUN apt-get update &amp;&amp; apt-get install mono-4.0-service -y

CMD [ &#34;mono-service&#34;,  &#34;./MicroServiceDemo.exe&#34;, &#34;--no-daemon&#34; ]
EXPOSE 12345
</code></pre><p>We only need to make a few modifications to use a pre-compiled application:</p>
<pre tabindex="0"><code>FROM mono:3.10.0
RUN apt-get update &amp;&amp; apt-get install mono-4.0-service -y

RUN mkdir -p /usr/src/app
COPY . /usr/src/app
WORKDIR /usr/src/app

CMD [ &#34;mono-service&#34;,  &#34;./MicroServiceDemo.exe&#34;, &#34;--no-daemon&#34; ]
EXPOSE 12345
</code></pre><p>Asides from changing the base image to <code>mono:3.10.0</code>, the only changes made are to add the following lines:</p>
<pre tabindex="0"><code>RUN mkdir -p /usr/src/app
COPY . /usr/src/app
WORKDIR /usr/src/app
</code></pre><p>These lines create a new directory for our application, copy the contents of the current directory (e.g. the paths specified when you type <code>docker build -t servicedemo .</code>) and make the directory our working directory.</p>
<p>You can now create a container with the same commands as last time:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker build -t servicedemo .
</span></span><span style="display:flex;"><span>docker run -d -p 12345:12345 --name demo servicedemo
</span></span></code></pre></div><p>There is a demo project for all of this on my github: <a href="https://github.com/Pondidum/DockerMonoDemo">DockerMonoDemo</a>.</p>
]]></content:encoded></item><item><title>Running microservices in Docker with Mono</title><link>https://andydote.co.uk/2015/09/05/running-microservices-in-docker-with-mono/</link><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/09/05/running-microservices-in-docker-with-mono/</guid><description>Getting a service running under Docker is fairly straight forward once you have all the working parts together. I have an app written (following my guide on service and console in one), which uses Owin to serve a web page as a demo:
install-package Microsoft.Owin.SelfHost public partial class Service : ServiceBase { //see the service console post for the rest of this protected override void OnStart(string[] args) { _app = WebApp.</description><content:encoded><![CDATA[<p>Getting a service running under <a href="https://www.docker.com">Docker</a> is fairly straight forward once you have all the working parts together.  I have an app written (following <a href="/2015/08/30/single-project-service-and-console.html">my guide</a> on service and console in one), which uses Owin to serve a web page as a demo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>install-package Microsoft.Owin.SelfHost
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">partial</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Service</span> : ServiceBase
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//see the service console post for the rest of this</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> OnStart(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		_app = WebApp.Start(<span style="color:#e6db74">&#34;http://*:12345&#34;</span>, app =&gt;
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			app.UseWelcomePage(<span style="color:#e6db74">&#34;/&#34;</span>);
</span></span><span style="display:flex;"><span>		});
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> OnStop()
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		_app.Dispose();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To run this under docker/mono we just need to add a <code>Dockerfile</code> to the root directory of the solution, which is based off the <a href="https://hub.docker.com/_/mono">documentation here</a>.</p>
<p>Using <code>mono-service</code> instead of <code>mono</code> to run the application caused me a number of headaches to start with, as the container was exiting instantly.  This is because Docker detects the process has exited, and stops the container.  As we will be running the container detached from the console, we just need to supply the <code>--no-daemon</code> argument to <code>mono-service</code>.</p>
<pre tabindex="0"><code>FROM mono:3.10-onbuild
RUN apt-get update &amp;&amp; apt-get install mono-4.0-service -y
CMD [ &#34;mono-service&#34;,  &#34;./MicroServiceDemo.exe&#34;, &#34;--no-daemon&#34; ]
EXPOSE 12345
</code></pre><p>You can then go to your solution directory, and run the following two commands to create your image, and start a container of it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker build -t servicedemo .
</span></span><span style="display:flex;"><span>docker run -d -p 12345:12345 --name demo servicedemo
</span></span></code></pre></div><p>You can now open your browser and go to your Docker host&rsquo;s IP:12345 and see the Owin welcome page.</p>
<h2 id="improvements-speed-and-lack-of-internet">Improvements: Speed and lack of internet</h2>
<p>Quite often I have no internet access, so having to <code>apt-get install mono-4.0-service</code> each time I build the image can be a pain.  This however is also very easily resolved: by making another image with the package already installed.</p>
<p>Create a new directory (outside of your project directory), and create a <code>Dockerfile</code>.  This Dockerfile is identical to the <a href="https://github.com/mono/docker/blob/adc7a3ec47f7d590f75a4dec0203a2103daf8db0/3.10.0/onbuild/Dockerfile">mono:3.10-onbuild</a> image, but with the added apt-get line.</p>
<pre tabindex="0"><code>FROM mono:3.10.0

MAINTAINER Jo Shields &lt;jo.shields@xamarin.com&gt;

RUN apt-get update &amp;&amp; apt-get install mono-4.0-service -y

RUN mkdir -p /usr/src/app/source /usr/src/app/build
WORKDIR /usr/src/app/source

ONBUILD COPY . /usr/src/app/source
ONBUILD RUN nuget restore -NonInteractive
ONBUILD RUN xbuild /property:Configuration=Release /property:OutDir=/usr/src/app/build/
ONBUILD WORKDIR /usr/src/app/build
</code></pre><p>Now run the build command to make your new base image:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>docker build -t mono-service-onbuild .
</span></span></code></pre></div><p>Now you can go back to your project and update the <code>Dockerfile</code> to use this image base instead:</p>
<pre tabindex="0"><code>FROM mono-service-onbuild
CMD [ &#34;mono-service&#34;,  &#34;./MicroServiceDemo.exe&#34;, &#34;--no-daemon&#34; ]
EXPOSE 12345
</code></pre><p>Now when you run <code>docker build -t &lt;project name&gt; .</code> it will only need to do the compile steps.</p>
<p>Much faster :)</p>
]]></content:encoded></item><item><title>A single project Windows Service and Console</title><link>https://andydote.co.uk/2015/08/30/single-project-service-and-console/</link><pubDate>Sun, 30 Aug 2015 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2015/08/30/single-project-service-and-console/</guid><description>I have found that when developing MicroServices, I often want to run them from within Visual Studio, or just as a console application, and not have to bother with the hassle of installing as windows services.
In the past I have seen this achieved by creating a Class Library project with all the actual implementation inside it, and then both a Console Application and Windows Service project referencing the library and doing nothing other than calling a .</description><content:encoded><![CDATA[<p>I have found that when developing MicroServices, I often want to run them from within Visual Studio, or just as a console application, and not have to bother with the hassle of installing as windows services.</p>
<p>In the past I have seen this achieved by creating a <code>Class Library</code> project with all the actual implementation inside it, and then both a <code>Console Application</code> and <code>Windows Service</code> project referencing the library and doing nothing other than calling a <code>.Start()</code> method or similar.</p>
<p>While this works, it has always bugged me as there should be a straight forward way of achieving a single exe to do both roles.  It turns out there is an easy way to do it too&hellip;</p>
<h2 id="creating-the-project">Creating the Project</h2>
<p>First, create a <code>WindowsService</code> project in VisualStudio:
<img loading="lazy" src="service-new.png" alt="New Windows Service"  />
</p>
<p>Then open the project properties, and change the project type to <code>Console Application</code> and set the startup object:
<img loading="lazy" src="service-project-type.png" alt="Service Type"  />
</p>
<p>Next, open <code>Service1.cs</code> and add a new method (and rename it to <code>Service</code> if you feel the need!):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> StartConsole()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	Console.WriteLine(<span style="color:#e6db74">&#34;Press any key to exit...&#34;</span>);
</span></span><span style="display:flex;"><span>	OnStart(<span style="color:#66d9ef">new</span> <span style="color:#66d9ef">string</span>[] { });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	Console.ReadKey();
</span></span><span style="display:flex;"><span>	OnStop();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Finally  open <code>Program.cs</code> and replace the <code>Main</code> method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Main()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> service = <span style="color:#66d9ef">new</span> Service();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (Environment.UserInteractive)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		service.StartConsole();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		ServiceBase.Run(<span style="color:#66d9ef">new</span> ServiceBase[] { service });
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="displaying-output">Displaying Output</h2>
<p>Calling <code>Console.Write*</code> and <code>Console.Read*</code> methods when running as a windows service will cause exceptions to be thrown, which suggest that you should redirect the console streams to use them under a windows service.</p>
<p>As a MicroService you shouldn&rsquo;t need to be reading keys from the console (other than the one in our <code>StartConsole</code> method), but writing output would be useful&hellip;</p>
<p>To do this I like to use my logging library of choice (<a href="http://serilog.net/">Serilog</a>), which I have setup to write to files and to a console:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> InitializeLogging()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> logs = Path.Combine(baseDirectory, <span style="color:#e6db74">&#34;logs&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	Directory.CreateDirectory(logs);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	Log.Logger = <span style="color:#66d9ef">new</span> LoggerConfiguration()
</span></span><span style="display:flex;"><span>		.MinimumLevel.Debug()
</span></span><span style="display:flex;"><span>		.WriteTo.ColoredConsole()
</span></span><span style="display:flex;"><span>		.WriteTo.RollingFile(Path.Combine(logs, <span style="color:#e6db74">&#34;{Date}.log&#34;</span>))
</span></span><span style="display:flex;"><span>		.CreateLogger();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And call this method inside the <code>Service1</code> constructor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Service()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	InitializeComponent();
</span></span><span style="display:flex;"><span>	InitializeLogging();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="the-edge-case">The Edge Case</h2>
<p>There is one slight edge case which I am aware of, which is that the <code>Environment.UserInteractive </code> property can return true even when running as a windows service if when you install the service you tick <code>Allow service to interact with desktop</code> checkbox:</p>
<p><img loading="lazy" src="service-interact.png" alt="Service-Logon"  />
</p>
<p>My only solution to this is: <strong>Don&rsquo;t tick that box</strong>. I don&rsquo;t think I have ever used that option anyway!</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Using this method means less code and projects to maintain, and a very easy path to go from running a service as a desktop application to service.</p>
]]></content:encoded></item></channel></rss>