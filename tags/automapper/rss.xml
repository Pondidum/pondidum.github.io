<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>automapper on Andy Dote</title><link>https://andydote.co.uk/tags/automapper/</link><description>Recent content in automapper on Andy Dote</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 29 Mar 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://andydote.co.uk/tags/automapper/rss.xml" rel="self" type="application/rss+xml"/><item><title>Using a Micro ORM to decouple your DB Access</title><link>https://andydote.co.uk/2014/03/29/using-a-micro-orm-to-decouple-your-db-access/</link><pubDate>Sat, 29 Mar 2014 00:00:00 +0000</pubDate><guid>https://andydote.co.uk/2014/03/29/using-a-micro-orm-to-decouple-your-db-access/</guid><description>One of the databases I use on a regular bases has a rather interesting column naming scheme; all columns have a prefix, based on the table name. For example, the table containing people would have the prefix PEO_, so you would have this:
Select * from People PEO_PersonID, PEO_FirstName, PEO_LastName, PEO_DoB ----------------------------------------------------- 1 John Jones 1984-07-15 I believe the idea was so that when querying, you would not have any column name clashes.</description></item></channel></rss>